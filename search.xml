<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nginx + Lua 脚本 动态配置</title>
      <link href="/anubis-blogs/2024/01/24/Nginx+Lua%20%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE/"/>
      <url>/anubis-blogs/2024/01/24/Nginx+Lua%20%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx-Lua-脚本-动态配置"><a href="#Nginx-Lua-脚本-动态配置" class="headerlink" title="Nginx + Lua 脚本 动态配置"></a>Nginx + Lua 脚本 动态配置</h1><h2 id="一、安装LuaJIT2"><a href="#一、安装LuaJIT2" class="headerlink" title="一、安装LuaJIT2"></a>一、安装LuaJIT2</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装下载目录</span><span class="token builtin class-name">cd</span> /usr/local/src<span class="token comment"># 下载地址</span><span class="token function">wget</span> https://github.com/openresty/luajit2/archive/refs/tags/v2.1-20201229.tar.gz<span class="token comment"># 解压缩文件夹</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> v2.1-20201229.tar.gz<span class="token comment"># 编译和安装</span><span class="token function">make</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span>/usr/local/luajit<span class="token function">make</span> <span class="token function">install</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span>/usr/local/luajit<span class="token comment"># 安装lua-devel</span>yum <span class="token function">install</span> lua-devel<span class="token comment"># 配置环境变量</span><span class="token function">vim</span> /etc/profile <span class="token comment"># 添加下方代码</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">LUAJIT_LIB</span><span class="token operator">=</span>/usr/local/luajit/lib<span class="token builtin class-name">export</span> <span class="token assign-left variable">LUAJIT_INC</span><span class="token operator">=</span>/usr/local/luajit/include/luajit-2.1<span class="token comment"># 使/etc/profile 立刻生效</span><span class="token builtin class-name">source</span> /etc/profile<span class="token comment"># 检查安装情况</span>lua <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、安装Nginx"><a href="#二、安装Nginx" class="headerlink" title="二、安装Nginx"></a>二、安装Nginx</h2><h3 id="1-下载nginx"><a href="#1-下载nginx" class="headerlink" title="1.下载nginx"></a>1.下载nginx</h3><p>已经安装过nginx的可以看 “4.追加nginx-module”</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装依赖库 这些依赖库主要有g++、gcc、openssl-devel、pcre-devel和zlib-devel </span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">make</span> gcc gcc-c++ glibc glibc-devel <span class="token function">lsof</span>   yum <span class="token parameter variable">-y</span> <span class="token function">install</span> pcre pcre-devel  yum <span class="token parameter variable">-y</span> <span class="token function">install</span> zlib zlib-devel  yum <span class="token parameter variable">-y</span> <span class="token function">install</span> openssl openssl--devel <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载源码包</span><span class="token builtin class-name">cd</span> /usr/local/src<span class="token function">wget</span> <span class="token parameter variable">-d</span> <span class="token string">"http://nginx.org/download/nginx-1.8.0.tar.gz"</span><span class="token comment"># 解压 nginx-1.8.0</span><span class="token function">tar</span> zxvf nginx-1.8.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Nginx-Module下载"><a href="#2-Nginx-Module下载" class="headerlink" title="2.Nginx Module下载"></a>2.Nginx Module下载</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/src/nginx-modules<span class="token comment"># ngx_devel_kit 下载</span><span class="token function">wget</span> https://github.com/vision5/ngx_devel_kit/archive/v0.3.1.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> v0.3.1.tar.gz<span class="token comment"># lua-nginx-module 下载</span><span class="token function">wget</span> https://github.com/openresty/lua-nginx-module/archive/v0.10.14.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> v0.10.14.tar.gz<span class="token comment"># headers-more-nginx-module 下载</span><span class="token function">wget</span> https://github.com/openresty/headers-more-nginx-module/archive/v0.33.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> v0.33.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-编译nginx"><a href="#3-编译nginx" class="headerlink" title="3.编译nginx"></a>3.编译nginx</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 编译nginx</span>./configure <span class="token punctuation">\</span><span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/nginx <span class="token punctuation">\</span>--with-http_stub_status_module <span class="token punctuation">\</span>--with-http_ssl_module <span class="token punctuation">\</span>--with-file-aio <span class="token punctuation">\</span>--with-http_sub_module <span class="token punctuation">\</span>--with-http_gzip_static_module <span class="token punctuation">\</span>--with-http_v2_module <span class="token punctuation">\</span>--with-pcre <span class="token punctuation">\</span>--with-http_realip_module <span class="token punctuation">\</span>--with-stream <span class="token punctuation">\</span>--with-stream_ssl_module <span class="token punctuation">\</span>--with-ld-opt<span class="token operator">=</span><span class="token string">"-Wl,-rpath,/usr/local/luajit/lib"</span> <span class="token punctuation">\</span>--add-module<span class="token operator">=</span>/usr/local/src/nginx-modules/headers-more-nginx-module-0.33 <span class="token punctuation">\</span>--add-module<span class="token operator">=</span>/usr/local/src/nginx-modules/ngx_devel_kit-0.3.1 <span class="token punctuation">\</span>--add-module<span class="token operator">=</span>/usr/local/src/nginx-modules/lua-nginx-module-0.10.14<span class="token comment"># 安装</span><span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-追加nginx-module"><a href="#4-追加nginx-module" class="headerlink" title="4.追加nginx-module"></a>4.追加nginx-module</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入nginx解压目录</span><span class="token builtin class-name">cd</span> /usr/local/src/nginx-1.8.0<span class="token comment"># 追加nginx-module</span>./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/src/nginx-modules --add-module<span class="token operator">=</span>/usr/local/src/nginx-modules/headers-more-nginx-module-0.33 <span class="token punctuation">\</span>--add-module<span class="token operator">=</span>/usr/local/src/nginx-modules/ngx_devel_kit-0.3.1 <span class="token punctuation">\</span>--add-module<span class="token operator">=</span>/usr/local/src/nginx-modules/lua-nginx-module-0.10.14<span class="token comment"># 编辑，切记没有make install</span><span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Nginx命令"><a href="#5-Nginx命令" class="headerlink" title="5.Nginx命令"></a>5.Nginx命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动nginx</span>nginx<span class="token comment">#停止nginx</span>nginx <span class="token parameter variable">-s</span> stop<span class="token comment">#重启nginx</span>nginx <span class="token parameter variable">-s</span> reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-验证安装情况"><a href="#6-验证安装情况" class="headerlink" title="6.验证安装情况"></a>6.验证安装情况</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/nginx/sbin/nginx <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-在nginx配置文件中-server段-添加如下代码"><a href="#1-在nginx配置文件中-server段-添加如下代码" class="headerlink" title="1.在nginx配置文件中 server段 添加如下代码"></a>1.在nginx配置文件中 server段 添加如下代码</h4><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> /lua</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">default_type</span> <span class="token string">'text/plain'</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">content_by_lua</span> <span class="token string">'ngx.say("hello,lua!!!")'</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-重启nginx"><a href="#2-重启nginx" class="headerlink" title="2.重启nginx"></a>2.重启nginx</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./nginx <span class="token parameter variable">-s</span> reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-访问：xxx-xxx-xxx-xxx-端口-lua"><a href="#3-访问：xxx-xxx-xxx-xxx-端口-lua" class="headerlink" title="3.访问：xxx.xxx.xxx.xxx:端口&#x2F;lua"></a>3.访问：xxx.xxx.xxx.xxx:端口&#x2F;lua</h4><h2 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h2><h3 id="1-Vue反向代理-开关控制"><a href="#1-Vue反向代理-开关控制" class="headerlink" title="1.Vue反向代理 开关控制"></a>1.Vue反向代理 开关控制</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">worker_processes</span> <span class="token number">5</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">error_log</span>  logs/error.log</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">error_log</span>  logs/error.log  notice</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">error_log</span>  logs/error.log  info</span><span class="token punctuation">;</span><span class="token comment"># events事件指令是设定Nginx的工作模式及连接数上限</span><span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">worker_connections</span> <span class="token number">512</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>    <span class="token comment"># lua 全局缓存</span>    <span class="token directive"><span class="token keyword">lua_shared_dict</span> dyn_ups_zone <span class="token number">10m</span></span><span class="token punctuation">;</span>    <span class="token comment"># include是个主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度。类似于Apache中的include方法。</span>    <span class="token directive"><span class="token keyword">include</span> mime.types</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">default_type</span> application/octet-stream</span><span class="token punctuation">;</span>    <span class="token comment"># sendfile参数用于开启高效文件传输模式。将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞；</span>    <span class="token directive"><span class="token keyword">sendfile</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>    <span class="token comment"># 8080端口 gzip 反向代理</span>    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">8080</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span> vue</span><span class="token punctuation">;</span>        <span class="token comment"># 必须要加 错误页配置</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">&#123;</span>            <span class="token directive"><span class="token keyword">root</span> html</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">#开启gzip</span>        <span class="token directive"><span class="token keyword">gzip</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>        <span class="token comment">##低于1kb的资源不压缩 </span>        <span class="token directive"><span class="token keyword">gzip_min_length</span> <span class="token number">1k</span></span><span class="token punctuation">;</span>        <span class="token comment">##压缩级别1-9，越大压缩率越高，同时消耗cpu资源也越多，建议设置在5左右。</span>        <span class="token directive"><span class="token keyword">gzip_comp_level</span> <span class="token number">7</span></span><span class="token punctuation">;</span>         <span class="token comment">##需要压缩哪些响应类型的资源，多个空格隔开。不建议压缩图片.</span>        <span class="token directive"><span class="token keyword">gzip_types</span> text/plain application/javascript application/x-javascript text/javascript text/xml text/css</span><span class="token punctuation">;</span>        <span class="token comment">##配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）</span>        <span class="token directive"><span class="token keyword">gzip_disable</span> <span class="token string">"MSIE [1-6]\."</span></span><span class="token punctuation">;</span>        <span class="token comment">##是否添加“Vary: Accept-Encoding”响应头</span>        <span class="token directive"><span class="token keyword">gzip_vary</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">charset</span> utf8</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">large_client_header_buffers</span> <span class="token number">4</span> <span class="token number">64k</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">client_header_buffer_size</span> <span class="token number">64k</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">client_max_body_size</span> <span class="token number">60m</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">client_body_buffer_size</span> <span class="token number">128k</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_connect_timeout</span> <span class="token number">600</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_read_timeout</span> <span class="token number">600</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_send_timeout</span> <span class="token number">600</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_buffer_size</span> <span class="token number">64k</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_buffers</span> <span class="token number">4</span> <span class="token number">32k</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_busy_buffers_size</span> <span class="token number">64k</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_temp_file_write_size</span> <span class="token number">64k</span></span><span class="token punctuation">;</span>        <span class="token comment"># vue 静态资源 反向代理</span>        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>            <span class="token directive"><span class="token keyword">access_by_lua</span> <span class="token string">'                local dynupszone = ngx.shared.dyn_ups_zone;                local access = dynupszone:get("accessfoo");                ngx.log(ngx.INFO, "access status: ", access);                if access == "off" then                   ngx.status = 403;                   ngx.say("403 : no auth to visit big-screen");                   ngx.header["X-Nginx-Header"] = "No Nginx Auth ";                   ngx.exit(403)                else                   ngx.header["X-Nginx-Header"] = "Have Nginx Auth";                end            '</span></span><span class="token punctuation">;</span>            <span class="token directive"><span class="token keyword">root</span> /dist/</span><span class="token punctuation">;</span>            <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>            <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment"># 动态反向代理开关控制入口</span>        <span class="token directive"><span class="token keyword">location</span> /config</span> <span class="token punctuation">&#123;</span>            <span class="token directive"><span class="token keyword">default_type</span> text/plain</span><span class="token punctuation">;</span>            <span class="token directive"><span class="token keyword">content_by_lua_block</span></span> <span class="token punctuation">&#123;</span>                <span class="token directive"><span class="token keyword">local</span> foo = ngx.req.get_uri_args()[<span class="token string">"foo"</span>]                if foo == nil then                    ngx.say(<span class="token string">"usage: /config?foo=off, or /config?foo=on"</span>)                    local dynupszone = ngx.shared.dyn_ups_zone</span><span class="token punctuation">;</span>                    <span class="token directive"><span class="token keyword">local</span> access = dynupszone:get(<span class="token string">"accessfoo"</span>)</span><span class="token punctuation">;</span>                    <span class="token directive"><span class="token keyword">ngx.say("now</span> status: ", access)                    return</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">end</span>                ngx.log(ngx.INFO, <span class="token string">"vue can visit: "</span>, foo)</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">ngx.say("vue</span> can visit: ", foo)</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">ngx.shared.dyn_ups_zone:set("accessfoo",</span> foo)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-动态流量环境切换"><a href="#2-动态流量环境切换" class="headerlink" title="2.动态流量环境切换"></a>2.动态流量环境切换</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">worker_processes</span> <span class="token number">2</span></span><span class="token punctuation">;</span><span class="token comment">#配置nginx工作进程数</span><span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">use</span> epoll</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span><span class="token comment"># lua 全局缓存</span>   <span class="token directive"><span class="token keyword">lua_shared_dict</span> dyn_ups_zone <span class="token number">10m</span></span><span class="token punctuation">;</span><span class="token comment"># include是个主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度。类似于Apache中的include方法。</span>   <span class="token directive"><span class="token keyword">include</span>       mime.types</span><span class="token punctuation">;</span>   <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>   <span class="token comment">#access_log  logs/access.log  main;</span><span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span>   <span class="token directive"><span class="token keyword">gzip</span>  <span class="token boolean">on</span></span><span class="token punctuation">;</span>   <span class="token directive"><span class="token keyword">tcp_nopush</span>      <span class="token boolean">on</span></span><span class="token punctuation">;</span>   <span class="token directive"><span class="token keyword">tcp_nodelay</span>     <span class="token boolean">on</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">upstream</span> prod-env</span> <span class="token punctuation">&#123;</span>   <span class="token directive"><span class="token keyword">server</span> 192.168.0.5:8080</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">keepalive</span> <span class="token number">50</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token directive"><span class="token keyword">upstream</span> grayscale-env</span> <span class="token punctuation">&#123;</span><span class="token directive"><span class="token keyword">server</span> 192.168.0.6: <span class="token number">8080</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">keepalive</span> <span class="token number">50</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">upstream</span> default</span> <span class="token punctuation">&#123;</span>   <span class="token directive"><span class="token keyword">server</span> 192.168.0.7: <span class="token number">8080</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">keepalive</span> <span class="token number">50</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span><span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">server_name</span> 192.168.0.1</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">charset</span> utf-8</span><span class="token punctuation">;</span><span class="token comment"># 默认流量环境</span> <span class="token directive"><span class="token keyword">set</span> <span class="token variable">$group</span> <span class="token string">"default"</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">location</span> /api</span> <span class="token punctuation">&#123;</span><span class="token directive"><span class="token keyword">access_by_lua</span> <span class="token string">'                local dynupszone = ngx.shared.dyn_ups_zone;                local access = dynupszone:get("accessfoo");                ngx.log(ngx.INFO, "accessfoo status: ", access);                if access and access == "on" then                local headers = ngx.req.get_headers()    local staffid = headers["Staff-Id"]ngx.log(ngx.INFO, "staffid value: ", staffid);if staffid and staffid:sub(-1) == "5" thenngx.var.group = "grayscale-env";elsengx.var.group = “prod-env";end                else                ngx.var.group = "default";                end          '</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">rewrite</span> ^/api/(.*)$ /api/<span class="token variable">$1</span> break</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">proxy_pass</span> http://<span class="token variable">$group</span></span><span class="token punctuation">;</span><span class="token comment">#keepalive_timeout  0;</span><span class="token punctuation">&#125;</span>  <span class="token comment"># 动态灰度环境开关控制入口</span>      <span class="token directive"><span class="token keyword">location</span> /GrayscaleEnvironment</span> <span class="token punctuation">&#123;</span><span class="token directive"><span class="token keyword">default_type</span> text/plain</span><span class="token punctuation">;</span>          <span class="token directive"><span class="token keyword">content_by_lua_block</span></span> <span class="token punctuation">&#123;</span>          <span class="token directive"><span class="token keyword">local</span> foo = ngx.req.get_uri_args()[<span class="token string">"config"</span>]          if foo == nil then             ngx.say(<span class="token string">"usage: /GrayscaleEnvironment?config=off, or /GrayscaleEnvironment?config=on"</span>)                local dynupszone = ngx.shared.dyn_ups_zone</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">local</span> access = dynupszone:get(<span class="token string">"accessfoo"</span>)</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">ngx.say("Grayscale</span> Environment Default Off: ", access)</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">return</span></span><span class="token punctuation">;</span>          <span class="token directive"><span class="token keyword">end</span>                ngx.log(ngx.INFO, <span class="token string">"Grayscale Environment ON: "</span>, foo)</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">ngx.say("Grayscale</span> Environment ON: ", foo)</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">ngx.shared.dyn_ups_zone:set("accessfoo",</span> foo)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、参考文档"><a href="#四、参考文档" class="headerlink" title="四、参考文档"></a>四、参考文档</h2><ul><li><input disabled="" type="checkbox"> <a href="https://www.runoob.com/lua/lua-tutorial.html">Lua脚本语法</a></li><li><input disabled="" type="checkbox"> <a href="https://www.jianshu.com/p/aaa3d84e3d59">Nginx Lua API 学习</a></li><li><input disabled="" type="checkbox"> <a href="https://www.cnblogs.com/shihuc/p/8044753.html">基于Nginx与Lua脚本实现反向代理的动态更新</a></li><li><input disabled="" type="checkbox"> <a href="https://www.jianshu.com/p/74a5a7e6ebf9">Nginx+Lua：过滤特定接口请求</a></li><li><input disabled="" type="checkbox"> <a href="https://blog.csdn.net/shark_pang/article/details/124709417">Nginx模块Lua基本使用方法抄录</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Lua </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node</title>
      <link href="/anubis-blogs/2024/01/24/Node&amp;Npm/"/>
      <url>/anubis-blogs/2024/01/24/Node&amp;Npm/</url>
      
        <content type="html"><![CDATA[<h2 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h2><pre class="line-numbers language-none"><code class="language-none"># 使用Node ，Npm版本：node&#x3D;&gt;6.14.4npm&#x3D;&gt;npm -g install npm@4.6.1# macnpm install# node-gyp 依赖于 Python &gt;&#x3D; 2.5.0 &amp; &lt; 3.0.0npm install -g node-gypnpm install --python&#x3D;python2.7# 清除缓存npm cache clean --forcerm -rf node_modulesnpm install# 下载aid-clinpm info aid-cli versionsnpm install -g aid-cli@2.0.0# aid-cli 依赖官网（仓库地址是内网ip，所以必须使用已经下载好的）：https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;aid-cli# 阿里云镜像npm仓库地址：1、查看镜像仓库npm config get registry2、设置镜像仓库npm config set registry https:&#x2F;&#x2F;mirrors.huaweicloud.com&#x2F;repository&#x2F;npm&#x2F;npm config set registry http:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;npm&#x2F;npm config set registry https:&#x2F;&#x2F;registry.npmmirror.comnpm config set registry https:&#x2F;&#x2F;registry.npmjs.org&#x2F;# aid-cli在阿里云的官网（可以选择对应的版本直接下载源码）https:&#x2F;&#x2F;npmmirror.com&#x2F;package&#x2F;aid-cli# 手动导入npm包aid-cli最好在项目根目录安装，不加“-g”进行全局安装（容易报错）,且添加sudo执行权限sudo npm install .&#x2F;my-package&#x2F;xxx.tgz# 重新构建npm rebuild node-sass# 查看最新版本npm info wrap-ansi version# yarn 命令yarnyarn config set ignore-engines trueyarn cache clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Mac-adi-cli项目启动文档"><a href="#2-Mac-adi-cli项目启动文档" class="headerlink" title="2.Mac adi-cli项目启动文档"></a>2.Mac adi-cli项目启动文档</h2><h2 id="a-nvm安装"><a href="#a-nvm安装" class="headerlink" title="a.nvm安装"></a>a.nvm安装</h2><p><code>node 6.14.4 版本，npm -g install npm@4.6.1</code></p><h2 id="b-pyenv-安装python-2-7-18"><a href="#b-pyenv-安装python-2-7-18" class="headerlink" title="b.pyenv 安装python 2.7.18"></a>b.pyenv 安装python 2.7.18</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> pyenvpyenv <span class="token function">install</span> <span class="token number">2.7</span>.18pyenv global <span class="token number">2.7</span>.18<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="c-安装aid-cli"><a href="#c-安装aid-cli" class="headerlink" title="c.安装aid-cli"></a>c.安装aid-cli</h2><p>nvm安装的node目录结构与win不同，<code>/Users/anubis/.nvm/versions/node/v6.14.4/</code>，<br>其中关键的目录有：<code>bin</code>和<code>lib</code>。</p><ol><li><p>向bin目录复制添加aid ，并修改其中的代码，修改完成后赋权<code>chmod u+x aid</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token comment">#basedir=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")</span><span class="token assign-left variable">basedir</span><span class="token operator">=</span><span class="token string">"/Users/anubis/.nvm/versions/node/v6.14.4"</span><span class="token keyword">case</span> <span class="token variable"><span class="token variable">`</span><span class="token function">uname</span><span class="token variable">`</span></span> <span class="token keyword">in</span>    *CYGWIN*<span class="token punctuation">)</span> <span class="token assign-left variable">basedir</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>cygpath <span class="token parameter variable">-w</span> <span class="token string">"<span class="token variable">$basedir</span>"</span><span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token keyword">esac</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-x</span> <span class="token string">"<span class="token variable">$basedir</span>/bin/node"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token string">"<span class="token variable">$basedir</span>/bin/node"</span>  <span class="token string">"<span class="token variable">$basedir</span>/lib/node_modules/aid-cli/bin/aid.js"</span> <span class="token string">"<span class="token variable">$@</span>"</span>    <span class="token assign-left variable">ret</span><span class="token operator">=</span><span class="token variable">$?</span><span class="token keyword">else</span>     <span class="token function">node</span>  <span class="token string">"<span class="token variable">$basedir</span>/lib/node_modules/aid-cli/bin/aid.js"</span> <span class="token string">"<span class="token variable">$@</span>"</span>    <span class="token assign-left variable">ret</span><span class="token operator">=</span><span class="token variable">$?</span><span class="token keyword">fi</span><span class="token builtin class-name">exit</span> <span class="token variable">$ret</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>向<code>lib/node_modules</code>内复制<code>aid-cli</code>。</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 控制台内</span>aid <span class="token parameter variable">-v</span><span class="token number">2.0</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>全局卸载<code>node-sass</code>与<code>node-gyp</code>。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Mac安装node-gyp时需要先安装Xcode与python 2.7.18</span><span class="token comment"># Xcode 你需要通过运行安装</span>xcode-select <span class="token parameter variable">--install</span><span class="token comment"># 卸载 node-sass 与 node-gyp</span><span class="token function">npm</span> uninstall <span class="token parameter variable">-g</span> node-sass@4.14.1<span class="token function">npm</span> uninstall <span class="token parameter variable">-g</span> node-gyp@@7.1.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>打开<code>/Users/anubis/.nvm/versions/node/v6.14.4/lib/node_modules</code>目录可以看到<code>node-sass</code>和<code>node-gyp</code>目录，<br>将其复制到<code>/Users/anubis/.nvm/versions/node/v6.14.4/lib/node_modules/aid-cli/node_modules</code>内，<br>如果不复制会导致原来aid-cli内的win下的 <code>node-sass</code>和<code>node-gyp</code>与当前系统不匹配。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Node Sass could not <span class="token function">find</span> a binding <span class="token keyword">for</span> your current environment: OS X <span class="token number">64</span>-bit with Node.js <span class="token number">6</span>.xFound bindings <span class="token keyword">for</span> the following environments:    - Windows <span class="token number">64</span>-bit with Node.js <span class="token number">6</span>.x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>安装yarn来管理依赖，npm install会导致链接失效</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token function">yarn</span><span class="token comment"># 项目直接 npm install下载依赖会失败：</span><span class="token comment"># Error: Unsupported URL Type: npm:string-width@^4.2.0</span><span class="token comment"># 项目 直接使用 yarn add aid-cli@2.0.0 虽然可以下载成功，</span><span class="token comment"># 但是项目启动时还是会报错，所以采用复制aid-cli依赖的方法，</span><span class="token comment"># 只对 node-sass和node-gyp 进行替换，</span><span class="token comment"># 具体原因是某个依赖内到es6写法node不能识别报错。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>到项目目录下启动项目</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 下载依赖</span>yarn<span class="token comment"># 启动</span>aid dev <span class="token operator">-</span>N<span class="token comment"># 构建</span>aid build <span class="token operator">-</span>N<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>修改<code>src/modules/mochaItOm/portal/portal.js</code>接口访问本地Mock,同时配置 <code>.aid/mock/portal.js</code>内的mock接口返回数据。</li></ol><p>将 <code>_this[axio]</code> 替换为 <code>_this.$mochaItOmMock</code> 。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Nvm </tag>
            
            <tag> Npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pyppeteer</title>
      <link href="/anubis-blogs/2024/01/24/Pyppeteer/"/>
      <url>/anubis-blogs/2024/01/24/Pyppeteer/</url>
      
        <content type="html"><![CDATA[<h1 id="Pyppeteer"><a href="#Pyppeteer" class="headerlink" title="Pyppeteer"></a>Pyppeteer</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>Puppeteer 是一个 Node 库，它提供了一个高级 API 来通过 DevTools 协议控制 Chromium 或 Chrome。<br>Puppeteer API 是分层次的，反映了浏览器结构。</p><ul><li><input disabled="" type="checkbox"> Puppeteer 使用 DevTools 协议 与浏览器进行通信。</li><li><input disabled="" type="checkbox"> Browser 实例可以拥有浏览器上下文。</li><li><input disabled="" type="checkbox"> BrowserContext 实例定义了一个浏览会话并可拥有多个页面。</li><li><input disabled="" type="checkbox"> Page 至少有一个框架：主框架。 可能还有其他框架由 iframe 或 框架标签 创建。</li><li><input disabled="" type="checkbox"> frame 至少有一个执行上下文 - 默认的执行上下文 - 框架的 JavaScript 被执行。 一个框架可能有额外的与 扩展 关联的执行上下文。</li><li><input disabled="" type="checkbox"> Worker 具有单一执行上下文，并且便于与 WebWorkers 进行交互。</li></ul><h2 id="二、官方文档"><a href="#二、官方文档" class="headerlink" title="二、官方文档"></a>二、官方文档</h2><ul><li><input disabled="" type="checkbox"> <a href="https://github.com/pyppeteer/pyppeteer">Pyppeteer GitHub 仓库地址</a></li><li><input disabled="" type="checkbox"> <a href="https://pyppeteer.github.io/pyppeteer/reference.html#pyppeteer.page.Page.querySelector">Pyppeteer 文档</a></li><li><input disabled="" type="checkbox"> <a href="https://www.w3cschool.cn/puppeteer/puppeteer-yi2c37sc.html">W3CSchool Pyppeteer 中文文档</a></li></ul><h2 id="三、下载安装"><a href="#三、下载安装" class="headerlink" title="三、下载安装"></a>三、下载安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># pip安装</span>pip <span class="token function">install</span> pyppeteer<span class="token comment"># 从 github 存储库安装最新版本</span>pip <span class="token function">install</span> <span class="token parameter variable">-U</span> git+https://github.com/pyppeteer/pyppeteer@dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、例子"><a href="#四、例子" class="headerlink" title="四、例子"></a>四、例子</h2><h4 id="（1）问卷星"><a href="#（1）问卷星" class="headerlink" title="（1）问卷星"></a>（1）问卷星</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''Description: 问卷星自动表单提交 pyppeteer'''</span><span class="token keyword">import</span> asyncio<span class="token keyword">from</span> pyppeteer <span class="token keyword">import</span> launch<span class="token keyword">from</span> pyppeteer_stealth <span class="token keyword">import</span> stealth  <span class="token comment"># 反爬虫第三方库</span><span class="token keyword">import</span> time  <span class="token comment"># 用于延时</span><span class="token keyword">import</span> sys<span class="token comment"># 接受外部参数</span><span class="token comment"># URL = sys.argv[1]</span>URL <span class="token operator">=</span> <span class="token string">'https://www.wjx.cn/vm/rwCxb27.aspx#'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'py:'</span><span class="token operator">+</span>URL<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    browser <span class="token operator">=</span> <span class="token keyword">await</span> launch<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token comment">#配置浏览器地址</span>        <span class="token comment"># 'executablePath': 'C:/Users/17902/AppData/Local/Google/Chrome/Application/chrome.exe',</span>        <span class="token string">'executablePath'</span><span class="token punctuation">:</span> <span class="token string">'C:/Program Files (x86)/Microsoft/Edge/Application/msedge.exe'</span><span class="token punctuation">,</span>        <span class="token comment"># 'executablePath': 'C:\Program Files\Internet Explorer/iexplore.exe',  #</span>        <span class="token comment"># Pyppeteer 默认使用的是无头浏览器,所以要显示需要给False</span>        <span class="token string">'headless'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'--no-sandbox'</span><span class="token punctuation">,</span> <span class="token string">'--window-size=1366,850'</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>newPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>setViewport<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'width'</span><span class="token punctuation">:</span> <span class="token number">1366</span><span class="token punctuation">,</span> <span class="token string">'height'</span><span class="token punctuation">:</span> <span class="token number">768</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment"># 防止页面识别出脚本(反爬虫关键语句)</span>    <span class="token comment"># await stealth(page)</span>    url <span class="token operator">=</span> URL    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment"># 填空题：page.type(selector,text),在指定selector的元素上填写text</span>    <span class="token comment"># q1</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'#q1'</span><span class="token punctuation">,</span> <span class="token string">'XX'</span><span class="token punctuation">)</span>  <span class="token comment"># CssSelector</span>    <span class="token comment"># q2</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'#q2'</span><span class="token punctuation">,</span> <span class="token string">'XXX'</span><span class="token punctuation">)</span>    <span class="token comment"># q3</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'#q3'</span><span class="token punctuation">,</span> <span class="token string">'XXX'</span><span class="token punctuation">)</span>    <span class="token comment"># 单选题：先用page.querySelector(selector)找到指定的元素,再调用元素的click()方法、还可以用xpath方法</span>    <span class="token comment"># CssSelector: ul在第二个次序、li在第二个次序、a标签在第二个次序</span>    <span class="token comment"># q4                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div4 > div:nth-child(2) > div:nth-child(1) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 省-市-区/县 下拉框：div层级选择模拟选择</span>    <span class="token comment"># q5</span>    address <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#q5"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> address<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    province <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#divFrameData > div.layer_content > div:nth-child(2) > div > span > span:nth-child(1) > span > span:nth-child(2) > b"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> province<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    provinceOption <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"span.select2-results > ul > li:nth-child(12)"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> provinceOption<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    city <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#divFrameData > div.layer_content > div:nth-child(3) > div > span > span:nth-child(1) > span > span:nth-child(2) > b"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> city<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    cityOption <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"span.select2-results > ul > li:nth-child(2)"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> cityOption<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    area <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#divFrameData > div.layer_content > div:nth-child(4) > div > span > span:nth-child(1) > span > span:nth-child(2) > b"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> area<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    areaOption <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"span.select2-results > ul > li:nth-child(7)"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> areaOption<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    finishSubmit <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#divFrameData > div.layer_content > div:nth-child(5) > a"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> finishSubmit<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q6</span>    address <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#q6"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> address<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    province <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#divFrameData > div.layer_content > div:nth-child(2) > div > span > span:nth-child(1) > span > span:nth-child(2) > b"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> province<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    provinceOption <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"span.select2-results > ul > li:nth-child(12)"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> provinceOption<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    city <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#divFrameData > div.layer_content > div:nth-child(3) > div > span > span:nth-child(1) > span > span:nth-child(2) > b"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> city<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    cityOption <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"span.select2-results > ul > li:nth-child(2)"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> cityOption<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    area <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#divFrameData > div.layer_content > div:nth-child(4) > div > span > span:nth-child(1) > span > span:nth-child(2) > b"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> area<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    areaOption <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"span.select2-results > ul > li:nth-child(7)"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> areaOption<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    finishSubmit <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#divFrameData > div.layer_content > div:nth-child(5) > a"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> finishSubmit<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q7</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'#q7'</span><span class="token punctuation">,</span> <span class="token string">'XXX'</span><span class="token punctuation">)</span>    <span class="token comment"># q8</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'#q8'</span><span class="token punctuation">,</span> <span class="token string">'XXX'</span><span class="token punctuation">)</span>    <span class="token comment"># q9</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'#q9'</span><span class="token punctuation">,</span> <span class="token string">'XXX'</span><span class="token punctuation">)</span>    dept <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div10 > div:nth-child(2) > div > span > span:nth-child(1) > span > span:nth-child(2) > b'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> dept<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    ctc <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"span.select2-results > ul > li:nth-child(6)"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> ctc<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q10                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div11 > div:nth-child(2) > div:nth-child(3) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q20                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div21 > div:nth-child(2) > div:nth-child(2) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q21                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div22 > div:nth-child(2) > div:nth-child(2) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q22                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div23 > div:nth-child(2) > div:nth-child(2) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q23                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div24 > div:nth-child(2) > div:nth-child(1) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q24                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div25 > div:nth-child(2) > div:nth-child(4) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q25                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div26 > div:nth-child(2) > div:nth-child(1) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q26                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div27 > div:nth-child(2) > div:nth-child(1) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q27                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div28 > div:nth-child(2) > div:nth-child(1) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q28                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div29 > div:nth-child(2) > div:nth-child(1) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q29                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div30 > div:nth-child(2) > div:nth-child(2) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#q32</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'#q33'</span><span class="token punctuation">,</span> <span class="token string">'XXX'</span><span class="token punctuation">)</span>        <span class="token comment"># 日期选择题：先点击日期选择框,在出现的iframe寻找元素并调用click()方法</span>    <span class="token comment"># date1 = await page.querySelector("#q4")</span>    <span class="token comment"># await date1.click()</span>    <span class="token comment"># frame = page.frames</span>    <span class="token comment"># date2 = await frame[1].querySelector('#selectTodayButton')</span>    <span class="token comment"># await date2.click()</span>    <span class="token comment"># 找到提交按钮提交</span>    submit <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#ctlNext'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> submit<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 关闭浏览器</span>asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 反爬虫：原理是将get请求转换成undefined, 也可以用stealth库来防止机器人检测</span><span class="token comment"># await stealth(page)</span><span class="token comment"># await page.evaluateOnNewDocument('Object.defineProperty(navigator, "webdriver", &#123;get: () => undefined&#125;)')</span><span class="token comment">#</span><span class="token comment"># # 三种解析方式</span><span class="token comment"># Page.querySelector()           # CSS选择器</span><span class="token comment"># Page.querySelectorAll()</span><span class="token comment"># Page.xpath()                   # xpath</span><span class="token comment"># page.evaluate('window.scrollBy(0, window.innerHeight)') # 执行js语句</span><span class="token comment"># </span><span class="token comment"># Pyppeteer的evaluate()方法只使用JavaScript字符串，该字符串可以是函数或表达式。可以添加选项force_expr=True，强制Pyppeteer作为表达式处理。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pyppeteer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/anubis-blogs/2024/01/24/Redis/"/>
      <url>/anubis-blogs/2024/01/24/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1>]]></content>
      
      
      <categories>
          
          <category> NoSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ</title>
      <link href="/anubis-blogs/2024/01/24/RocketMQ/"/>
      <url>/anubis-blogs/2024/01/24/RocketMQ/</url>
      
        <content type="html"><![CDATA[<h1 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h1><h2 id="一、什么是MQ"><a href="#一、什么是MQ" class="headerlink" title="一、什么是MQ?"></a>一、什么是MQ?</h2><ul><li><input disabled="" type="checkbox"> MQ：MessageQuery，消息队列。队列，是一种FIFO先进先出的数据结构。消息由生产者发送到MQ进行排队，然后按原来的顺序交由消息的消费者进行处理。QQ，微信就是典型的MQ。</li></ul><h2 id="二、引入MQ的优点"><a href="#二、引入MQ的优点" class="headerlink" title="二、引入MQ的优点"></a>二、引入MQ的优点</h2><ul><li><input disabled="" type="checkbox"> 异步：异步能提高系统的相应速度，吞吐量。</li><li><input disabled="" type="checkbox"> 解耦：服务之间进行解耦，才可以减少服务之间的影响。提高系统整体的稳定性一阶可扩展性</li><li><input disabled="" type="checkbox"> 削峰：以稳定的系统资源对突发的流量的冲击。</li></ul><h2 id="三、引入MQ的缺点"><a href="#三、引入MQ的缺点" class="headerlink" title="三、引入MQ的缺点"></a>三、引入MQ的缺点</h2><ul><li><input disabled="" type="checkbox"> 系统可用性降低：系统引入外部依赖增多，系统的稳定性就会变差。一旦MQ宕机，就会对业务产生影响。这就需要考虑如何保证MQ的高可用性。</li><li><input disabled="" type="checkbox"> 系统的复杂度提高：引入MQ后系统的复杂度会大大提高。以前服务之间可以进行同步的服务调用，引入MQ后，会变为异步调用，数据的链路就会变得更加复杂。并且还会带来其他的一些问题。比如：如何保证消费不会丢失？不会被重复调用？怎么保证消息的顺序行等问题。</li><li><input disabled="" type="checkbox"> 消息一致性问题：A系统处理完业务，通过MQ发送消息给B，C系统进行后续的业务处理。如果B系统处理成功，C系统处理失败怎么办？这就需要考虑如何保证消息数据处理的一致性（分布式事务）。</li></ul><h2 id="四、几大MQ产品特点比较"><a href="#四、几大MQ产品特点比较" class="headerlink" title="四、几大MQ产品特点比较"></a>四、几大MQ产品特点比较</h2><p><img src="/anubis-blogs/markdownimages/RocketMQ/1645453206689.png"></p><p><img src="/anubis-blogs/markdownimages/RocketMQ/1645453368193.png" alt="1645453368193"></p><h2 id="五、安装环境"><a href="#五、安装环境" class="headerlink" title="五、安装环境"></a>五、安装环境</h2><h3 id="1-准备环境"><a href="#1-准备环境" class="headerlink" title="1.准备环境"></a>1.准备环境</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 移动</span><span class="token function">mv</span> jdk-8u171-linux-x64.tar.gz /usr/local/java/jdk-8u171-linux-x64.tar.gz<span class="token comment"># 解压jdk和RocketMQ</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> jdk-8u171-linux-x64.tar.gzyum <span class="token function">install</span> <span class="token function">zip</span> <span class="token comment">#压缩</span>yum <span class="token function">install</span> <span class="token function">unzip</span> <span class="token comment">#解压缩</span><span class="token function">unzip</span> rocketmq-all-4.6.0-bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置环境"><a href="#2-配置环境" class="headerlink" title="2.配置环境"></a>2.配置环境</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置环境变量</span><span class="token function">vi</span> /etc/profile<span class="token comment"># JDK环境变量</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/java/jdk1.8.0_171<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar <span class="token comment">#set rocketMQ environment</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">ROCKETMQ_HOME</span><span class="token operator">=</span>/usr/local/src/rocketmq-all-4.6.0-bin<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$ROCKETMQ_HOME</span>/bin：<span class="token environment constant">$PATH</span><span class="token comment"># 使profile生效</span><span class="token builtin class-name">source</span> /etc/profile<span class="token comment"># 验证jdk是否安装成功</span><span class="token function">java</span> <span class="token parameter variable">-version</span><span class="token function">vim</span> runserver.sh  <span class="token comment">#修改runserver.sh文件（默认4G）</span><span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;JAVA_OPT&#125;</span> -server -Xms512m -Xmx512m -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=320m"</span><span class="token function">vim</span> runbroker.sh <span class="token comment">#修改runbroker.sh文件</span><span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;JAVA_OPT&#125;</span> -server -Xms512m -Xmx512m -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=320m"</span><span class="token function">vim</span> tools.sh  <span class="token comment">#修改tools.sh文件</span><span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;JAVA_OPT&#125;</span> -server -Xms256m -Xmx256m -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=128m"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-启动RocketMQ："><a href="#3-启动RocketMQ：" class="headerlink" title="3.启动RocketMQ："></a>3.启动RocketMQ：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 后台启动运行 mqnamesrv</span><span class="token function">nohup</span> <span class="token function">sh</span> bin/mqnamesrv <span class="token operator">></span> /iubbo/rocketMQ/logs/mqnamesrv.out <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span class="token comment"># 检查启动</span><span class="token function">tail</span> mqnamesrv.out<span class="token comment"># 或</span>jps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动broker</span><span class="token comment"># 默认会读取 /conf 目录下的 broker.conf 配置文件</span><span class="token function">less</span> broker.conf<span class="token comment"># 修改：</span><span class="token assign-left variable">autoCreateTopicEnable</span><span class="token operator">=</span>true<span class="token comment">#aclEnale=true</span><span class="token comment"># 启动：</span><span class="token function">nohup</span> bin/mqbroker <span class="token parameter variable">-c</span> conf/broker.conf <span class="token operator">></span> /iubbo/rocketMQ/logs/mqbroker.out <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span class="token comment"># 检查启动</span><span class="token function">tail</span> nohup.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-命令快速验证"><a href="#4-命令快速验证" class="headerlink" title="4.命令快速验证"></a>4.命令快速验证</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动生产者</span><span class="token comment"># 向环境变量配置的端口发送1000条消息</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">NAMESRV_ADDR</span><span class="token operator">=</span>localhost:9876bin/tools.sh org.apache.rocketmq.example.quickstart.Producer<span class="token comment"># 启动消费者</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">NAMESRV_ADDR</span><span class="token operator">=</span>localhost:9876bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-RocketMQ-图形化（-社区扩展项目）"><a href="#5-RocketMQ-图形化（-社区扩展项目）" class="headerlink" title="5.RocketMQ 图形化（ 社区扩展项目）"></a>5.RocketMQ 图形化（ 社区扩展项目）</h3><p>GitHub:      rocket-externals   rocketmq-console</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> target/rocketmq-console-ng-2.0.0.jar <span class="token parameter variable">--server.port</span><span class="token operator">=</span><span class="token number">6566</span> <span class="token parameter variable">--rocketmq.config.namesrvAddr</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1:9876<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="六、RocketMQ集群搭建"><a href="#六、RocketMQ集群搭建" class="headerlink" title="六、RocketMQ集群搭建"></a>六、RocketMQ集群搭建</h2><h2 id="1-集群特点"><a href="#1-集群特点" class="headerlink" title="1.集群特点"></a>1.集群特点</h2><ul><li><input disabled="" type="checkbox"> NameServer ：是无状态的，brocker会给每个NameServer上报消息；</li><li><input disabled="" type="checkbox"> Producer ：相互之间是没有数据同步的，Consumer同；随机选取一个NameServer建立长链接，定期从NameServer获取Topic路由的信息。同时定时向NameServer发送心跳检测。</li><li><input disabled="" type="checkbox"> Broker ：主从集群，Master为主，Slave为从；Master与Slave的对应关系通过指定相同的BrokerName，不同的BrokerId来定义，BrokerId为0表示为master,<br>非0表示为Slave。Master也可部署多个。每个Broker与BrokerName集群中的所有节点建立长链接，定时注册Topic信息到所有的NameServer.</li></ul><h2 id="2-集群模式"><a href="#2-集群模式" class="headerlink" title="2.集群模式"></a>2.集群模式</h2><ul><li><input disabled="" type="checkbox"> 单Master模式</li><li><input disabled="" type="checkbox"> 多Master模式</li><li><input disabled="" type="checkbox"> 多Master多Slave（异步）</li><li><input disabled="" type="checkbox"> 多Master多Slave（同步，先同步Slave，再相应Producer）</li></ul><h3 id="a-集群机构图-两主两从-："><a href="#a-集群机构图-两主两从-：" class="headerlink" title="a.集群机构图(两主两从)："></a>a.集群机构图(两主两从)：</h3><p><img src="/anubis-blogs/markdownimages/RocketMQ/1645624596233.png" alt="1645624596233"></p><h3 id="b-集群工作流程"><a href="#b-集群工作流程" class="headerlink" title="b.集群工作流程"></a>b.集群工作流程</h3><p><img src="/anubis-blogs/markdownimages/RocketMQ/1645624693294.png" alt="1645624693294"></p><h3 id="c-集群管理工具：mqadmin"><a href="#c-集群管理工具：mqadmin" class="headerlink" title="c.集群管理工具：mqadmin"></a>c.集群管理工具：mqadmin</h3><h2 id="七、RocketMQ角色介绍"><a href="#七、RocketMQ角色介绍" class="headerlink" title="七、RocketMQ角色介绍"></a>七、RocketMQ角色介绍</h2><ul><li>producer：消息发送者；</li><li>consumer：消息接受者；</li><li>broker：暂存和传输消息；</li><li>NameServer：管理Broker；</li><li>Topic：区分消息的种类；</li><li>Message Queue：相当于是Topic的分区，用于并行发送和接收消息；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot</title>
      <link href="/anubis-blogs/2024/01/24/Spring%20Boot/"/>
      <url>/anubis-blogs/2024/01/24/Spring%20Boot/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1>]]></content>
      
      
      <categories>
          
          <category> Java 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/anubis-blogs/2024/01/24/Spring/"/>
      <url>/anubis-blogs/2024/01/24/Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1>]]></content>
      
      
      <categories>
          
          <category> Java 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Svn 常用命令</title>
      <link href="/anubis-blogs/2024/01/24/Svn/"/>
      <url>/anubis-blogs/2024/01/24/Svn/</url>
      
        <content type="html"><![CDATA[<h1 id="Svn"><a href="#Svn" class="headerlink" title="Svn"></a>Svn</h1><h2 id="1-Mac-Svn-安装-配置环境"><a href="#1-Mac-Svn-安装-配置环境" class="headerlink" title="1.Mac Svn 安装 配置环境"></a>1.Mac Svn 安装 配置环境</h2><h3 id="（1）-Brew安装"><a href="#（1）-Brew安装" class="headerlink" title="（1） Brew安装"></a>（1） Brew安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（2）环境变量配置"><a href="#（2）环境变量配置" class="headerlink" title="（2）环境变量配置"></a>（2）环境变量配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-Svn-常用命令"><a href="#2-Svn-常用命令" class="headerlink" title="2.Svn 常用命令"></a>2.Svn 常用命令</h2>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Svn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/anubis-blogs/2024/01/24/hello-world/"/>
      <url>/anubis-blogs/2024/01/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arthas</title>
      <link href="/anubis-blogs/2024/01/24/Arthas/"/>
      <url>/anubis-blogs/2024/01/24/Arthas/</url>
      
        <content type="html"><![CDATA[<h1 id="Arthas"><a href="#Arthas" class="headerlink" title="Arthas"></a>Arthas</h1><h2 id="一、Arthas简介"><a href="#一、Arthas简介" class="headerlink" title="一、Arthas简介"></a>一、Arthas简介</h2><p>Arthas 官网：<a href="https://arthas.aliyun.com/doc/install-detail.html">https://arthas.aliyun.com/doc/install-detail.html</a></p><p>Arthas-idea-plugin 插件文档：<a href="https://www.yuque.com/arthas-idea-plugin/help/pzldzl">https://www.yuque.com/arthas-idea-plugin/help/pzldzl</a></p><p>Arthas 用户案例：<a href="https://github.com/alibaba/arthas/issues?q=label:user-case">https://github.com/alibaba/arthas/issues?q=label%3Auser-case</a></p><h2 id="二、Arthas火焰图"><a href="#二、Arthas火焰图" class="headerlink" title="二、Arthas火焰图"></a>二、Arthas火焰图</h2><h3 id="1-Async-profiler"><a href="#1-Async-profiler" class="headerlink" title="1.Async-profiler"></a>1.Async-profiler</h3><p>Async-profiler 说明：<a href="https://www.yuque.com/arthas-idea-plugin/help/iisg20">https://www.yuque.com/arthas-idea-plugin/help/iisg20</a></p><h3 id="2-启动耗时火焰图"><a href="#2-启动耗时火焰图" class="headerlink" title="2.启动耗时火焰图"></a>2.启动耗时火焰图</h3><h4 id="1-在Idea的Springboot启动主类-VM-Options-上添加如下代码："><a href="#1-在Idea的Springboot启动主类-VM-Options-上添加如下代码：" class="headerlink" title="(1)在Idea的Springboot启动主类 VM Options 上添加如下代码："></a>(1)在Idea的Springboot启动主类 VM Options 上添加如下代码：</h4><p>在应用启动的JVM参数中，添加debugger参数，注意其中的suspend参数需要设为y，表示在debugger连接之前，程序会进行阻塞等待。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-agentlib:jdwp</span><span class="token operator">=</span>transport<span class="token operator">=</span>dt_socket,server<span class="token operator">=</span>y,suspend<span class="token operator">=</span>y,address<span class="token operator">=</span><span class="token number">10000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-新建一个shell窗口启动Arthas"><a href="#2-新建一个shell窗口启动Arthas" class="headerlink" title="(2)新建一个shell窗口启动Arthas"></a>(2)新建一个shell窗口启动Arthas</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">anubis:arthas-packaging-3.7.1-bin/ $ ./as.sh                                                            <span class="token punctuation">[</span><span class="token number">10</span>:05:06<span class="token punctuation">]</span>Arthas script version: <span class="token number">3.7</span>.1<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> JAVA_HOME: /Library/Java/JavaVirtualMachines/jdk-1.8.jdk/Contents/HomeFound existing <span class="token function">java</span> process, please choose one and input the serial number of the process, eg <span class="token builtin class-name">:</span> <span class="token number">1</span>. Then hit ENTER.* <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: <span class="token number">43488</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: <span class="token number">14570</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>: <span class="token number">44779</span> org.jetbrains.jps.cmdline.Launcher  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>: <span class="token number">44780</span> -- main class information unavailable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择第四个，启动profiler，由于我们需要分析启动过程的耗时阶段，所以我们需要指定跟踪采集的事件为wall</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">profiler <span class="token parameter variable">-e</span> wall start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-新建一个shell窗口触发程序启动，"><a href="#3-新建一个shell窗口触发程序启动，" class="headerlink" title="(3)新建一个shell窗口触发程序启动，"></a>(3)新建一个shell窗口触发程序启动，</h4><p>利用jdb(jdk自带的debugger工具)连接对应的JVM进程，将此应用run起来。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jdb <span class="token parameter variable">-attach</span> localhost:10000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>连接完成后，执行cont命令，让程序运行起来</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cont<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-程序启动完成后在Arthas的Shell窗口内输入"><a href="#4-程序启动完成后在Arthas的Shell窗口内输入" class="headerlink" title="(4)程序启动完成后在Arthas的Shell窗口内输入"></a>(4)程序启动完成后在Arthas的Shell窗口内输入</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">profiler stop <span class="token parameter variable">--file</span> /Users/anubis/Downloads/software/arthas-packaging-3.7.1-bin/rcs_start_server.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><input disabled="" type="checkbox"> 相关文章：<a href="https://zhuanlan.zhihu.com/p/612238709?utm_id=0">云音乐服务端应用启动时间下降40%实践分享</a></li></ul><h2 id="todo-待补充👇"><a href="#todo-待补充👇" class="headerlink" title="todo: 待补充👇"></a>todo: 待补充👇</h2><h2 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h2><h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><h2 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h2><h2 id="TimeTunnel-Tt"><a href="#TimeTunnel-Tt" class="headerlink" title="TimeTunnel (Tt)"></a>TimeTunnel (Tt)</h2>]]></content>
      
      
      <categories>
          
          <category> Arthas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arthas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bat 脚本</title>
      <link href="/anubis-blogs/2024/01/24/Bat%20%E8%84%9A%E6%9C%AC/"/>
      <url>/anubis-blogs/2024/01/24/Bat%20%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="Bat脚本"><a href="#Bat脚本" class="headerlink" title="Bat脚本"></a>Bat脚本</h1><h2 id="1-常用语法"><a href="#1-常用语法" class="headerlink" title="1.常用语法"></a>1.常用语法</h2><h3 id="（1）-接受运行参数"><a href="#（1）-接受运行参数" class="headerlink" title="（1）.接受运行参数"></a>（1）.接受运行参数</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">@<span class="token function">echo</span> offsetlocalTITLE 脚本窗口名称<span class="token function">echo</span> 设置窗口字体颜色COLOR A<span class="token function">set</span> <span class="token operator">/</span>p <span class="token keyword">var</span>=接受参数：<span class="token function">echo</span> 打印接收参数<span class="token operator">%</span><span class="token keyword">var</span><span class="token operator">%</span><span class="token function">echo</span> 调用外部脚本python G:<span class="token operator">/</span>demo<span class="token punctuation">.</span>py <span class="token operator">%</span><span class="token keyword">var</span><span class="token operator">%</span> <span class="token function">echo</span> 执行完毕<span class="token punctuation">,</span>任意键退出PAUSE >nul<span class="token keyword">EXIT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）-以管理员身份运行"><a href="#（2）-以管理员身份运行" class="headerlink" title="（2）.以管理员身份运行"></a>（2）.以管理员身份运行</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">echo</span> 以管理员身份运行<span class="token function">PUSHD</span> <span class="token operator">%</span>~DP0 &amp; cd <span class="token operator">/</span>d <span class="token string">"%~dp0"</span><span class="token operator">%</span>1 <span class="token operator">%</span>2mshta vbscript:createobject<span class="token punctuation">(</span><span class="token string">"shell.application"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shellexecute<span class="token punctuation">(</span><span class="token string">"%~s0"</span><span class="token punctuation">,</span><span class="token string">"goto :runas"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"runas"</span><span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>close<span class="token punctuation">)</span>&amp;goto :eof:runas<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（3）-关闭进程"><a href="#（3）-关闭进程" class="headerlink" title="（3）.关闭进程"></a>（3）.关闭进程</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">echo</span> 关闭Redis服务端与客户端taskkill <span class="token operator">/</span>im  redis-server<span class="token punctuation">.</span>exe <span class="token operator">/</span>f<span class="token function">echo</span> 关闭6379端口<span class="token function">set</span> port=6379<span class="token keyword">for</span> <span class="token operator">/</span>f <span class="token string">"tokens=1-5"</span> <span class="token operator">%</span><span class="token operator">%</span>i in <span class="token punctuation">(</span><span class="token string">'netstat -ano^|findstr ":%port2%"'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> taskkill <span class="token operator">/</span>pid <span class="token operator">%</span><span class="token operator">%</span>m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（4）-启动exe"><a href="#（4）-启动exe" class="headerlink" title="（4）.启动exe"></a>（4）.启动exe</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">echo</span> 启动指定目录exe程序<span class="token function">echo</span>  名称           切换盘符       进入具体目录指定exe文件              并执行命令<span class="token function">start</span> <span class="token string">"Redis服务端"</span> <span class="token operator">/</span>d G:\ cmd <span class="token operator">/</span>k <span class="token string">"cd software\Redis-x64-3.0.504&amp;&amp;redis-server.exe redis.windows.conf"</span><span class="token function">echo</span> 打开网页cd <span class="token operator">/</span>d C:\Google\Chrome\Application<span class="token function">start</span> chrome<span class="token punctuation">.</span>exe  https:<span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（5）-nircmd"><a href="#（5）-nircmd" class="headerlink" title="（5）.nircmd"></a>（5）.nircmd</h3><ul><li><input disabled="" type="checkbox"> setlocal和endlocal：setlocal和endlocal命令执行结果是让中间的程序对于系统变量的改变只在程序内起作用，不会影响整个系统级别。</li><li><input disabled="" type="checkbox"> nircmd：<a href="https://www.nirsoft.net/utils/nircmd.html">官网</a> （官网最下方选择何时版本下载）</li></ul><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">@<span class="token function">echo</span> offchcp 65001<span class="token function">set</span> desktop=C:\Users\anubis\Desktop<span class="token function">set</span> NIRCMD_PATH=<span class="token string">"C:\Windows\nircmd.exe"</span><span class="token function">echo</span> <span class="token punctuation">[</span>1<span class="token punctuation">]</span> 开始聚焦 aTrust 窗口<span class="token operator">%</span>NIRCMD_PATH% win activate title <span class="token string">"窗口名称"</span>timeout <span class="token operator">/</span>t 2 >nul<span class="token function">echo</span> <span class="token punctuation">[</span>2<span class="token punctuation">]</span> 移动鼠标<span class="token operator">%</span>NIRCMD_PATH% setcursorwin 100 50<span class="token function">echo</span> <span class="token punctuation">[</span>3<span class="token punctuation">]</span> Tab 定位到密码输入框<span class="token operator">%</span>NIRCMD_PATH% sendkey 0x9 press<span class="token operator">%</span>NIRCMD_PATH% sendkey 0x9 press<span class="token function">echo</span> <span class="token punctuation">[</span>4<span class="token punctuation">]</span> 设置剪贴板 <span class="token operator">-</span>> password<span class="token operator">%</span>NIRCMD_PATH% clipboard <span class="token function">set</span> <span class="token string">"password"</span><span class="token function">echo</span> <span class="token punctuation">[</span>5<span class="token punctuation">]</span> 粘贴<span class="token operator">%</span>NIRCMD_PATH% sendkey ctrl down<span class="token operator">%</span>NIRCMD_PATH% sendkey v down<span class="token operator">%</span>NIRCMD_PATH% sendkey ctrl up<span class="token operator">%</span>NIRCMD_PATH% sendkey v up<span class="token function">echo</span> <span class="token punctuation">[</span>5<span class="token punctuation">]</span> 聚焦程序窗口<span class="token operator">%</span>NIRCMD_PATH% win activate title <span class="token string">"窗口名称"</span>timeout <span class="token operator">/</span>t 2 >nul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">@<span class="token function">echo</span> offchcp 65001setlocal enabledelayedexpansion<span class="token function">set</span> desktop=C:\Users\anubis\Desktop<span class="token function">set</span> NIRCMD_PATH=<span class="token string">"C:\Windows\nircmd.exe"</span><span class="token function">echo</span> <span class="token punctuation">[</span>0<span class="token punctuation">]</span> 启动指定目录exe，并等待启动cd <span class="token operator">/</span>d <span class="token string">"C:\Program Files (x86)\Sangfor\"</span><span class="token function">start</span> <span class="token string">""</span> <span class="token string">"text.exe"</span>timeout <span class="token operator">/</span>t 3 >nul<span class="token function">echo</span> <span class="token punctuation">[</span>1<span class="token punctuation">]</span> 递归循环检测窗口:LOOP:: 检测窗口是否存在<span class="token function">set</span> <span class="token string">"windowTitle=窗口名称"</span><span class="token function">set</span> <span class="token string">"windowFound=false"</span><span class="token keyword">for</span> <span class="token operator">/</span>f <span class="token string">"tokens=*"</span> <span class="token operator">%</span><span class="token operator">%</span>a in <span class="token punctuation">(</span><span class="token string">'tasklist /v ^| findstr /i "%windowTitle%"'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>    <span class="token function">set</span> <span class="token string">"windowFound=true"</span><span class="token punctuation">)</span>:: 如果窗口存在，则继续执行<span class="token keyword">if</span> <span class="token operator">!</span>windowFound! equ true <span class="token punctuation">(</span>    <span class="token function">echo</span> <span class="token punctuation">[</span>3<span class="token punctuation">]</span> aTrust 窗口存在    goto <span class="token keyword">CONTINUE</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">(</span>    <span class="token function">echo</span> <span class="token punctuation">[</span>2<span class="token punctuation">]</span> aTrust 窗口不存在等待中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    timeout <span class="token operator">/</span>t 3 >nul    goto LOOP<span class="token punctuation">)</span>:<span class="token keyword">CONTINUE</span><span class="token function">echo</span> <span class="token punctuation">[</span>4<span class="token punctuation">]</span> 开始聚焦窗口<span class="token operator">%</span>NIRCMD_PATH% win activate title <span class="token string">"窗口名称"</span>timeout <span class="token operator">/</span>t 2 >nul<span class="token function">echo</span> <span class="token punctuation">[</span>5<span class="token punctuation">]</span> 移动鼠标<span class="token operator">%</span>NIRCMD_PATH% setcursorwin 100 50<span class="token function">echo</span> <span class="token punctuation">[</span>6<span class="token punctuation">]</span> Tab 定位到密码输入框<span class="token operator">%</span>NIRCMD_PATH% sendkey 0x9 press<span class="token operator">%</span>NIRCMD_PATH% sendkey 0x9 press<span class="token function">echo</span> <span class="token punctuation">[</span>7<span class="token punctuation">]</span> 设置剪贴板 <span class="token operator">-</span>> password<span class="token operator">%</span>NIRCMD_PATH% clipboard <span class="token function">set</span> <span class="token string">"password"</span><span class="token function">echo</span> <span class="token punctuation">[</span>8<span class="token punctuation">]</span> 粘贴 <span class="token operator">-</span>> password<span class="token operator">%</span>NIRCMD_PATH% sendkey ctrl down<span class="token operator">%</span>NIRCMD_PATH% sendkey v down<span class="token operator">%</span>NIRCMD_PATH% sendkey ctrl up<span class="token operator">%</span>NIRCMD_PATH% sendkey v up<span class="token function">echo</span> <span class="token punctuation">[</span>9<span class="token punctuation">]</span> Tab 定位到确定按钮并点击<span class="token operator">%</span>NIRCMD_PATH% sendkey 0x9 press<span class="token operator">%</span>NIRCMD_PATH% sendkey 0x9 press<span class="token function">echo</span> <span class="token punctuation">[</span>8<span class="token punctuation">]</span> 点击 enter 键<span class="token operator">%</span>NIRCMD_PATH% sendkey enter press:: 结束脚本endlocal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> win脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DissionPage</title>
      <link href="/anubis-blogs/2024/01/24/DissionPage/"/>
      <url>/anubis-blogs/2024/01/24/DissionPage/</url>
      
        <content type="html"><![CDATA[<h1 id="DissionPage"><a href="#DissionPage" class="headerlink" title="DissionPage"></a>DissionPage</h1><h2 id="一、官网文档"><a href="#一、官网文档" class="headerlink" title="一、官网文档"></a>一、官网文档</h2><p><a href="https://github.com/g1879/DrissionPage">DrissionPage GitHub 仓库地址</a><br><a href="https://g1879.gitee.io/drissionpagedocs/usage_introduction/">DrissionPage 官网文档</a></p><h2 id="二、下载安装"><a href="#二、下载安装" class="headerlink" title="二、下载安装"></a>二、下载安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span>pip <span class="token function">install</span> DrissionPage<span class="token comment"># 升级最新版</span>pip <span class="token function">install</span> DrissionPage <span class="token parameter variable">--upgrade</span><span class="token comment"># 升级指定版本升级</span>pip <span class="token function">install</span> <span class="token assign-left variable">DrissionPage</span><span class="token operator">==</span><span class="token number">4.0</span>.0b17<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><input disabled="" type="checkbox"> DrissionPage 是一个基于 python 的网页自动化工具。</li><li><input disabled="" type="checkbox"> 支持系统：Windows、Linux、Mac</li><li><input disabled="" type="checkbox"> python版本：3.6及以上</li><li><input disabled="" type="checkbox"> 支持浏览器：Chromium内核浏览器(如Chrome和Edge)，电子应用</li></ul><h2 id="三、例子"><a href="#三、例子" class="headerlink" title="三、例子"></a>三、例子</h2><h3 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 考试题库数据表 </span><span class="token comment">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> a_secure_example_detail<span class="token punctuation">(</span>    detail_id   <span class="token keyword">bigint</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">'详情ID'</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    info_id     <span class="token keyword">bigint</span>        <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'信息ID'</span><span class="token punctuation">,</span>    <span class="token keyword">type</span>        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'题目类型'</span><span class="token punctuation">,</span>    tag         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'题目标签'</span><span class="token punctuation">,</span>    answer      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'答案'</span><span class="token punctuation">,</span>    question    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'题干'</span><span class="token punctuation">,</span>    option_A    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'选项A'</span><span class="token punctuation">,</span>    option_B    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'选项B'</span><span class="token punctuation">,</span>    option_C    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'选项B'</span><span class="token punctuation">,</span>    option_D    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'选项D'</span><span class="token punctuation">,</span>    <span class="token keyword">status</span>      <span class="token keyword">smallint</span>      <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'0:正常,1:失效'</span><span class="token punctuation">,</span>    create_date <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'任务创建时间'</span><span class="token punctuation">,</span>    update_date <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'任务更新时间'</span><span class="token punctuation">)</span>    <span class="token keyword">comment</span> <span class="token string">'考试题库数据表'</span> <span class="token keyword">charset</span> <span class="token operator">=</span> utf8mb4<span class="token punctuation">;</span>    <span class="token comment">-- 安全考试答题信息表 </span><span class="token comment">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> a_secure_example_info<span class="token punctuation">(</span>    info_id     <span class="token keyword">bigint</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">'信息ID'</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    base_url    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'邀请答题url'</span><span class="token punctuation">,</span>    url         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'答题详情url'</span><span class="token punctuation">,</span>    user_name   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'答题人'</span><span class="token punctuation">,</span>    user_email  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'答题邮箱'</span><span class="token punctuation">,</span>    <span class="token keyword">status</span>      <span class="token keyword">smallint</span>      <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'0:未开始,1:进行中,2:完成'</span><span class="token punctuation">,</span>    create_date <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'任务创建时间'</span><span class="token punctuation">,</span>    update_date <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'任务更新时间'</span><span class="token punctuation">)</span>    <span class="token keyword">comment</span> <span class="token string">'安全考试答题信息表'</span> <span class="token keyword">charset</span> <span class="token operator">=</span> utf8mb4<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">from</span> DrissionPage <span class="token keyword">import</span> ChromiumPage<span class="token keyword">from</span> DrissionPage<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>constants <span class="token keyword">import</span> NoneElement<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token punctuation">,</span> Column<span class="token punctuation">,</span> BigInteger<span class="token punctuation">,</span> String<span class="token punctuation">,</span> SmallInteger<span class="token punctuation">,</span> TIMESTAMP<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimeBase <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建数据库引擎</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql://root:root@127.0.0.1:3306/spider_db'</span><span class="token punctuation">,</span> echo<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 创建所有的表</span>Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token comment"># 创建一个会话</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 安全考试答题信息表</span><span class="token keyword">class</span> <span class="token class-name">SecureExampleInfo</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'a_secure_example_info'</span>    info_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>BigInteger<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    base_url <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    user_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    user_email <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    status <span class="token operator">=</span> Column<span class="token punctuation">(</span>SmallInteger<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># 0:未开始,1:进行中,2:完成</span>    create_date <span class="token operator">=</span> Column<span class="token punctuation">(</span>TIMESTAMP<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    update_date <span class="token operator">=</span> Column<span class="token punctuation">(</span>TIMESTAMP<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 考试题库数据表</span><span class="token keyword">class</span> <span class="token class-name">SecureExampleDetail</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'a_secure_example_detail'</span>    detail_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>BigInteger<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    info_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>BigInteger<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token builtin">type</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    tag <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    answer <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    question <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    option_A <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    option_B <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    option_C <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    option_D <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    status <span class="token operator">=</span> Column<span class="token punctuation">(</span>SmallInteger<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># 0:正常,1:失效</span>    create_date <span class="token operator">=</span> Column<span class="token punctuation">(</span>TIMESTAMP<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    update_date <span class="token operator">=</span> Column<span class="token punctuation">(</span>TIMESTAMP<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">saveInfoUrl</span><span class="token punctuation">(</span>base_url<span class="token punctuation">,</span> url<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> user_email<span class="token punctuation">)</span><span class="token punctuation">:</span>    session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>SecureExampleInfo<span class="token punctuation">(</span>        base_url<span class="token operator">=</span>base_url<span class="token punctuation">,</span>        url<span class="token operator">=</span>url<span class="token punctuation">,</span>        user_name<span class="token operator">=</span>user_name<span class="token punctuation">,</span>        user_email<span class="token operator">=</span>user_email<span class="token punctuation">,</span>        status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>        create_date<span class="token operator">=</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        update_date<span class="token operator">=</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span>    session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">saveQuestion</span><span class="token punctuation">(</span>details_to_insert<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 添加对象到会话</span>    session<span class="token punctuation">.</span>add_all<span class="token punctuation">(</span>details_to_insert<span class="token punctuation">)</span>    <span class="token comment"># 增，删，改需要提交会话 查询不需要</span>    session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">queryToDoTaskInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>SecureExampleInfo<span class="token punctuation">)</span><span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">updateQuestionTaskInfo</span><span class="token punctuation">(</span>info_id<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">:</span>    session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>SecureExampleInfo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>SecureExampleInfo<span class="token punctuation">.</span>info_id <span class="token operator">==</span> info_id<span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">"status"</span><span class="token punctuation">:</span> status<span class="token punctuation">,</span>        <span class="token string">"update_date"</span><span class="token punctuation">:</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getAnswer</span><span class="token punctuation">(</span>detail_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>SecureExampleDetail<span class="token punctuation">)</span><span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>detail_id<span class="token operator">=</span>detail_id<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getQuestion</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">,</span> question<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>SecureExampleDetail<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>        SecureExampleDetail<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> <span class="token builtin">type</span><span class="token punctuation">,</span>        SecureExampleDetail<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span>        SecureExampleDetail<span class="token punctuation">.</span>question <span class="token operator">==</span> question    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> base_url<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> user_email<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span>    tab <span class="token operator">=</span> page<span class="token punctuation">.</span>new_tab<span class="token punctuation">(</span>base_url<span class="token punctuation">)</span>    <span class="token comment"># 定位我知道了按钮</span>    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">'#btn-introduction'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 输入姓名邮箱</span>    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">'xpath://input[@placeholder="请输入姓名"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">input</span><span class="token punctuation">(</span>user_name<span class="token punctuation">)</span>    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">'xpath://input[@placeholder="请输入邮箱"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">input</span><span class="token punctuation">(</span>user_email<span class="token punctuation">)</span>    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">'#login'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 点击重新作答</span>    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">'xpath://div[@class="exam-end-btn"]/a[1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 定位我知道了按钮</span>    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">'#btn-introduction'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">'#toExam'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 立即交卷获取题库</span>        saveNowInfoUrl<span class="token punctuation">(</span>tab<span class="token punctuation">,</span> base_url<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> user_email<span class="token punctuation">)</span>        login<span class="token punctuation">(</span>page<span class="token punctuation">,</span> base_url<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> user_email<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">-</span>count<span class="token punctuation">)</span>    <span class="token keyword">elif</span> count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 递归立即交卷结束</span>        <span class="token keyword">return</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 登陆后自动答题</span>        automateAnswer<span class="token punctuation">(</span>tab<span class="token punctuation">)</span>        saveNowInfoUrl<span class="token punctuation">(</span>page<span class="token punctuation">,</span> base_url<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> user_email<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token keyword">def</span> <span class="token function">saveNowInfoUrl</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> base_url<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> user_email<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 交卷</span>    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">'xpath://div[@class="question-panels"]/div/div[2]/button[1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 查看题目详情</span>    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">'xpath://div[@class="modal"]/div/div/div[@class="modal-footer"]/button[2]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 保存题目详情信息url</span>    saveInfoUrl<span class="token punctuation">(</span>base_url<span class="token punctuation">,</span> tab<span class="token punctuation">.</span>url<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> user_email<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">saveDetailUrl</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> url<span class="token punctuation">,</span> info_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"========> 开始执行 info_id："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>info_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    updateQuestionTaskInfo<span class="token punctuation">(</span>info_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># 创建页面对象，并启动或接管浏览器</span>    tab <span class="token operator">=</span> page<span class="token punctuation">.</span>new_tab<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    x <span class="token operator">=</span> <span class="token string">'xpath:'</span>    q_xpath <span class="token operator">=</span> <span class="token string">'//div[@id="report-answer"]/div[@class="question" or @class="question "]'</span>    size <span class="token operator">=</span> tab<span class="token punctuation">.</span>eles<span class="token punctuation">(</span>x <span class="token operator">+</span> q_xpath<span class="token punctuation">)</span><span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span>    details_to_insert <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># print(index)</span>        option_C <span class="token operator">=</span> <span class="token string">''</span>        option_D <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">if</span> index <span class="token operator">&lt;=</span> <span class="token number">40</span><span class="token punctuation">:</span>            q_c <span class="token operator">=</span> tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span>x <span class="token operator">+</span> q_xpath <span class="token operator">+</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']/ul/li[3]'</span><span class="token punctuation">)</span>            q_d <span class="token operator">=</span> tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span>x <span class="token operator">+</span> q_xpath <span class="token operator">+</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']/ul/li[4]'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>q_c<span class="token punctuation">,</span> NoneElement<span class="token punctuation">)</span><span class="token punctuation">:</span>                option_C <span class="token operator">=</span> q_c<span class="token punctuation">.</span>text            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>q_d<span class="token punctuation">,</span> NoneElement<span class="token punctuation">)</span><span class="token punctuation">:</span>                option_D <span class="token operator">=</span> q_d<span class="token punctuation">.</span>text        details_to_insert<span class="token punctuation">.</span>append<span class="token punctuation">(</span>            SecureExampleDetail<span class="token punctuation">(</span>                info_id<span class="token operator">=</span>info_id<span class="token punctuation">,</span>                <span class="token builtin">type</span><span class="token operator">=</span>tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span>                    x <span class="token operator">+</span> q_xpath <span class="token operator">+</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']/div[1]/span[1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>                tag<span class="token operator">=</span>tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span>                    x <span class="token operator">+</span> q_xpath <span class="token operator">+</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']/div[1]/span[2]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>                answer<span class="token operator">=</span>tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span>                    x <span class="token operator">+</span> q_xpath <span class="token operator">+</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']/div[4]/pre'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>                question<span class="token operator">=</span>tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span>x <span class="token operator">+</span> q_xpath <span class="token operator">+</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                    index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']/div[2]/pre'</span> <span class="token operator">+</span> <span class="token string">' | '</span> <span class="token operator">+</span> q_xpath <span class="token operator">+</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                    index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']/div[2]/p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>                option_A<span class="token operator">=</span>tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span>                    x <span class="token operator">+</span> q_xpath <span class="token operator">+</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']/ul/li[1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>                option_B<span class="token operator">=</span>tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span>                    x <span class="token operator">+</span> q_xpath <span class="token operator">+</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']/ul/li[2]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>                option_C<span class="token operator">=</span>option_C<span class="token punctuation">,</span>                option_D<span class="token operator">=</span>option_D<span class="token punctuation">,</span>                status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>                create_date<span class="token operator">=</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                update_date<span class="token operator">=</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"========> info_id："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>info_id<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 页面解析完成开始入库，入库条数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>details_to_insert<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    saveQuestion<span class="token punctuation">(</span>details_to_insert<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"========> info_id："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>info_id<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 入库完成"</span><span class="token punctuation">)</span>    updateQuestionTaskInfo<span class="token punctuation">(</span>info_id<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># TODO 补全 Xpath</span><span class="token keyword">def</span> <span class="token function">automateAnswer</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"========> 开始自动答题"</span><span class="token punctuation">)</span>    e_question <span class="token operator">=</span> tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment"># 获取答题页面题干</span>    e_type <span class="token operator">=</span> tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment"># 获取答题页面类型</span>    e_A <span class="token operator">=</span> tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment"># 获取答题页面选项</span>    e_B <span class="token operator">=</span> tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    e_C <span class="token operator">=</span> <span class="token string">''</span>    e_D <span class="token operator">=</span> <span class="token string">''</span>    selectIndex <span class="token operator">=</span> <span class="token number">0</span>    selectIndexs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> e_type <span class="token operator">==</span> <span class="token string">'[ 判断题 ]'</span><span class="token punctuation">:</span>        e_C <span class="token operator">=</span> tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        e_D <span class="token operator">=</span> tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    questionList <span class="token operator">=</span> getQuestion<span class="token punctuation">(</span>e_type<span class="token punctuation">,</span> e_question<span class="token punctuation">)</span>    <span class="token keyword">if</span> questionList<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment"># 可以查到</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> questionList<span class="token punctuation">:</span>            <span class="token keyword">if</span> e_type <span class="token operator">==</span> <span class="token string">'[ 判断题 ]'</span><span class="token punctuation">:</span>                txt <span class="token operator">=</span> <span class="token string">''</span>                <span class="token keyword">if</span> k<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'A'</span><span class="token punctuation">:</span>                    txt <span class="token operator">=</span> k<span class="token punctuation">.</span>option_A                <span class="token keyword">if</span> k<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">:</span>                    txt <span class="token operator">=</span> k<span class="token punctuation">.</span>option_B                <span class="token keyword">if</span> txt <span class="token operator">==</span> e_A<span class="token punctuation">:</span>                    selectIndex <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    selectIndex <span class="token operator">=</span> <span class="token number">2</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                temp <span class="token operator">=</span> <span class="token punctuation">[</span>k<span class="token punctuation">.</span>option_A<span class="token punctuation">,</span>k<span class="token punctuation">.</span>option_B<span class="token punctuation">,</span>k<span class="token punctuation">.</span>option_C<span class="token punctuation">,</span>k<span class="token punctuation">.</span>option_D<span class="token punctuation">]</span>                <span class="token keyword">if</span> e_A <span class="token keyword">in</span> temp <span class="token keyword">and</span> e_B <span class="token keyword">in</span> temp <span class="token keyword">and</span> e_C <span class="token keyword">in</span> temp <span class="token keyword">and</span> e_D <span class="token keyword">in</span> temp<span class="token punctuation">:</span>                    <span class="token keyword">if</span> e_type <span class="token operator">==</span> <span class="token string">'[ 单选题 ]'</span><span class="token punctuation">:</span>                        txt <span class="token operator">=</span> <span class="token string">''</span>                        <span class="token keyword">if</span> k<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'A'</span><span class="token punctuation">:</span> txt <span class="token operator">=</span> k<span class="token punctuation">.</span>option_A                        <span class="token keyword">if</span> k<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">:</span> txt <span class="token operator">=</span> k<span class="token punctuation">.</span>option_B                        <span class="token keyword">if</span> k<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">:</span> txt <span class="token operator">=</span> k<span class="token punctuation">.</span>option_C                        <span class="token keyword">if</span> k<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'D'</span><span class="token punctuation">:</span> txt <span class="token operator">=</span> k<span class="token punctuation">.</span>option_D                        <span class="token keyword">if</span> txt <span class="token operator">==</span> e_A<span class="token punctuation">:</span> selectIndex <span class="token operator">=</span> <span class="token number">1</span>                        <span class="token keyword">if</span> txt <span class="token operator">==</span> e_B<span class="token punctuation">:</span> selectIndex <span class="token operator">=</span> <span class="token number">2</span>                        <span class="token keyword">if</span> txt <span class="token operator">==</span> e_C<span class="token punctuation">:</span> selectIndex <span class="token operator">=</span> <span class="token number">3</span>                        <span class="token keyword">if</span> txt <span class="token operator">==</span> e_D<span class="token punctuation">:</span> selectIndex <span class="token operator">=</span> <span class="token number">4</span>                    <span class="token keyword">elif</span> e_type <span class="token operator">==</span> <span class="token string">'[ 多选题 ]'</span><span class="token punctuation">:</span>                        value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                        kas <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>answer<span class="token punctuation">)</span>                        <span class="token keyword">for</span> ka <span class="token keyword">in</span> kas<span class="token punctuation">:</span>                            <span class="token keyword">if</span> ka<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'A'</span><span class="token punctuation">:</span> value<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">.</span>option_A<span class="token punctuation">)</span>                            <span class="token keyword">if</span> ka<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">:</span> value<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">.</span>option_B<span class="token punctuation">)</span>                            <span class="token keyword">if</span> ka<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">:</span> value<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">.</span>option_C<span class="token punctuation">)</span>                            <span class="token keyword">if</span> ka<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'D'</span><span class="token punctuation">:</span> value<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">.</span>option_D<span class="token punctuation">)</span>                        <span class="token keyword">if</span> e_A <span class="token keyword">in</span> value<span class="token punctuation">:</span> selectIndexs<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> e_B <span class="token keyword">in</span> value<span class="token punctuation">:</span> selectIndexs<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> e_C <span class="token keyword">in</span> value<span class="token punctuation">:</span> selectIndexs<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> e_D <span class="token keyword">in</span> value<span class="token punctuation">:</span> selectIndexs<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment"># 空着下一题</span>                    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 选择选项 selectIndex,selectIndexs</span>        <span class="token keyword">if</span> e_type <span class="token operator">==</span> <span class="token string">'[ 多选题 ]'</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> index <span class="token keyword">in</span> selectIndexs<span class="token punctuation">:</span>                tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://["</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://["</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>selectIndex<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        index <span class="token operator">=</span> tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment"># 下一题</span>        <span class="token keyword">if</span> index <span class="token operator">!=</span> <span class="token number">50</span><span class="token punctuation">:</span>            tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment"># 查不到</span>        tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    base_url <span class="token operator">=</span> <span class="token string">'https://XXXX'</span>    user_name <span class="token operator">=</span> <span class="token string">'XX'</span>    user_email <span class="token operator">=</span> <span class="token string">'XXX@XXX.com'</span>    page <span class="token operator">=</span> ChromiumPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    page<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url<span class="token punctuation">)</span>    <span class="token comment"># 【1】获取 url 执行3次</span>    <span class="token comment"># login(page, base_url, user_name, user_email, 3)</span>    <span class="token comment"># 【2】执行已交卷的待入库题目</span>    secureExampleInfoList <span class="token operator">=</span> queryToDoTaskInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> secureExampleInfoList<span class="token punctuation">:</span>        <span class="token comment"># 多线程同时处理多个页面</span>        Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>saveDetailUrl<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> item<span class="token punctuation">.</span>url<span class="token punctuation">,</span> item<span class="token punctuation">.</span>info_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 【3 自动答题</span>    <span class="token comment"># login(base_url, user_name, user_email, -1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DissionPage </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo</title>
      <link href="/anubis-blogs/2024/01/24/Dubbo/"/>
      <url>/anubis-blogs/2024/01/24/Dubbo/</url>
      
        <content type="html"><![CDATA[<h1 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h1>]]></content>
      
      
      <categories>
          
          <category> Java 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Homebrew</title>
      <link href="/anubis-blogs/2024/01/24/Homebrew/"/>
      <url>/anubis-blogs/2024/01/24/Homebrew/</url>
      
        <content type="html"><![CDATA[<h1 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/bin/zsh <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-安装-卸载软件"><a href="#2-安装-卸载软件" class="headerlink" title="2.安装&#x2F;卸载软件"></a>2.安装&#x2F;卸载软件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认安装最新版</span>brew <span class="token function">install</span> <span class="token function">node</span><span class="token comment"># 安装指定版本</span>brew <span class="token function">install</span> node@14.16.8<span class="token comment"># 切换版本</span>brew switch <span class="token function">node</span> <span class="token number">16.0</span>.0<span class="token comment"># 卸载node</span>brew uninstall <span class="token function">node</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-更新软件"><a href="#3-更新软件" class="headerlink" title="3.更新软件"></a>3.更新软件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新安装过的软件(如果不加软件名，就更新所有可以更新的软件)</span>brew upgrade name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-服务相关"><a href="#4-服务相关" class="headerlink" title="4.服务相关"></a>4.服务相关</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 服务列表</span>brew services list<span class="token comment"># 启动/停止/重启 服务</span>brew services start/stop/restart serverName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-其他常用命令"><a href="#5-其他常用命令" class="headerlink" title="5.其他常用命令"></a>5.其他常用命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看brew配置</span>brew config<span class="token comment"># 查看node安装信息</span>brew info <span class="token function">node</span><span class="token comment"># 查看已安装软件</span>brew list<span class="token comment"># 查看已安装软件版本号</span>brew list <span class="token parameter variable">--versions</span><span class="token comment"># 搜索可用node相关软件</span>brew search <span class="token function">node</span><span class="token comment"># 自身更新</span>brew update brew<span class="token comment"># 清除下载的缓存</span>brew cleanup<span class="token comment"># 诊断brew，并给出修复命令</span>brew doctor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Homebrew </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Homebrew </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frp</title>
      <link href="/anubis-blogs/2024/01/24/Frp/"/>
      <url>/anubis-blogs/2024/01/24/Frp/</url>
      
        <content type="html"><![CDATA[<h1 id="Frp"><a href="#Frp" class="headerlink" title="Frp"></a>Frp</h1><h2 id="1-下载Frp"><a href="#1-下载Frp" class="headerlink" title="1.下载Frp"></a>1.下载Frp</h2><h3 id="Github-仓库下载地址："><a href="#Github-仓库下载地址：" class="headerlink" title="Github 仓库下载地址："></a>Github 仓库下载地址：</h3><p><a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><h2 id="2-服务端Frp配置"><a href="#2-服务端Frp配置" class="headerlink" title="2.服务端Frp配置"></a>2.服务端Frp配置</h2><h2 id="3-客户端Frp配置"><a href="#3-客户端Frp配置" class="headerlink" title="3.客户端Frp配置"></a>3.客户端Frp配置</h2><h2 id="4-自启动"><a href="#4-自启动" class="headerlink" title="4.自启动"></a>4.自启动</h2>]]></content>
      
      
      <categories>
          
          <category> 代理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA 常用配置</title>
      <link href="/anubis-blogs/2024/01/24/IntelliJ%20IDEA%20%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/anubis-blogs/2024/01/24/IntelliJ%20IDEA%20%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="IntelliJ-IDEA-常用配置"><a href="#IntelliJ-IDEA-常用配置" class="headerlink" title="IntelliJ IDEA 常用配置"></a>IntelliJ IDEA 常用配置</h1><h2 id="一、常用-Plugins"><a href="#一、常用-Plugins" class="headerlink" title="一、常用 Plugins"></a>一、常用 Plugins</h2><ul><li><input disabled="" type="checkbox"> Translation：翻译插件</li><li><input disabled="" type="checkbox"> arthas idea：arthas增强工具</li><li><input disabled="" type="checkbox"> CamelCase：字符串大小写转换</li><li><input disabled="" type="checkbox"> CodeGeex：AI代码生成工具</li><li><input disabled="" type="checkbox"> Maven Helper：依赖整理工具</li><li><input disabled="" type="checkbox"> LeetCode Editor：LeetCode工具</li><li><input disabled="" type="checkbox"> GenerateAllSetter：自动生成对象setter调用</li><li><input disabled="" type="checkbox"> GenerateSerialVersionUID：自动生成SerialVersionUID</li><li><input disabled="" type="checkbox"> EasyCode-MybatisCodeHelper：代码生成插件，支持自定义任意模板</li><li><input disabled="" type="checkbox"> Extra ToolWindow Colorful lcons：图标插件</li><li><input disabled="" type="checkbox"> Rainbow Brackets：括号主题插件</li><li><input disabled="" type="checkbox"> The Doki Theme：主题插件</li><li><input disabled="" type="checkbox"> Nginx Configuration：Nginx配置文件高亮插件</li><li><input disabled="" type="checkbox"> Regex Rename Files：批量正则重命名文件</li><li><input disabled="" type="checkbox"> Java Mybatis SQL Scanner：扫描 Mybatis SQL XML 文件,分析出不规范或者潜在风险的SQL</li><li><input disabled="" type="checkbox"> Alibaba Java Coding Guidelines：阿里代码规范插件</li><li><input disabled="" type="checkbox"> Smart Input：自动切换输入法</li></ul><h2 id="二、初始化配置"><a href="#二、初始化配置" class="headerlink" title="二、初始化配置"></a>二、初始化配置</h2><h3 id="1-Idea初始化配置"><a href="#1-Idea初始化配置" class="headerlink" title="1.Idea初始化配置"></a>1.Idea初始化配置</h3><h4 id="设置运行内存"><a href="#设置运行内存" class="headerlink" title="设置运行内存"></a>设置运行内存</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-XX:ReservedCodeCacheSize</span><span class="token operator">=</span>1024m<span class="token parameter variable">-Xmx4096m</span><span class="token parameter variable">-Xms1024m</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="设置Idea编译堆大小"><a href="#设置Idea编译堆大小" class="headerlink" title="设置Idea编译堆大小"></a>设置Idea编译堆大小</h4><h5 id="Build，Execution，Deployment-Compiler-heap-size-2048"><a href="#Build，Execution，Deployment-Compiler-heap-size-2048" class="headerlink" title="Build，Execution，Deployment - Compiler - heap size 2048"></a>Build，Execution，Deployment - Compiler - heap size 2048</h5><h4 id="设置文件编码"><a href="#设置文件编码" class="headerlink" title="设置文件编码"></a>设置文件编码</h4><h5 id="Editor-File-Encodings"><a href="#Editor-File-Encodings" class="headerlink" title="Editor - File Encodings"></a>Editor - File Encodings</h5><ul><li>Global Encoding：UTF-8</li><li>Project Encoding：UTF-8</li><li>Properties Files：UTF-8</li></ul><h5 id="Editor-General-Console"><a href="#Editor-General-Console" class="headerlink" title="Editor - General - Console"></a>Editor - General - Console</h5><ul><li>Default Encoding：UTF-8</li></ul><h5 id="Tools-SSH-Terminal"><a href="#Tools-SSH-Terminal" class="headerlink" title="Tools - SSH Terminal"></a>Tools - SSH Terminal</h5><ul><li>Default Encoding：UTF-8</li></ul><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><h3 id="2-Maven配置"><a href="#2-Maven配置" class="headerlink" title="2.Maven配置"></a>2.Maven配置</h3><h4 id="Maven-Runner-VM-Options"><a href="#Maven-Runner-VM-Options" class="headerlink" title="Maven - Runner - VM Options"></a>Maven - Runner - VM Options</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-DarchetypeCatalog</span><span class="token operator">=</span>internal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Maven-Runner-Importing-JDK-版本配置"><a href="#Maven-Runner-Importing-JDK-版本配置" class="headerlink" title="Maven - Runner&amp;Importing - JDK 版本配置"></a>Maven - Runner&amp;Importing - JDK 版本配置</h4><h4 id="设置Maven编译的大小：Maven-Importin-VM-options"><a href="#设置Maven编译的大小：Maven-Importin-VM-options" class="headerlink" title="设置Maven编译的大小：Maven - Importin - VM options"></a>设置Maven编译的大小：Maven - Importin - VM options</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-Xmx16g</span> 或者 <span class="token parameter variable">-Xmx32g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="设置maven多线程编译"><a href="#设置maven多线程编译" class="headerlink" title="设置maven多线程编译"></a>设置maven多线程编译</h4><p>Maven3 支持多线程编译，可以加快项目构建速度<br>Thread Count：1C ，1C的含义是1倍CPU核心数量，假设我的设备是4核处理器 就会开启四个线程编译</p><h2 id="三、常用快捷键-Mac"><a href="#三、常用快捷键-Mac" class="headerlink" title="三、常用快捷键(Mac)"></a>三、常用快捷键(Mac)</h2><ul><li><input disabled="" type="checkbox"> 列选择：<code>Shift+Command+8</code></li><li><input disabled="" type="checkbox"> 同单词列选择：<code>Control+Command+G</code></li><li><input disabled="" type="checkbox"> 格式化代码：<code>Option+Comman+L</code></li><li><input disabled="" type="checkbox"> 优化导包：<code>Control+Option+O</code></li><li><input disabled="" type="checkbox"> 项目之间的跳转：<code>Command+Alt+[ 或 Command+Alt+]</code></li><li><input disabled="" type="checkbox"> 文件之间的跳转：<code>Command+[ 或 Command+]</code></li><li><input disabled="" type="checkbox"> 重写父类方法：<code>Control + O</code></li><li><input disabled="" type="checkbox"> 实现接口方法：<code>Control + I</code></li><li><input disabled="" type="checkbox"> Generate生成代码：<code>Command+N</code></li><li><input disabled="" type="checkbox"> 自定义代码块提示：<code>Command+J</code></li><li><input disabled="" type="checkbox"> Surround With包裹生成代码：<code>Option+Command+T</code></li><li><input disabled="" type="checkbox"> 精确查找：<code>Shift+Command+F</code></li><li><input disabled="" type="checkbox"> 移动代码行：<code>Option+Shift+⬆️</code> 或 <code>Option+Shift+⬇️</code></li><li><input disabled="" type="checkbox"> 移动代码块：<code>Command+Shift+⬆️</code> 或 <code>Command+Shift+⬇️</code></li></ul><h2 id="四、IDEA-正则表达式查找和替换文本"><a href="#四、IDEA-正则表达式查找和替换文本" class="headerlink" title="四、IDEA 正则表达式查找和替换文本"></a>四、IDEA 正则表达式查找和替换文本</h2><ol><li>单击正则表达式图标以启用正则表达式</li><li>搜索诸如 之类的元字符时<code>.[&#123;()\^$|?*+</code>，您需要使用反斜杠对其进行转义<code>\</code></li><li>要替换的字段  <code>(.*?)_(.*?)</code> ,替换站位符号 <code>$1_$2</code></li><li>要保留的字符串使用”<code>()</code>“包含，站位符号 <code>$1</code></li><li>切换字符大小写﻿<pre class="line-numbers language-none"><code class="language-none">\l将字符更改为小写，直到字符串中的下一个字符。例如，Bar变成bar。\u将字符更改为大写，直到字符串中的下一个字符。例如，bar变成Bar。\L将字符更改为小写，直到文字字符串的结尾\E。例如，BAR变成bar。\U将字符更改为大写，直到文字字符串的结尾\E。例如，bar变成BAR。条件：(\w+),结果：\U$1将全部匹配单词转为大写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="五、Idea-VM-Options-常用参数配置"><a href="#五、Idea-VM-Options-常用参数配置" class="headerlink" title="五、Idea VM Options 常用参数配置"></a>五、Idea VM Options 常用参数配置</h2><ul><li><input disabled="" type="checkbox"> <code>-Dserver.port=8080</code>，设置服务端口为8080</li><li><input disabled="" type="checkbox"> <code>-Xms1024m</code>，设置JVM初始堆内存为1024m。此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。</li><li><input disabled="" type="checkbox"> <code>-Xmx1024m</code>，设置JVM最大堆内存为1024m。</li><li><input disabled="" type="checkbox"> <code>-Xss512k</code>，设置每个线程的栈大小。JDK5.0以后每个线程栈大小为1M，之前每个线程栈大小为256K。在相同物理内存下，减小这个值能生成更多的线程，当然操作系统对一个进程内的线程数还是有限制的，不能无限生成。线程栈的大小是个双刃剑，如果设置过小，可能会出现栈溢出，特别是在该线程内有递归、大的循环时出现溢出的可能性更大，如果该值设置过大，就有影响到创建栈的数量，如果是多线程的应用，就会出现内存溢出的错误。</li><li><input disabled="" type="checkbox"> <code>-Xmn341m</code>，设置年轻代大小为341m。在整个堆内存大小确定的情况下，增大年轻代将会减小年老代，反之亦然。此值关系到JVM垃圾回收，对系统性能影响较大，官方推荐配置为整个堆大小的3&#x2F;8。</li><li><input disabled="" type="checkbox"> <code>-XX:NewSize=341m</code>，设置年轻代初始值为341M。</li><li><input disabled="" type="checkbox"> <code>-XX:MaxNewSize=341m</code>，设置年轻代最大值为341M。</li><li><input disabled="" type="checkbox"> <code>-XX:PermSize=512m</code>，设置持久代初始值为512M，但在java8及之后就不支持了，改用-XX:MetaspaceSize&#x3D;512m。</li><li><input disabled="" type="checkbox"> <code>-XX:MaxPermSize=512m</code>，设置持久代最大值为512M，同样在java8及之后就不支持了，改用-XX:MaxMetaspaceSize&#x3D;512m。</li><li><input disabled="" type="checkbox"> <code>-XX:NewRatio=2</code>，设置年轻代（包括1个Eden和2个Survivor区）与年老代的比值。表示年轻代比年老代为1:2。</li><li><input disabled="" type="checkbox"> <code>-XX:SurvivorRatio=8</code>，设置年轻代中Eden区与Survivor区的比值。表示2个Survivor区（JVM堆内存年轻代中默认有2个大小相等的Survivor区）与1个Eden区的比值为1:1:8，即1个Survivor区占整个年轻代大小的1&#x2F;10。</li><li><input disabled="" type="checkbox"> <code>-XX:MaxTenuringThreshold=15</code>，具体参看JVM系列之内存分配和回收策略中对象的衰老过程。</li><li><input disabled="" type="checkbox"> <code>-XX:ReservedCodeCacheSize=240m</code>，设置代码缓存的大小，用来存储已编译方法生成的本地代码。</li><li><input disabled="" type="checkbox"> <code>-client</code>，设置JVM使用Client模式，特点是启动速度比较快，但运行时性能和内存管理效率不高，通常用于客户端应用程序或开发调试；在32位环境下直接运行Java程序默认启用该模式。</li><li><input disabled="" type="checkbox"> <code>-server</code>，设置JVM使Server模式，特点是启动速度比较慢，但运行时性能和内存管理效率很高，适用于生产环境。在具有64位能力的JDK环境下默认启用该模式。</li><li><input disabled="" type="checkbox"> <code>-verbose:gc</code>，开启gc日志</li><li><input disabled="" type="checkbox"> <code>-XX:+PrintGCDetails</code>，打印gc详情</li><li><input disabled="" type="checkbox"> <code>-XX:+PrintGCTimeStamps</code>，打印GC时间戳</li><li><input disabled="" type="checkbox"> <code>-XX:+PrintGCApplicationStoppedTime</code>，打印GC停顿时间，可以查看到GC的STW停顿时间</li><li><input disabled="" type="checkbox"> <code>-Xloggc:D:/temp/gclog/idea.gc.log</code>，将日志输出到文件</li><li><input disabled="" type="checkbox"> <code>-XX:+PrintHeapAtGC</code>，每次一次GC后，都打印堆信息</li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发IDE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IntelliJ IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/anubis-blogs/2024/01/24/JVM/"/>
      <url>/anubis-blogs/2024/01/24/JVM/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="1-设置堆内存大小和-OOM"><a href="#1-设置堆内存大小和-OOM" class="headerlink" title="1.设置堆内存大小和 OOM"></a>1.设置堆内存大小和 OOM</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span><span class="token class-name">Xms</span> 用来表示堆的起始内存，等价于 <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">InitialHeapSize</span><span class="token operator">-</span><span class="token class-name">Xmx</span> 用来表示堆的最大内存，等价于 <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">MaxHeapSize</span>    如果堆的内存大小超过 <span class="token operator">-</span><span class="token class-name">Xmx</span> 设定的最大内存， 就会抛出 <span class="token class-name">OutOfMemoryError</span> 异常。 我们通常会将 <span class="token operator">-</span><span class="token class-name">Xmx</span> 和 <span class="token operator">-</span><span class="token class-name">Xms</span> 两个参数配置为相同的值，其目的是为了能够在垃圾回收机制清理完堆区后不再需要重新分隔计算堆的大小，从而提高性能。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-新生代和老年代"><a href="#2-新生代和老年代" class="headerlink" title="2.新生代和老年代"></a>2.新生代和老年代</h2><pre class="line-numbers language-none"><code class="language-none">默认情况下新生代和老年代的比例是 1:2，可以通过 &#96;–XX:NewRatio&#96; 来配置。新生代中的 Eden:From Survivor:To Survivor 的比例是8:1:1，可以通过 &#96;-XX:SurvivorRatio&#96; 来配置。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">若在 JDK 7 中开启了 &#96;-XX:+UseAdaptiveSizePolicy&#96;，JVM 会动态调整 JVM 堆中各个区域的大小以及进入老年代的年龄。此时 &#96;–XX:NewRatio&#96; 和 &#96;-XX:SurvivorRatio&#96;  将会失效，而 JDK 8 是默认开启&#96;-XX:+UseAdaptiveSizePolicy&#96;。在 JDK 8中，不要随意关闭 &#96;-XX:+UseAdaptiveSizePolicy&#96;，除非对堆内存的划分有明确的规划，每次 GC 后都会重新计算 Eden、From Survivor、To Survivor 的大小。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算依据是<strong>GC过程</strong>中统计的<strong>GC时间</strong>、<strong>吞吐量</strong>、<strong>内存占用量</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">java <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintFlagsFinal</span> <span class="token operator">-</span>version <span class="token operator">|</span> grep <span class="token class-name">HeapSize</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">uintx ErgoHeapSizeLimit                         &#x3D; 0                                   &#123;product&#125;    uintx HeapSizePerGCThread                       &#x3D; 87241520                            &#123;product&#125;    uintx InitialHeapSize                          :&#x3D; 134217728                           &#123;product&#125;    uintx LargePageHeapSizeThreshold                &#x3D; 134217728                           &#123;product&#125;    uintx MaxHeapSize                              :&#x3D; 2147483648                          &#123;product&#125;java version &quot;1.8.0_211&quot;Java(TM) SE Runtime Environment (build 1.8.0_211-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ jmap -heap 进程号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-TLAB-空间"><a href="#3-TLAB-空间" class="headerlink" title="3. TLAB 空间"></a>3. TLAB 空间</h2><p>尽管不是所有的对象实例都能够在 TLAB 中成功分配内存，但 JVM 确实是将 TLAB 作为内存分配的首选。</p><p>在程序中，可以通过 <code>-XX:UseTLAB</code> 设置是否开启 TLAB 空间。</p><p>默认情况下，TLAB 空间的内存非常小，仅占有整个 Eden 空间的 1%，我们可以通过 <code>-XX:TLABWasteTargetPercent</code> 设置 TLAB 空间所占用 Eden 空间的百分比大小。</p><p>一旦对象在 TLAB 空间分配内存失败时，JVM 就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在 Eden 空间中分配内存。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins  + Docker + SpringBoot自动部署</title>
      <link href="/anubis-blogs/2024/01/24/Jenkines/"/>
      <url>/anubis-blogs/2024/01/24/Jenkines/</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins-Docker-SpringBoot-自动部署-CI-CD"><a href="#Jenkins-Docker-SpringBoot-自动部署-CI-CD" class="headerlink" title="Jenkins  + Docker + SpringBoot 自动部署(CI&#x2F;CD)"></a>Jenkins  + Docker + SpringBoot 自动部署(CI&#x2F;CD)</h1><blockquote><p>环境：CentOS7 + Git (Gitee)</p></blockquote><blockquote><p>实现步骤：在 Docker 安装 Jenkins，配置 Jenkins 基本信息，利用 Dockerfile 和 Shell 脚本实现项目自动拉取打包并运行。</p></blockquote><h2 id="1-一、安装-Docker"><a href="#1-一、安装-Docker" class="headerlink" title="1.一、安装 Docker"></a>1.一、安装 Docker</h2><blockquote><p>安装社区版本 Docker CE</p></blockquote><h3 id="1-1-确保-yum-包更新到最新"><a href="#1-1-确保-yum-包更新到最新" class="headerlink" title="1.1. 确保 yum 包更新到最新"></a>1.1. 确保 yum 包更新到最新</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-卸载旧版本（如果安装过旧版本的话）"><a href="#1-2-卸载旧版本（如果安装过旧版本的话）" class="headerlink" title="1.2. 卸载旧版本（如果安装过旧版本的话）"></a>1.2. 卸载旧版本（如果安装过旧版本的话）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove <span class="token function">docker</span>  docker-common docker-selinux docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-安装需要的软件包"><a href="#1-3-安装需要的软件包" class="headerlink" title="1.3. 安装需要的软件包"></a>1.3. 安装需要的软件包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-4-设置-yum-源"><a href="#1-4-设置-yum-源" class="headerlink" title="1.4. 设置 yum 源"></a>1.4. 设置 yum 源</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-5-安装-Docker"><a href="#1-5-安装-Docker" class="headerlink" title="1.5. 安装 Docker"></a>1.5. 安装 Docker</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> docker-ce  <span class="token comment">#由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0yum install &lt;自己的版本>  # 例如：sudo yum install docker-ce-17.12.0.ce</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-6-启动并设置开机启动"><a href="#1-6-启动并设置开机启动" class="headerlink" title="1.6. 启动并设置开机启动"></a>1.6. 启动并设置开机启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start dockersystemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-7-验证安装是否成功"><a href="#1-7-验证安装是否成功" class="headerlink" title="1.7. 验证安装是否成功"></a>1.7. 验证安装是否成功</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-安装-Jenkins"><a href="#2-安装-Jenkins" class="headerlink" title="2.安装 Jenkins"></a>2.安装 Jenkins</h2><blockquote><p>Jenkins 中文官网：<a href="https://www.jenkins.io/zh/">https://www.jenkins.io/zh/</a></p></blockquote><h3 id="2-1-安装-Jenkins"><a href="#2-1-安装-Jenkins" class="headerlink" title="2.1. 安装 Jenkins"></a>2.1. 安装 Jenkins</h3><ul><li><input disabled="" type="checkbox"> 注意检查 8080 是否已经占用，如果占用请修改端口。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> jenkins <span class="token parameter variable">-u</span> root <span class="token parameter variable">--rm</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8090</span>:8080 <span class="token parameter variable">-p</span> <span class="token number">50000</span>:50000 <span class="token parameter variable">-v</span> /var/jenkins_home:/var/jenkins_home <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock jenkinsci/blueocean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 限制内存大小为400m (错误) </span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> jenkins <span class="token parameter variable">-u</span> root <span class="token parameter variable">--rm</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">-m</span> 512m <span class="token parameter variable">-p</span> <span class="token number">8090</span>:8080 <span class="token parameter variable">-p</span> <span class="token number">50000</span>:50000 <span class="token parameter variable">-v</span> /var/jenkins_home:/var/jenkins_home <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock jenkinsci/blueocean<span class="token comment"># docker exec -it jenkins bash</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> jenkins <span class="token parameter variable">-u</span> root <span class="token parameter variable">--rm</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8090</span>:8080 <span class="token parameter variable">-p</span> <span class="token number">50000</span>:50000 <span class="token parameter variable">-v</span> /var/jenkins_home:/var/jenkins_home <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock jenkinsci/blueocean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><input disabled="" type="checkbox"> 如果没改端口号的话，安装完成后访问地址：<pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;&#123;部署Jenkins所在服务IP&#125;:8090<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="2-2-初始化-Jenkins"><a href="#2-2-初始化-Jenkins" class="headerlink" title="2.2. 初始化 Jenkins"></a>2.2. 初始化 Jenkins</h3><blockquote><p>详情见官网教程：<a href="https://www.jenkins.io/zh/doc">https://www.jenkins.io/zh/doc</a></p></blockquote><h4 id="2-2-1-解锁-Jenkins"><a href="#2-2-1-解锁-Jenkins" class="headerlink" title="2.2.1 解锁 Jenkins"></a>2.2.1 解锁 Jenkins</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入Jenkins容器,例如 docker exec -it jenkins bash</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token punctuation">&#123;</span>Jenkins容器名<span class="token punctuation">&#125;</span> <span class="token function">bash</span><span class="token comment"># 查看密码,复制密码到输入框里面(界面上的地址)</span><span class="token function">cat</span> /var/jenkins_home/secrets/initialAdminPassword<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-安装插件"><a href="#2-2-2-安装插件" class="headerlink" title="2.2.2 安装插件"></a>2.2.2 安装插件</h4><ul><li><input disabled="" type="checkbox"> 选择第一项：安装推荐的插件。<br><img src="/anubis-blogs/markdownimages/Jenkines/1.png" alt="安装插件"></li></ul><h4 id="2-3-创建管理员用户"><a href="#2-3-创建管理员用户" class="headerlink" title="2.3 创建管理员用户"></a>2.3 创建管理员用户</h4><ul><li><input disabled="" type="checkbox"> 此账户信息一定要牢记(admin&#x2F;文件内密码)</li></ul><h2 id="3-系统配置"><a href="#3-系统配置" class="headerlink" title="3.系统配置"></a>3.系统配置</h2><h3 id="3-1-安装需要插件"><a href="#3-1-安装需要插件" class="headerlink" title="3.1. 安装需要插件"></a>3.1. 安装需要插件</h3><ul><li><p><input disabled="" type="checkbox"> 进入【首页】–【系统管理】–【插件管理】–【可选插件】。搜索以下需要安装的插件，点击安装即可。<br><img src="/anubis-blogs/markdownimages/Jenkines/2.png" alt="安装maven"></p></li><li><p><input disabled="" type="checkbox"> 安装 Maven Integration</p></li><li><p><input disabled="" type="checkbox"> 安装 Publish Over SSH（如果不需要远程推送，不用安装）</p></li><li><p><input disabled="" type="checkbox"> 如果使用 Gitee 码云，安装插件Gitee（自带 Git 不用单独安装）</p></li></ul><h3 id="3-2-配置-Maven"><a href="#3-2-配置-Maven" class="headerlink" title="3.2. 配置 Maven*"></a>3.2. 配置 Maven*</h3><ul><li><input disabled="" type="checkbox"> 进入【首页】–【系统管理】–【全局配置】，拉到页面最下方 maven–maven 安装。<br><img src="/anubis-blogs/markdownimages/Jenkines/3.png" alt="配置maven"></li></ul><h2 id="4-创建任务"><a href="#4-创建任务" class="headerlink" title="4.创建任务"></a>4.创建任务</h2><h3 id="4-1-新建任务"><a href="#4-1-新建任务" class="headerlink" title="4.1. 新建任务"></a>4.1. 新建任务</h3><ul><li><input disabled="" type="checkbox"> 点击【新建任务】，输入任务名称，点击构建一个自由风格的软件项目。<br><img src="/anubis-blogs/markdownimages/Jenkines/4.png" alt="创建任务"></li></ul><h3 id="4-2-源码管理"><a href="#4-2-源码管理" class="headerlink" title="4.2. 源码管理"></a>4.2. 源码管理</h3><ul><li><input disabled="" type="checkbox"> 点击【源码管理】–【Git】，输入仓库地址，添加凭证，选择好凭证即可。<br><img src="/anubis-blogs/markdownimages/Jenkines/5.png" alt="获取gitee私人令牌"></li></ul><p><img src="/anubis-blogs/markdownimages/Jenkines/6.png" alt="配置gitee仓库地址"></p><p><img src="/anubis-blogs/markdownimages/Jenkines/7.png" alt="配置gitee凭证"></p><h3 id="4-3-构建触发器"><a href="#4-3-构建触发器" class="headerlink" title="4.3. 构建触发器"></a>4.3. 构建触发器</h3><ul><li><p><input disabled="" type="checkbox"> 点击【构建触发器】–【构建】–【增加构建步骤】–【调用顶层 Maven 目标】–【「填写配置」】–【保存】。<br><img src="/anubis-blogs/markdownimages/Jenkines/8.png" alt="构建触发器"></p></li><li><p><input disabled="" type="checkbox"> 此处命令只是 install，看是否能生成 jar 包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clean <span class="token function">install</span> <span class="token parameter variable">-Dmaven.test.skip</span><span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="/anubis-blogs/markdownimages/Jenkines/9.png" alt="配置maven命令"></p><h3 id="4-4-保存"><a href="#4-4-保存" class="headerlink" title="4.4. 保存"></a>4.4. 保存</h3><ul><li><input disabled="" type="checkbox"> 点击【保存】按钮即可。</li></ul><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h2><ul><li><input disabled="" type="checkbox"> 该功能测试是否能正常打包。</li></ul><h3 id="5-1-构建"><a href="#5-1-构建" class="headerlink" title="5.1. 构建"></a>5.1. 构建</h3><ul><li><input disabled="" type="checkbox"> 点击构建按钮。</li></ul><h3 id="5-2-查看日志"><a href="#5-2-查看日志" class="headerlink" title="5.2. 查看日志"></a>5.2. 查看日志</h3><ul><li><input disabled="" type="checkbox"> 点击正在构建的任务，或者点击任务名称进入详情页面，查看控制台输出。看是否能成功打成 jar 包。</li><li><input disabled="" type="checkbox"> 该处日志第一次可能下载依赖 jar 包失败，再次点击构建即可成功。<br><img src="/anubis-blogs/markdownimages/Jenkines/10.png" alt="查看日志1"></li></ul><p><img src="/anubis-blogs/markdownimages/Jenkines/11.png" alt="查看日志2"></p><p><img src="/anubis-blogs/markdownimages/Jenkines/12.png" alt="构建日志"></p><h3 id="5-3-查看项目位置"><a href="#5-3-查看项目位置" class="headerlink" title="5.3. 查看项目位置"></a>5.3. 查看项目位置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /var/jenkins_home/workspacell <span class="token comment"># 即可查看是否存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-运行项目"><a href="#6-运行项目" class="headerlink" title="6.运行项目"></a>6.运行项目</h2><ul><li><input disabled="" type="checkbox"> 因为项目和 Jenkins 在同一台服务器，所以我们用 Shell 脚本运行项目，原理既是通过 Dockerfile 打包镜像，然后 docker 运行即可。</li></ul><h3 id="6-1-Dockerfile"><a href="#6-1-Dockerfile" class="headerlink" title="6.1. Dockerfile"></a>6.1. Dockerfile</h3><ul><li><input disabled="" type="checkbox"> 在 Spring Boot 项目根目录新建一个名为 Dockerfile 的文件，注意没有后缀名。</li><li><input disabled="" type="checkbox"> 其内容如下：（大致就是使用 JDK 8，把 jar 包添加到 docker 然后运行 prod 配置文件。详细可以查看其他教程）<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> jdk:8</span><span class="token instruction"><span class="token keyword">VOLUME</span> /tmp</span><span class="token instruction"><span class="token keyword">ADD</span> target/zx-order-0.0.1-SNAPSHOT.jar app.jar</span><span class="token instruction"><span class="token keyword">EXPOSE</span> 8888</span><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"java"</span>,<span class="token string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="token string">"-jar"</span>,<span class="token string">"/app.jar"</span>,<span class="token string">"--spring.profiles.active=prod"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="6-2-修改-Jenkins-任务配置"><a href="#6-2-修改-Jenkins-任务配置" class="headerlink" title="6.2. 修改 Jenkins 任务配置"></a>6.2. 修改 Jenkins 任务配置</h3><p><img src="/anubis-blogs/markdownimages/Jenkines/13.png" alt="配置"></p><ul><li><p><input disabled="" type="checkbox"> 配置如下：<br><img src="/anubis-blogs/markdownimages/Jenkines/14.png" alt="maven脚本配置"></p></li><li><p><input disabled="" type="checkbox"> “-t” 指定新镜像名，”.” 表示 Dockfile 在当前路径。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /var/jenkins_home/workspace/my-task<span class="token function">docker</span> stop my-task <span class="token operator">||</span> <span class="token boolean">true</span> <span class="token function">docker</span> <span class="token function">rm</span> my-task <span class="token operator">||</span> <span class="token boolean">true</span> <span class="token function">docker</span> rmi my-task <span class="token operator">||</span> <span class="token boolean">true</span> <span class="token function">docker</span> build <span class="token parameter variable">-t</span> my-task <span class="token builtin class-name">.</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8888</span>:8888 <span class="token parameter variable">--name</span> my-task my-task:latest<span class="token function">docker</span> logs <span class="token parameter variable">-f</span> my-task<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><input disabled="" type="checkbox"> 上图用了 docker logs -f 是为了方便看日志，真实环境不要用，因为会一直等待日志，构建任务会失败；</p></li><li><p><input disabled="" type="checkbox"> 加 “|| true” 是如果命令执行失败也会继续实行，为了防止第一次没有该镜像报错；</p></li></ul><h3 id="6-3-保存"><a href="#6-3-保存" class="headerlink" title="6.3. 保存"></a>6.3. 保存</h3><ul><li><input disabled="" type="checkbox"> 点击保存即可；</li></ul><h3 id="6-4-构建：查看-Jenkins-控制台输出，输出如下，证明成功；"><a href="#6-4-构建：查看-Jenkins-控制台输出，输出如下，证明成功；" class="headerlink" title="6.4. 构建：查看 Jenkins 控制台输出，输出如下，证明成功；"></a>6.4. 构建：查看 Jenkins 控制台输出，输出如下，证明成功；</h3><p><img src="/anubis-blogs/markdownimages/Jenkines/15.png" alt="查看镜像是否构建成功"></p><h3 id="6-5-验证"><a href="#6-5-验证" class="headerlink" title="6.5. 验证"></a>6.5. 验证</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span> <span class="token comment"># 查看是否有自己的容器docker logs # 自己的容器名，查看日志是否正确# 打开浏览器访问项目</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/anubis-blogs/markdownimages/Jenkines/16.png" alt="查看容器是否启动"></p><h3 id="6-6-调用接口测试"><a href="#6-6-调用接口测试" class="headerlink" title="6.6.调用接口测试"></a>6.6.调用接口测试</h3><p><img src="/anubis-blogs/markdownimages/Jenkines/17.png" alt="调用接口"><br><img src="/anubis-blogs/markdownimages/Jenkines/18.png" alt="查看日志"></p>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkines </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 笔记</title>
      <link href="/anubis-blogs/2024/01/24/Linux%20%E7%AC%94%E8%AE%B0/"/>
      <url>/anubis-blogs/2024/01/24/Linux%20%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-笔记"><a href="#Linux-笔记" class="headerlink" title="Linux 笔记"></a>Linux 笔记</h1>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/anubis-blogs/2024/01/24/Maven/"/>
      <url>/anubis-blogs/2024/01/24/Maven/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="1-Maven-配置文件（阿里云镜像配置）"><a href="#1-Maven-配置文件（阿里云镜像配置）" class="headerlink" title="1.Maven 配置文件（阿里云镜像配置）"></a>1.Maven 配置文件（阿里云镜像配置）</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginGroups</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginGroups</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proxies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>proxies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>/Users/anubis/maven_repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfiles</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">></span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfiles</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Maven-配置文件（共公仓库与第三方仓库混合配置）"><a href="#2-Maven-配置文件（共公仓库与第三方仓库混合配置）" class="headerlink" title="2.Maven 配置文件（共公仓库与第三方仓库混合配置）"></a>2.Maven 配置文件（共公仓库与第三方仓库混合配置）</h2><ul><li><input disabled="" type="checkbox"> 注：混合配置共公仓库和第三方仓库，需要在setting.xml增加新的mirror和profile，并激活新的activeProfile。</li></ul><h3 id="mirror"><a href="#mirror" class="headerlink" title="mirror"></a>mirror</h3><p>mirrorOf代表了一个镜像的替代位置，其中，</p><ul><li><input disabled="" type="checkbox"> *: 匹配所有，所有内容都从镜像拉取</li><li><input disabled="" type="checkbox"> external:*: 除了本地缓存的所有从镜像仓库拉取</li><li><input disabled="" type="checkbox"> repo,repo1: repo或者repo1，这里的repo指的仓库ID</li><li><input disabled="" type="checkbox"> *,!repo1: 除了repo1的所有仓库</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginGroups</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proxies</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>/Users/anubis/maven_repository_zj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 镜像 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-R1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>maven-R1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://xx.xx.xx.xx:xxxx/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-R2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>maven-R2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>maven-R2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://xx.xx.xx.xx:xxxx/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-R1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-R2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--新增：私有maven仓库配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>ali<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>ali<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">></span></span>always<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checksumPolicy</span><span class="token punctuation">></span></span>warn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checksumPolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-R1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-R1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://xx.xx.xx.xx:xxxx/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">></span></span>always<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checksumPolicy</span><span class="token punctuation">></span></span>warn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checksumPolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-R2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-R2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://xx.xx.xx.xx:xxxx/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">></span></span>always<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checksumPolicy</span><span class="token punctuation">></span></span>warn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checksumPolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--激活配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfiles</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">></span></span>ali<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">></span></span>maven-R1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">></span></span>maven-R2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfiles</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-清理本地maven仓库"><a href="#3-清理本地maven仓库" class="headerlink" title="3.清理本地maven仓库"></a>3.清理本地maven仓库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建脚本</span><span class="token function">vi</span> maven_clean.sh<span class="token comment"># 赋权</span><span class="token function">chmod</span> +777 ./maven_clean.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 定义 Maven 仓库路径</span><span class="token assign-left variable">repo_path</span><span class="token operator">=</span><span class="token string">"/Users/anubis/maven_repository"</span>  <span class="token comment"># 请根据实际情况修改路径</span><span class="token comment"># 删除所有以 .lastUpdated 结尾的文件</span><span class="token function">find</span> <span class="token variable">$repo_path</span> <span class="token parameter variable">-name</span> <span class="token string">"*.lastUpdated"</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-delete</span><span class="token comment"># 删除空文件夹</span><span class="token function">find</span> <span class="token variable">$repo_path</span> <span class="token parameter variable">-type</span> d <span class="token parameter variable">-empty</span> <span class="token parameter variable">-delete</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Maven依赖上传"><a href="#4-Maven依赖上传" class="headerlink" title="4.Maven依赖上传"></a>4.Maven依赖上传</h2><ul><li><input disabled="" type="checkbox"> 注：Nexus 私有仓库的public仓库一般不能直接上传，需要上传到其他新建的仓库，并注意区分仓库 release 和 snapshot 版本库。</li></ul><h3 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn install:install-file <span class="token parameter variable">-Dfile</span><span class="token operator">=</span>/路径/xxx-x.x.x.jar <span class="token parameter variable">-DgroupId</span><span class="token operator">=</span>xxx <span class="token parameter variable">-DartifactId</span><span class="token operator">=</span>xxx <span class="token parameter variable">-Dversion</span><span class="token operator">=</span>x.x.x <span class="token parameter variable">-Dpackaging</span><span class="token operator">=</span>jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn deploy:deploy-file <span class="token parameter variable">-DgroupId</span><span class="token operator">=</span>xxx <span class="token parameter variable">-DartifactId</span><span class="token operator">=</span>xxx <span class="token parameter variable">-Dversion</span><span class="token operator">=</span>xxx <span class="token parameter variable">-Dpackaging</span><span class="token operator">=</span>jar <span class="token parameter variable">-Dfile</span><span class="token operator">=</span>xxx的路径 <span class="token parameter variable">-Durl</span><span class="token operator">=</span>http://账号:密码@xx.xx.xx.xx:xxxx/nexus/content/repositories/snapshots<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="将本地仓库依赖批量上传到远程私有仓库"><a href="#将本地仓库依赖批量上传到远程私有仓库" class="headerlink" title="将本地仓库依赖批量上传到远程私有仓库"></a>将本地仓库依赖批量上传到远程私有仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># copy and run this script to the root of the repository directory containing files</span><span class="token comment"># this script attempts to exclude uploading itself explicitly so the script name is important</span><span class="token comment"># Get command line params</span><span class="token keyword">while</span> <span class="token builtin class-name">getopts</span> <span class="token string">":r:u:p:"</span> opt<span class="token punctuation">;</span> <span class="token keyword">do</span>   <span class="token keyword">case</span> <span class="token variable">$opt</span> <span class="token keyword">in</span>   r<span class="token punctuation">)</span> <span class="token assign-left variable">REPO_URL</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$OPTARG</span>"</span>   <span class="token punctuation">;</span><span class="token punctuation">;</span>   u<span class="token punctuation">)</span> <span class="token assign-left variable">USERNAME</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$OPTARG</span>"</span>   <span class="token punctuation">;</span><span class="token punctuation">;</span>   p<span class="token punctuation">)</span> <span class="token assign-left variable">PASSWORD</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$OPTARG</span>"</span>   <span class="token punctuation">;</span><span class="token punctuation">;</span>   <span class="token keyword">esac</span><span class="token keyword">done</span><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-not</span> <span class="token parameter variable">-path</span> <span class="token string">'./mvnimport\.sh*'</span> <span class="token parameter variable">-not</span> <span class="token parameter variable">-path</span> <span class="token string">'*/\.*'</span> <span class="token parameter variable">-not</span> <span class="token parameter variable">-path</span> <span class="token string">'*/\^archetype\-catalog\.xml*'</span> <span class="token parameter variable">-not</span> <span class="token parameter variable">-path</span> <span class="token string">'*/\^maven\-metadata\-local*\.xml'</span> <span class="token parameter variable">-not</span> <span class="token parameter variable">-path</span> <span class="token string">'*/\^maven\-metadata\-deployment*\.xml'</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s|^\./||"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-I</span> <span class="token string">'&#123;&#125;'</span> <span class="token function">curl</span> <span class="token parameter variable">-u</span> <span class="token string">"<span class="token variable">$USERNAME</span>:<span class="token variable">$PASSWORD</span>"</span> <span class="token parameter variable">-X</span> PUT <span class="token parameter variable">-v</span> <span class="token parameter variable">-T</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token variable">$&#123;REPO_URL&#125;</span>/<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -u maven私服用户名</span><span class="token comment"># -p maven私服用密码</span><span class="token comment"># http://私服ip:端口/repository/目标仓库/</span>./mavenimport.sh <span class="token parameter variable">-u</span> admin <span class="token parameter variable">-p</span> admin123 <span class="token parameter variable">-r</span> http://xx.xx.xx.xx:xxxx/repository/test/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/weixin_52109184/article/details/129313008">(脚本原文链接)</a></p>]]></content>
      
      
      <categories>
          
          <category> 构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/anubis-blogs/2024/01/24/MySQL/"/>
      <url>/anubis-blogs/2024/01/24/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/anubis-blogs/2024/01/24/Docker/"/>
      <url>/anubis-blogs/2024/01/24/Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="1-Docker安装"><a href="#1-Docker安装" class="headerlink" title="1.Docker安装"></a>1.Docker安装</h2><h3 id="1-1-安装Docker"><a href="#1-1-安装Docker" class="headerlink" title="1.1.安装Docker"></a>1.1.安装Docker</h3><blockquote><p>环境查看</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 系统内核是3.10以上的</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># uname -r</span><span class="token number">3.10</span>.0-1127.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 系统版本</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/os-release </span><span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"CentOS Linux"</span><span class="token assign-left variable">VERSION</span><span class="token operator">=</span><span class="token string">"7 (Core)"</span><span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token string">"centos"</span><span class="token assign-left variable">ID_LIKE</span><span class="token operator">=</span><span class="token string">"rhel fedora"</span><span class="token assign-left variable">VERSION_ID</span><span class="token operator">=</span><span class="token string">"7"</span><span class="token assign-left variable">PRETTY_NAME</span><span class="token operator">=</span><span class="token string">"CentOS Linux 7 (Core)"</span><span class="token assign-left variable">ANSI_COLOR</span><span class="token operator">=</span><span class="token string">"0;31"</span><span class="token assign-left variable">CPE_NAME</span><span class="token operator">=</span><span class="token string">"cpe:/o:centos:centos:7"</span><span class="token assign-left variable">HOME_URL</span><span class="token operator">=</span><span class="token string">"https://www.centos.org/"</span><span class="token assign-left variable">BUG_REPORT_URL</span><span class="token operator">=</span><span class="token string">"https://bugs.centos.org/"</span><span class="token assign-left variable">CENTOS_MANTISBT_PROJECT</span><span class="token operator">=</span><span class="token string">"CentOS-7"</span><span class="token assign-left variable">CENTOS_MANTISBT_PROJECT_VERSION</span><span class="token operator">=</span><span class="token string">"7"</span><span class="token assign-left variable">REDHAT_SUPPORT_PRODUCT</span><span class="token operator">=</span><span class="token string">"centos"</span><span class="token assign-left variable">REDHAT_SUPPORT_PRODUCT_VERSION</span><span class="token operator">=</span><span class="token string">"7"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>安装Docker</p></blockquote><p>帮助文档：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、卸载旧的Docker版本</span><span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\</span>                  docker-client <span class="token punctuation">\</span>                  docker-client-latest <span class="token punctuation">\</span>                  docker-common <span class="token punctuation">\</span>                  docker-latest <span class="token punctuation">\</span>                  docker-latest-logrotate <span class="token punctuation">\</span>                  docker-logrotate <span class="token punctuation">\</span>                  docker-engine<span class="token comment"># 2、需要的安装包</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils<span class="token comment">#3、设置镜像的仓库</span><span class="token comment"># 默认是国外的下载超级慢！</span><span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\</span> --add-repo <span class="token punctuation">\</span> https://download.docker.com/linux/centos/docker-ce.repo <span class="token comment"># 阿里云的镜像</span>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="token comment"># 更新yum软件包索引</span>yum makecache fast<span class="token comment"># 4、安装docker相关的软件 docker-ce社区版 docker-ee企业版</span><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io <span class="token parameter variable">-y</span><span class="token comment"># 5、启动docker</span><span class="token function">sudo</span> systemctl start <span class="token function">docker</span><span class="token comment"># 6、测试docker安装成功？</span><span class="token function">docker</span> version<span class="token comment"># 7、永远的 [HelloWorld] ^_^ 能够成功拉取image表示docker安装成功！</span><span class="token function">docker</span> run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker踩到的坑:运行[docker run hello-world]遇到的坑？会报错？</span>docker: Error response from daemon: Get https://registry-1.docker.io/v2/library/hello-world/manifests/latest: Get https://auth.docker.io/token?scope<span class="token operator">=</span>repository%3Alibrary%2Fhello-world%3Apull<span class="token operator">&amp;</span><span class="token assign-left variable">service</span><span class="token operator">=</span>registry.docker.io: net/http: TLS handshake timeout.<span class="token comment"># 解决办法：在/etc/docker下创建daemon.json文件。拷贝如下代码:</span><span class="token punctuation">&#123;</span>  <span class="token string">"registry-mirrors"</span>:<span class="token punctuation">[</span><span class="token string">"https://registry.docker-cn.com"</span>,<span class="token string">"http://hub-mirror.c.163.com"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment"># 保存退出！</span><span class="token comment"># 重启docker服务：service docker restart</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>卸载Docker</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、卸载依赖</span><span class="token function">sudo</span> yum remove docker-ce docker-ce-cli containerd.io<span class="token comment"># 2、删除资源</span><span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/docker<span class="token comment"># /var/lib/docker是Docker默认的工作路径！！！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-阿里云镜像加速"><a href="#1-2-阿里云镜像加速" class="headerlink" title="1.2.阿里云镜像加速"></a>1.2.阿里云镜像加速</h3><blockquote><p>设置阿里云镜像步骤</p></blockquote><p>1、登录 [阿里云—&gt;控制台] 找到容器服务。</p><p><img src="/anubis-blogs/markdownimages/Docker/1.png" alt="阿里云"></p><p>2、找到镜像加速地址。</p><p><img src="/anubis-blogs/markdownimages/Docker/2.png" alt="镜像加速"></p><p>3、配置加速器使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'&#123;  "registry-mirrors": ["https://phapqiqc.mirror.aliyuncs.com"]&#125;EOF</span><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>docker run 的运行流程图</p></blockquote><p><img src="/anubis-blogs/markdownimages/Docker/3.png" alt="docker运行流程"></p><h3 id="1-3-底层原理"><a href="#1-3-底层原理" class="headerlink" title="1.3.底层原理"></a>1.3.底层原理</h3><blockquote><p>docker是怎么工作的？</p></blockquote><p>Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问。</p><p>Docker-Server接收到Docker-Client的指令，就会执行这个命令。</p><p><img src="/anubis-blogs/markdownimages/Docker/4.png" alt="docker底层原理"></p><blockquote><p>docker为什么比VM快？</p></blockquote><p>1、Docker有着比虚拟机更少的抽象层。</p><p>2、Docker利用的是宿主机的内核。所以说新建一个容器的时候，docker不需要像虚拟机一样重新加载个操作系统内核。</p><h2 id="2-Docker的常用命令"><a href="#2-Docker的常用命令" class="headerlink" title="2.Docker的常用命令"></a>2.Docker的常用命令</h2><h3 id="2-1-帮助命令"><a href="#2-1-帮助命令" class="headerlink" title="2.1.帮助命令"></a>2.1.帮助命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> version<span class="token comment">#显示docker的版本信息</span><span class="token function">docker</span> info<span class="token comment">#显示Docker的系统信息，包括镜像和容器的数量</span><span class="token function">docker</span> <span class="token punctuation">[</span>命令<span class="token punctuation">]</span> <span class="token parameter variable">--help</span><span class="token comment">#docker帮助信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Docker帮助文档地址：<a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p><h3 id="2-2-镜像命令"><a href="#2-2-镜像命令" class="headerlink" title="2.2.镜像命令"></a>2.2.镜像命令</h3><blockquote><p>docker imags  查看所有本地的主机上的镜像</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEhello-world         latest              bf756fb1ae65        <span class="token number">5</span> months ago        <span class="token number">13</span>.3kB<span class="token comment">#解释</span>REPOSITORY 镜像的仓库源TAG镜像的标签IMAGE ID 镜像的IDCREATED 镜像的创建时间SIZE 镜像的大小<span class="token comment">#可选项</span>  -a, <span class="token parameter variable">--all</span>             <span class="token comment">#列出所有的镜像</span>  -q, <span class="token parameter variable">--quiet</span>           <span class="token comment">#只显示镜像的id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>docker search   去dockerhub搜索镜像</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker search mysql</span><span class="token comment">#可选项</span><span class="token parameter variable">--filter</span><span class="token operator">=</span>stars<span class="token operator">=</span><span class="token number">3000</span><span class="token comment">#搜索出来的镜像就是stars大于3000的</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker search nginx --filter=stars=3000</span>NAME                DESCRIPTION                STARS               OFFICIAL            AUTOMATEDnginx               Official build of Nginx.   <span class="token number">13323</span>               <span class="token punctuation">[</span>OK<span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>docker poll下载镜像</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载镜像 docker pull [镜像名] [:tag]</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker pull mysql</span>Using default tag: latest <span class="token comment"># 如果不写tag，默认就下载lastest最新版本</span>latest: Pulling from library/mysql8559a31e96f4: Pull complete <span class="token comment"># 分层下载，docker image的核心，联合文件系统</span>d51ce1c2e575: Pull complete c2344adc4858: Pull complete fcf3ceff18fc: Pull complete 16da0c38dc5b: Pull complete b905d1797e97: Pull complete 4b50d1c6b05c: Pull complete c75914a65ca2: Pull complete 1ae8042bdd09: Pull complete 453ac13c00a3: Pull complete 9e680cd72f08: Pull complete a6b5dc864b6c: Pull complete Digest: sha256:8b7b328a7ff6de46ef96bcf83af048cb00a1c86282bfca0cb119c84568b4caf6 <span class="token comment"># 签名(防伪标志)</span>Status: Downloaded newer image <span class="token keyword">for</span> mysql:latestdocker.io/library/mysql:latest <span class="token comment"># 真实地址</span><span class="token comment">#等价于</span><span class="token function">docker</span> pull mysql<span class="token function">docker</span> pull docker.io/library/mysql:latest<span class="token comment">#指定版本下载 </span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker pull mysql:5.7</span><span class="token number">5.7</span>: Pulling from library/mysql8559a31e96f4: Already exists <span class="token comment"># 下载的mysql5.7和之前下载的mysql可以部分文件可以共用</span>d51ce1c2e575: Already exists c2344adc4858: Already exists fcf3ceff18fc: Already exists 16da0c38dc5b: Already exists b905d1797e97: Already exists 4b50d1c6b05c: Already exists d85174a87144: Pull complete a4ad33703fa8: Pull complete f7a5433ce20d: Pull complete 3dcd2a278b4a: Pull complete Digest: sha256:32f9d9a069f7a735e28fd44ea944d53c61f990ba71460c5c183e610854ca4854Status: Downloaded newer image <span class="token keyword">for</span> mysql:5.7docker.io/library/mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>docker rmi删除image</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 根据image ID删除指定的image</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker rmi -f 9cfcce23593a</span>Untagged: mysql:5.7Untagged: mysql@sha256:32f9d9a069f7a735e28fd44ea944d53c61f990ba71460c5c183e610854ca4854Deleted: sha256:9cfcce23593a93135ca6dbf3ed544d1db9324d4c40b5c0d56958165bfaa2d46aDeleted: sha256:98de3e212919056def8c639045293658f6e6022794807d4b0126945ddc8324beDeleted: sha256:17e8b88858e400f8c5e10e7cb3fbab9477f6d8aacba03b8167d34a91dbe4d8c1Deleted: sha256:c04c087c2af9abd64ba32fe89d65e6d83da514758923de5da154541cc01a3a1eDeleted: sha256:ab8bf065b402b99aec4f12c648535ef1b8dc954b4e1773bdffa10ae2027d3e00<span class="token comment"># 递归删除所有image</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker rmi -f $(docker images -aq)</span><span class="token comment">#删除多个image</span><span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> <span class="token punctuation">[</span>image id1<span class="token punctuation">]</span> <span class="token punctuation">[</span>image id2<span class="token punctuation">]</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-容器命令"><a href="#2-3-容器命令" class="headerlink" title="2.3.容器命令"></a>2.3.容器命令</h3><p><strong>说明：我们有了image才可以创建容器，下载一个centos镜像来测试和学习。</strong></p><blockquote><p>docker run新建容器并启动</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull centos:7<span class="token comment"># docker run [可选参数] image</span><span class="token comment"># 参数说明</span><span class="token parameter variable">--name</span><span class="token operator">=</span><span class="token string">"Name"</span>   <span class="token comment"># 给容器取名字</span><span class="token parameter variable">-d</span><span class="token comment"># 后台运行容器并且输出容器的id</span><span class="token parameter variable">-it</span><span class="token comment"># 使用交互方式运行，进入容器查看内容</span><span class="token parameter variable">-p</span><span class="token comment"># (小写的p)容器的端口和Linux主机端口的映射 </span><span class="token parameter variable">-p</span> 主机端口:容器端口<span class="token punctuation">(</span>常用<span class="token punctuation">)</span><span class="token parameter variable">-p</span> ip:主机端口:容器端口<span class="token parameter variable">-P</span><span class="token comment"># (大写的P)随机指定端口</span><span class="token comment"># 测试，启动centos image并进入容器</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker run -it --name="centos-test1" 470671670cac /bin/bash</span><span class="token punctuation">[</span>root@91f0881f5e49 /<span class="token punctuation">]</span><span class="token comment"># ls </span>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr<span class="token comment"># 退出容器命令</span><span class="token punctuation">[</span>root@91f0881f5e49 /<span class="token punctuation">]</span><span class="token comment"># exit</span><span class="token builtin class-name">exit</span><span class="token punctuation">[</span>root@centos-7-test1 /<span class="token punctuation">]</span><span class="token comment"># ls</span>bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>docker ps列出所有的容器</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有正在运行的容器</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token punctuation">[</span>可选参数<span class="token punctuation">]</span><span class="token comment"># 可选参数</span><span class="token parameter variable">-a</span><span class="token comment"># 列出所有的容器(包括历史运行的容器)</span><span class="token parameter variable">-n</span><span class="token comment"># 显示n个最后创建的容器</span><span class="token parameter variable">-q</span> <span class="token comment"># 只显示容器的id</span><span class="token comment"># 显示最后一个创建的容器</span><span class="token punctuation">[</span>root@centos-7-test1 /<span class="token punctuation">]</span><span class="token comment"># docker ps -n=1</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES91f0881f5e49        470671670cac        <span class="token string">"/bin/bash"</span>         <span class="token number">11</span> minutes ago      Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">8</span> minutes ago                       centos-test1<span class="token comment"># 列出所有的容器(包括历史运行的容器)</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>退出容器</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exit</span><span class="token comment"># 直接退出容器并退出</span>ctrl + P + Q <span class="token comment"># 容器不停止退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>docker rm删除容器</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 按照容器id删除容器 不能删除正在运行的容器，如果要强制删除，需要使用 rm -f</span><span class="token function">docker</span> <span class="token function">rm</span> <span class="token punctuation">[</span>容器id<span class="token punctuation">]</span><span class="token comment"># 删除所有容器</span><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span><span class="token variable">)</span></span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">docker</span> <span class="token function">rm</span><span class="token comment"># 删除所有的容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>启动和停止容器的操作</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> start <span class="token punctuation">[</span>容器id<span class="token punctuation">]</span><span class="token comment"># 启动容器</span><span class="token function">docker</span> restart <span class="token punctuation">[</span>容器id<span class="token punctuation">]</span><span class="token comment"># 重新启动容器</span><span class="token function">docker</span> stop <span class="token punctuation">[</span>容器id<span class="token punctuation">]</span> <span class="token comment"># 停止当前正在运行的容器</span><span class="token function">docker</span> <span class="token function">kill</span> <span class="token punctuation">[</span>容器id<span class="token punctuation">]</span><span class="token comment"># 强制停止运行容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-其他常用命令"><a href="#2-4-其他常用命令" class="headerlink" title="2.4.其他常用命令"></a>2.4.其他常用命令</h3><blockquote><p>后台启动容器</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker run -d [image]</span><span class="token comment"># 问题：docker ps 之后，返现容器停止运行了？why？</span><span class="token comment"># 常见的坑，docker 容器使用后台运行，就必须要有一个前台的进程，docker发现没有应用，就会自动停止。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看日志</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--tail</span> <span class="token punctuation">[</span>number<span class="token punctuation">]</span> <span class="token punctuation">[</span>容器id<span class="token punctuation">]</span><span class="token comment"># 参数说明</span><span class="token parameter variable">-f</span><span class="token comment"># 跟踪日志输出</span><span class="token parameter variable">-t</span><span class="token comment"># 显示时间戳</span><span class="token parameter variable">--tail</span><span class="token comment"># 显示最近number条日志</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看容器中进程信息</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">top</span> <span class="token punctuation">[</span>容器id<span class="token punctuation">]</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker top db1f61a0c5c9</span><span class="token environment constant">UID</span>                 PID                 <span class="token environment constant">PPID</span>                C                   STIME               TTY      root                <span class="token number">7196</span>                <span class="token number">7177</span>                <span class="token number">0</span>                   <span class="token number">22</span>:33               pts/0   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看容器的元数据</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> inspect <span class="token punctuation">[</span>containerId<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>进入当前正在运行的容器</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 容器通常都是后台运行的，需要进入容器 </span><span class="token comment"># 方式一：docker exec</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token punctuation">[</span>containerId<span class="token punctuation">]</span> <span class="token punctuation">[</span>bashshell<span class="token punctuation">]</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker exec -it db1f61a0c5c9 /bin/bash</span><span class="token punctuation">[</span>root@db1f61a0c5c9 /<span class="token punctuation">]</span><span class="token comment"># ls</span>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr <span class="token comment"># 方式二：docker attach</span><span class="token function">docker</span> attach <span class="token punctuation">[</span>containerId<span class="token punctuation">]</span><span class="token comment"># 问题：docker exec 和 docker attach 的区别？</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span><span class="token comment"># 进入容器后开启一个新的终端，exit后不会关闭容器(常用)</span><span class="token function">docker</span> attach <span class="token comment"># 进入容器正在执行的终端，不会启动新的进程，exit后容器会stop。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从容器内拷贝文件到主机上</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令docker cp</span><span class="token function">docker</span> <span class="token function">cp</span> containerID:容器内路径 目的主机路径<span class="token comment"># 测试将centos容器内 /etc/profile 文件拷贝到主机 /opt/ 目录下</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker ps </span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS    db1f61a0c5c9        470671670cac        <span class="token string">"/bin/bash"</span>         <span class="token number">25</span> minutes ago      Up <span class="token number">2</span> minutes                            <span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker cp db1f61a0c5c9:/etc/profile /opt/</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># cd /opt/</span><span class="token punctuation">[</span>root@centos-7-test1 opt<span class="token punctuation">]</span><span class="token comment"># ll</span>total <span class="token number">4</span>drwxr-xr-x. <span class="token number">3</span> root root   <span class="token number">72</span> Jun <span class="token number">11</span> <span class="token number">14</span>:53 activemqdrwx--x--x. <span class="token number">4</span> root root   <span class="token number">28</span> Jun <span class="token number">12</span> <span class="token number">16</span>:01 containerddrwxr-xr-x. <span class="token number">3</span> root root   <span class="token number">60</span> Jun <span class="token number">11</span> <span class="token number">10</span>:20 <span class="token function">java</span>-rw-r--r--. <span class="token number">1</span> root root <span class="token number">2078</span> Sep <span class="token number">10</span>  <span class="token number">2018</span> profiledrwxr-xr-x. <span class="token number">2</span> root root    <span class="token number">6</span> Oct <span class="token number">31</span>  <span class="token number">2018</span> rhdrwxr-xr-x. <span class="token number">3</span> root root   <span class="token number">61</span> Jun <span class="token number">11</span> <span class="token number">10</span>:23 zookeeper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-小结"><a href="#2-5-小结" class="headerlink" title="2.5.小结"></a>2.5.小结</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">attachAttach to a running container            <span class="token comment"># 当前shell下进入到指定的正在运行的container中</span>build Build an image from a Dockerfile           <span class="token comment"># 通过Dockerfile构建镜像</span>commitCreate a new image from a container‘s changes<span class="token comment"># 提交当前容器为新的镜像</span><span class="token function">cp</span>   Copy files/folders between a container and the <span class="token builtin class-name">local</span> filesystem<span class="token comment"># 从容器中拷贝文件到宿主机指定路径</span>createCreate a new container<span class="token comment"># 创建一个新的容器,同run，但是不会启动容器</span><span class="token function">diff</span>Inspect changes to <span class="token function">file</span> on container <span class="token comment"># 查看容器文件的变化</span>events Get real <span class="token function">time</span> events from the server<span class="token comment"># 从docker服务获取容器实时事件</span><span class="token builtin class-name">exec</span>Run a <span class="token builtin class-name">command</span> <span class="token keyword">in</span> a running container<span class="token comment"># 在一个已经运行的容器内执行命令</span><span class="token builtin class-name">export</span>Export a container’s filesystem as a <span class="token function">tar</span> archive<span class="token comment"># 导出容器的内容流作为一个tar归档文件[对应 import]</span><span class="token function">history</span>show the <span class="token function">history</span> of an image<span class="token comment"># 展示一个镜像形成历史</span>imagesList images<span class="token comment"># 列出系统中当前的镜像</span><span class="token function">import</span>Import the contents form a tarball to create a filesystem image<span class="token comment"># 从tar包中的内容创建一个新的文件系统镜像[对应 export]</span>infoDisplay system-wide information<span class="token comment"># 展示出系统相关信息</span>inspectReturn low-level information on a container<span class="token comment"># 查看容器详细信息</span><span class="token function">kill</span><span class="token function">kill</span> one or <span class="token function">more</span> running containers<span class="token comment"># 强制停止一个或多个正在运行的容器</span>loadload an image from a <span class="token function">tar</span> archive<span class="token comment"># 从一个tar包中加载镜像[对应 save]</span>loginRegisty or login to the <span class="token function">docker</span> registry server<span class="token comment"># 注册或者登陆一个docker源服务器</span><span class="token builtin class-name">logout</span>Logout from a Docker registy server<span class="token comment"># 从当前的docker registry server退出</span>logsFetch the logs of a container<span class="token comment"># 显示容器的日志</span>portshow port mappings <span class="token keyword">for</span> a container<span class="token comment"># 查看容器端口的映射</span>pausePause all process within the container<span class="token comment"># 暂停容器</span><span class="token function">ps</span>  List containers<span class="token comment"># 列出当前系统中的容器列表</span>pullPull an image from a registry<span class="token comment"># 从docker源服务器中拉取镜像</span>pushPush an image or repository to a registry <span class="token comment"># 推送指定镜像或镜像库到docker源服务器</span>restartRestart one or <span class="token function">more</span> containers<span class="token comment"># 重启一个或多个容器</span>stopStop one or <span class="token function">more</span> running containers<span class="token comment"># 停止一个或多个正在运行的容器</span>tag   Tag an image into a repository             <span class="token comment"># 给源镜像中打标签</span><span class="token function">top</span>   Display the running process of a container<span class="token comment"># 展示容器中正在运行的进程列表</span>unpauseUnpause all processes within a container<span class="token comment"># 取消暂停容器</span>versionShow the <span class="token function">docker</span> version information     <span class="token comment"># 展示Docker版本信息</span><span class="token function">wait</span>Block <span class="token keyword">until</span> one or <span class="token function">more</span> containers stop,then print their <span class="token builtin class-name">exit</span> codes<span class="token comment"># 截取容器停止时的退出状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-Docker容器内存配置"><a href="#2-6-Docker容器内存配置" class="headerlink" title="2.6.Docker容器内存配置"></a>2.6.Docker容器内存配置</h3><blockquote><p>docker内存限制有两种方式：</p><ol><li>创建容器时添加-m参数，单位可以是b,k,m,g</li><li>如果已经存在容器，修改该容器的hostconfig.json文件</li></ol></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方式一:-m参数限制</span><span class="token comment"># 创建容器时我们可以添加-m参数限制容器的内存占用。单位是b,k,m,b 例如:</span><span class="token comment"># 创建mysql的镜像实例，并限制容器占用内存大小为400m</span><span class="token function">docker</span> run <span class="token parameter variable">-dit</span> <span class="token parameter variable">--name</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> 400m <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方式二:修改hostconfig.json文件限制</span>hostconfig.hson文件是容器的配置文件，每一个容器都有一个对应的 hostconfig.json配置文件，我们在创建容器时使用的任何参数，都可以在这里配置,功能十分的强劲。<span class="token comment"># 1.查找容器对应的hostconfig.json文件</span><span class="token function">docker</span> <span class="token function">ps</span>  <span class="token comment">#找到要修改的容器id，记住它，后面要根据这个id找文件夹</span><span class="token function">find</span> / <span class="token parameter variable">-name</span> hostconfig.json <span class="token comment">#全局搜索hostconfig.json文件，文件的最后一级目录就是容器id</span><span class="token comment"># 通过上面的命令，就可以找到容器对应的hostconfig.json文件了。</span><span class="token comment"># 2.停止docker</span><span class="token comment"># 在修改hostconfig.json文件前，必须要停止docker，否则修改无效</span>systemctl stop <span class="token function">docker</span><span class="token comment"># 3.修改hostconfig.json文件</span><span class="token comment"># 通过vi命令修改配置文件，找到Memory这一项，修改内存大小。请注意：这里的单位默认为byte。最小内存限制为4m，也就是，4x1024x1024。我这里修改为700mb，也就是700x1024x1024。修改完成之后保存退出。</span><span class="token comment"># 4.启动docker</span>systemctl start <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Docker镜像"><a href="#3-Docker镜像" class="headerlink" title="3.Docker镜像"></a>3.Docker镜像</h2><h3 id="3-1-镜像是什么？"><a href="#3-1-镜像是什么？" class="headerlink" title="3.1.镜像是什么？"></a>3.1.镜像是什么？</h3><p>镜像是一种轻量级，可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><p>所有的应用直接打包成为Docker镜像，就可以直接跑起来！</p><p>如何得到镜像：</p><ul><li>从远程仓库下载。</li><li>朋友拷贝给你。</li><li>自己制作镜像DockerFile。</li></ul><h3 id="3-2-Docker镜像加载原理"><a href="#3-2-Docker镜像加载原理" class="headerlink" title="3.2.Docker镜像加载原理"></a>3.2.Docker镜像加载原理</h3><blockquote><p>UnionFS（联合文件系统）</p></blockquote><p>UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持対文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。Union文件系统是Docker镜像的基础。镜像可以通过分层来继承，基于基础镜像，可以制作各种具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但是从外面看来，只能看到一个文件系统，联合加载会把各层文件叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><blockquote><p>镜像加载原理</p></blockquote><ul><li><p>docker 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p></li><li><p>bootfs(boot file system) 主要包含bootloader和kernel，bootloader 主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux&#x2F;Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就存在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p></li><li><p>roorfs （root file system），在bootfs之上。包含的就是典型Linux系统中的 &#x2F;dev ，&#x2F;proc，&#x2F;bin ，&#x2F;etx 等标准的目录和文件。rootfs就是各种不同的操作系统发行版。比如Ubuntu，Centos等等。</p></li><li><p>对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host（宿主机）的kernel，自己只需要提供rootfs就行了，由此可见对于不同的Linux发行版，bootfs基本是一致的，rootfs会有差别，因此不同的发行版可以公用bootfs。</p></li></ul><p><img src="/anubis-blogs/markdownimages/Docker/5.png" alt="Docker镜像联合文件系统"></p><blockquote><p>镜像分层</p></blockquote><ul><li>所有的Docker镜像都起始于一个基础的镜像层，当进行修改或增加新的内容时，就会在当前的镜像层上，创建新的镜像层。</li><li>举一个简单的例子，例如基于CentOS7创建新的镜像，这就是镜像的第一层，如果在该镜像中添加<code>Java</code>包，就会在基础镜像层上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。</li></ul><p><img src="/anubis-blogs/markdownimages/Docker/6.png" alt="容器分层"></p><h3 id="3-3-Commit镜像"><a href="#3-3-Commit镜像" class="headerlink" title="3.3.Commit镜像"></a>3.3.Commit镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> commit 提交容器成为一个新的镜像<span class="token comment"># docker commit基本语法</span><span class="token function">docker</span> commit <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">"描述信息"</span> <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">"作者名字"</span> 目标镜像ID:<span class="token punctuation">[</span>TAG<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-容器数据卷"><a href="#4-容器数据卷" class="headerlink" title="4.容器数据卷"></a>4.容器数据卷</h2><h3 id="4-1-什么是容器数据卷"><a href="#4-1-什么是容器数据卷" class="headerlink" title="4.1.什么是容器数据卷"></a>4.1.什么是容器数据卷</h3><ul><li>将应用和环境打包成一个镜像！数据？如果数据都在容器中，那么我们将容器删除，数据就会消失。</li><li>需求：为了解决数据持久化的问题，可以容器数据存储在本地磁盘中，容器之间可以有一个数据共享的技术！</li><li>Docker容器中的数据可以同步到本地，删除容器后数据不会丢失，这就是容器数据卷技术。</li><li><strong>一句话：容器的数据的持久化和容器间数据的共享。</strong></li></ul><h3 id="4-2-使用数据卷"><a href="#4-2-使用数据卷" class="headerlink" title="4.2.使用数据卷"></a>4.2.使用数据卷</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -v的基本使用</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> 主机端口:容器内端口 <span class="token parameter variable">-v</span> 主机目录:容器目录 镜像id<span class="token comment"># 查看容器数据卷的挂载状态</span><span class="token function">docker</span> inspect 容器id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-安装MySQL"><a href="#4-3-安装MySQL" class="headerlink" title="4.3.安装MySQL"></a>4.3.安装MySQL</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mysql <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /root/mysql/data:/var/lib/mysql <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /root/mysql/conf:/etc/mysql <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">333</span> <span class="token punctuation">\</span>mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-1-MySQL8"><a href="#4-3-1-MySQL8" class="headerlink" title="4.3.1. MySQL8"></a>4.3.1. MySQL8</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token punctuation">\</span>    <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">333</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-v</span> /root/mysql8/data:/var/lib/mysql <span class="token punctuation">\</span>    <span class="token parameter variable">-v</span> /root/mysql8/log:/var/log/mysql <span class="token punctuation">\</span>    <span class="token parameter variable">-v</span> /root/mysql8/config:/etc/mysql <span class="token punctuation">\</span>    <span class="token parameter variable">-v</span> /etc/localtime:/etc/localtime <span class="token punctuation">\</span>    <span class="token parameter variable">-v</span> /root/mysql8/mysql-files:/var/lib/mysql-files <span class="token punctuation">\</span>    <span class="token parameter variable">--name</span> mysql8 <span class="token punctuation">\</span>    <span class="token parameter variable">-d</span> mysql:8.0.26<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-具名挂载和匿名挂载"><a href="#4-4-具名挂载和匿名挂载" class="headerlink" title="4.4.具名挂载和匿名挂载"></a>4.4.具名挂载和匿名挂载</h3><blockquote><p>匿名挂载和具名挂载展示</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、匿名挂载</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token parameter variable">--name</span> nginx01 <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /etc/nginx <span class="token punctuation">\</span>nginx:6.1<span class="token comment"># 查看所有的volume情况</span><span class="token function">docker</span> volume <span class="token function">ls</span><span class="token punctuation">[</span>root@mingyu bin<span class="token punctuation">]</span><span class="token comment"># docker volume ls</span>DRIVER              VOLUME NAME<span class="token builtin class-name">local</span>               6831db4e060f8452a51fc56b52af0605c944bb0ab16c778a96469233794783ea<span class="token comment"># 发现VOLUME NAME这里是一串乱码，这就是匿名挂载，我们在-v时只写了容器内的路径，没有写容器外的路径。</span><span class="token comment"># 2、具名挂载(-v 卷名:容器内路径) 注意这里是卷名而不是容器外路径</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3307</span>:3306 <span class="token parameter variable">--name</span> mysql-test <span class="token punctuation">\</span><span class="token parameter variable">-v</span> mysql-volume:/etc/mysql <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">333</span> <span class="token punctuation">\</span>mysql:5.7<span class="token comment"># 查看具名挂载卷的位置</span><span class="token punctuation">[</span>root@mingyu bin<span class="token punctuation">]</span><span class="token comment"># docker inspect mysql-test</span><span class="token string">"Mounts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"Type"</span><span class="token builtin class-name">:</span> <span class="token string">"volume"</span>,<span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"mysql-volume"</span>,<span class="token string">"Source"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/volumes/mysql-volume/_data"</span>,<span class="token string">"Destination"</span><span class="token builtin class-name">:</span> <span class="token string">"/etc/mysql"</span>,<span class="token string">"Driver"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span>,<span class="token string">"Mode"</span><span class="token builtin class-name">:</span> <span class="token string">"z"</span>,<span class="token string">"RW"</span><span class="token builtin class-name">:</span> true,<span class="token string">"Propagation"</span><span class="token builtin class-name">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的Docker容器的容器卷，没有指定目录的情况下都是在<code>/var/lib/docker/volumes/xxx/_data</code>。</p><p>我们通过具名挂载可以方便的找到我们的一个卷，大多数情况在使用的<code>具名挂载</code>。</p><blockquote><p>如何区分匿名挂载，还是具名挂载，还是指定路径挂载？</p></blockquote><ul><li>匿名挂载：<code>-v 容器内路径</code>。</li><li>具名挂载：<code>-v 卷名:容器内路径</code>。</li><li>指定路径挂载：<code>-v /宿主机路径:容器内路径</code>。</li></ul><blockquote><p>扩展</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 通过 -v 容器内路径:ro rw改变读写权限</span>ro <span class="token builtin class-name">readonly</span><span class="token comment"># 只读</span>rw readwrite<span class="token comment"># 可读可写 </span><span class="token comment"># 只要这个设置了容器权限，容器对我们挂载的数据卷内容就有限定了！</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3307</span>:3306 <span class="token parameter variable">--name</span> mysql-test <span class="token punctuation">\</span><span class="token parameter variable">-v</span> mysql-volume:/etc/mysql:ro <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">333</span> <span class="token punctuation">\</span>mysql:5.7<span class="token comment"># ro 说明这个路径只能通过宿主机来操作，容器内部是无法操作的！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-初识Dockefile"><a href="#4-5-初识Dockefile" class="headerlink" title="4.5.初识Dockefile"></a>4.5.初识Dockefile</h3><p>Dockerfile就是用来构建docker image的文件！就是命令脚本！</p><p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本一个个的命令，每个命令就是一层。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、创建一个dockerfile文件，名字可以随意</span><span class="token comment"># 文件中的内容指令(大写)  参数</span>FROM centosVOLUME <span class="token punctuation">[</span><span class="token string">"volume01"</span>,<span class="token string">"volume02"</span><span class="token punctuation">]</span>CMD <span class="token builtin class-name">echo</span> <span class="token string">"---end---"</span>CMD /bin/bash<span class="token comment"># 这里每个命令就是镜像的一层</span><span class="token comment"># 2、docker build生成镜像 </span><span class="token punctuation">[</span>root@mingyu docker-test-volume<span class="token punctuation">]</span><span class="token comment"># docker build -f /root/docker-test-volume/dockerfile1 -t mingyu/centos:1.0 . # 这里的这个点表示当前路径下！一定要加</span>Sending build context to Docker daemon  <span class="token number">2</span>.048kBStep <span class="token number">1</span>/4 <span class="token builtin class-name">:</span> FROM centoslatest: Pulling from library/centos6910e5a164f7: Pull complete Digest: sha256:4062bbdd1bb0801b0aa38e0f83dece70fb7a5e9bce223423a68de2d8b784b43bStatus: Downloaded newer image <span class="token keyword">for</span> centos:latest ---<span class="token operator">></span> 831691599b88Step <span class="token number">2</span>/4 <span class="token builtin class-name">:</span> VOLUME <span class="token punctuation">[</span><span class="token string">"volume01"</span>,<span class="token string">"volume02"</span><span class="token punctuation">]</span> ---<span class="token operator">></span> Running <span class="token keyword">in</span> 2431f66d812cRemoving intermediate container 2431f66d812c ---<span class="token operator">></span> d7d82437e882Step <span class="token number">3</span>/4 <span class="token builtin class-name">:</span> CMD <span class="token builtin class-name">echo</span> <span class="token string">"---end---"</span> ---<span class="token operator">></span> Running <span class="token keyword">in</span> 61e1c1e347f4Removing intermediate container 61e1c1e347f4 ---<span class="token operator">></span> 9941580f890aStep <span class="token number">4</span>/4 <span class="token builtin class-name">:</span> CMD /bin/bash ---<span class="token operator">></span> Running <span class="token keyword">in</span> c6985be4aaedRemoving intermediate container c6985be4aaed ---<span class="token operator">></span> 8adb23ccb590Successfully built 8adb23ccb590Successfully tagged mingyu/centos:1.0<span class="token comment"># 3、启动自己写的容器</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> mycentos mingyu/centos:1.0 /bin/bash<span class="token comment"># 在容器内部可以看到我们自己定义的容器卷</span><span class="token punctuation">[</span>root@26c568f61497 /<span class="token punctuation">]</span><span class="token comment"># ls</span>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01volume02<span class="token comment"># 4、查看容器的数据卷的挂载位置</span><span class="token punctuation">[</span>root@mingyu ~<span class="token punctuation">]</span><span class="token comment"># docker inspect mycentos</span><span class="token string">"Mounts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"Type"</span><span class="token builtin class-name">:</span> <span class="token string">"volume"</span>,<span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"ec18f8b7f9a2284071501133ec17c5094093200e372dcf6c5b2bd13fbf4c9f06"</span>,<span class="token string">"Source"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/volumes/ec18f8b7f9a2284071501133ec17c5094093200e372dcf6c5b2bd13fbf4c9f06/_data"</span>,<span class="token string">"Destination"</span><span class="token builtin class-name">:</span> <span class="token string">"volume01"</span>,<span class="token string">"Driver"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span>,<span class="token string">"Mode"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,<span class="token string">"RW"</span><span class="token builtin class-name">:</span> true,<span class="token string">"Propagation"</span><span class="token builtin class-name">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token string">"Type"</span><span class="token builtin class-name">:</span> <span class="token string">"volume"</span>,<span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"8adb94c9d27174623e188e48652d932889a7d84c33466ab96d2548ee7f9fea72"</span>,<span class="token string">"Source"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/volumes/8adb94c9d27174623e188e48652d932889a7d84c33466ab96d2548ee7f9fea72/_data"</span>,<span class="token string">"Destination"</span><span class="token builtin class-name">:</span> <span class="token string">"volume02"</span>,<span class="token string">"Driver"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span>,<span class="token string">"Mode"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,<span class="token string">"RW"</span><span class="token builtin class-name">:</span> true,<span class="token string">"Propagation"</span><span class="token builtin class-name">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式我们未来使用的十分多，因为我们通常会自己构建自己的镜像！</p><p>建设构建镜像时没有挂载卷，需要手动挂载<code> -v 卷名:容器内路径</code>。</p><h3 id="4-6-数据卷容器"><a href="#4-6-数据卷容器" class="headerlink" title="4.6.数据卷容器"></a>4.6.数据卷容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># mycentos01容器继承mycentos的容器数据卷</span><span class="token comment"># mycentos01容器也有mycentos的数据了！</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> mycentos01 --volumes-from mycentos mingyu/centos:1.0 /bin/bash<span class="token comment"># 测试删除mycentos容器，mycentos01容器仍然可以访问数据卷的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7-结论"><a href="#4-7-结论" class="headerlink" title="4.7.结论"></a>4.7.结论</h3><ul><li>容器之间信息的传递，数据卷的生命周期一直持续到没有容器使用为止。</li><li>但是一旦将数据持久化到本地磁盘，本地文件是不会消失的！</li></ul><h2 id="5-DockerFile"><a href="#5-DockerFile" class="headerlink" title="5.DockerFile"></a>5.DockerFile</h2><h3 id="5-1-Docker镜像的构建步骤"><a href="#5-1-Docker镜像的构建步骤" class="headerlink" title="5.1.Docker镜像的构建步骤"></a>5.1.Docker镜像的构建步骤</h3><ul><li>编写一个dockerfile文件。</li><li><code>docker build</code>构建成为一个镜像。</li><li><code>docker run</code>运行镜像。</li><li><code>docker push</code>发布镜像（Docker Hub、阿里云镜像）。</li></ul><h3 id="5-2-DockerFile构建过程"><a href="#5-2-DockerFile构建过程" class="headerlink" title="5.2.DockerFile构建过程"></a>5.2.DockerFile构建过程</h3><h4 id="5-2-1-基础知识"><a href="#5-2-1-基础知识" class="headerlink" title="5.2.1.基础知识"></a>5.2.1.基础知识</h4><ul><li>每个保留关键字（指令）都是必须大写字母。</li><li>执行从上到下顺序执行。</li><li>#表示注释。</li><li>每一个指令都会创建提交一个新的镜像层，并提交。</li></ul><p><img src="/anubis-blogs/markdownimages/Docker/7.png" alt="dockerfile指令分层"></p><p>dockerfile是面向开发的，我们以后要发布项目，做镜像，就要编写dockerfile文件，这个文件十分简单！</p><p>Docker镜像主键成为企业交付的标准，必须掌握！</p><h4 id="5-2-2-DockerFile、镜像和容器的关系"><a href="#5-2-2-DockerFile、镜像和容器的关系" class="headerlink" title="5.2.2.DockerFile、镜像和容器的关系"></a>5.2.2.DockerFile、镜像和容器的关系</h4><p>DockerFile：构建文件，定义了一切的步骤，相当于源代码。</p><p>DockerImages：通过DockerFile生成的镜像，最终发布和运行的产品。</p><p>DockerContainer：容器就是镜像运行起来提供服务的。</p><h3 id="5-3-DockerFile指令"><a href="#5-3-DockerFile指令" class="headerlink" title="5.3.DockerFile指令"></a>5.3.DockerFile指令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM                       <span class="token comment"># 基础镜像，一切从这里开始构建</span>MAINTAINER                 <span class="token comment"># 镜像是谁写的，姓名+邮箱</span>RUN                        <span class="token comment"># 镜像构建的时候需要运行的命令</span>ADD                        <span class="token comment"># 添加内容(自动解压)</span>WORKDIR                    <span class="token comment"># 镜像的工作目录</span>VOLUME                     <span class="token comment"># 容器卷的挂载位置</span>EXPOSE                     <span class="token comment"># 暴露端口</span>CMD                        <span class="token comment"># 指定容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span>ENTRYPOINT                 <span class="token comment"># 指定容器启动的时候要运行的命令，可以追加命令</span>ONBUILD                    <span class="token comment"># 当构建一个被继承 DockerFile 这个时候就会运行ONBUILD指令</span>COPY                       <span class="token comment"># 类似ADD，将文件拷贝到镜像中</span>ENV                        <span class="token comment"># 构建的时候设置环境变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-实战：创建一个自己的CentOS"><a href="#5-4-实战：创建一个自己的CentOS" class="headerlink" title="5.4.实战：创建一个自己的CentOS"></a>5.4.实战：创建一个自己的CentOS</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、编写dockerfile文件</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># vim dockerfile-centos</span>FROM centosMAINTAINER mingyu<span class="token operator">&lt;</span><span class="token number">1790210727</span>@qq.com<span class="token operator">></span>ENV MYPATH /usr/localWORKDIR <span class="token variable">$MYPATH</span>RUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">vim</span>RUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> net-toolsEXPOSE <span class="token number">80</span>CMD <span class="token builtin class-name">echo</span> <span class="token variable">$MYPATH</span>CMD <span class="token builtin class-name">echo</span> <span class="token string">"---end---"</span>CMD /bin/bash<span class="token comment"># 2、docker build构建镜像</span><span class="token comment"># 语法：docker build -f dockerfile文件路径 -t 镜像名:版本号 .</span><span class="token function">docker</span> build <span class="token parameter variable">-f</span> dockerfile-centos <span class="token parameter variable">-t</span> mingyu/centos:2.0 <span class="token builtin class-name">.</span><span class="token comment"># 3、查看我们自己构建的镜像</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED              SIZEmingyu/centos       <span class="token number">2.0</span>                 bab722ff73fc        About a minute ago   287MB<span class="token comment"># 4、测试运行</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> mycentos mingyu/centos:2.0<span class="token comment"># 原生的CentOS并没有vim和ifconfig命令，我们自己构建的CentOS是可以用的！</span><span class="token comment"># 5、docker history 可以查看镜像的构建步骤</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># docker history mingyu/centos:2.0</span>IMAGE               CREATED             CREATED BY                                      SIZE               bab722ff73fc        <span class="token number">8</span> minutes ago       /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop)  CMD ["/bin/sh" "-c" "/bin…   0B                 </span>84744206026b        <span class="token number">8</span> minutes ago       /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop)  CMD ["/bin/sh" "-c" "echo…   0B                 </span>1da4606efdce        <span class="token number">8</span> minutes ago       /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop)  CMD ["/bin/sh" "-c" "echo…   0B                 </span>cd5031824201        <span class="token number">8</span> minutes ago       /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop)  EXPOSE 80                    0B                 </span>773c8a4d5a68        <span class="token number">8</span> minutes ago       /bin/sh <span class="token parameter variable">-c</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> net-tools             <span class="token number">14</span>.3MB             023728153f3b        <span class="token number">8</span> minutes ago       /bin/sh <span class="token parameter variable">-c</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">vim</span>                   <span class="token number">57</span>.1MB             72a357865b33        <span class="token number">8</span> minutes ago       /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop) WORKDIR /usr/local            0B                 </span>c248625c78e6        <span class="token number">8</span> minutes ago       /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop)  ENV MYPATH=/usr/local        0B                 </span>6fb94cf1eadc        <span class="token number">8</span> minutes ago       /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop)  MAINTAINER mingyu&lt;1466637…   0B                 </span>831691599b88        <span class="token number">10</span> days ago         /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop)  CMD ["/bin/bash"]            0B                 </span><span class="token operator">&lt;</span>missing<span class="token operator">></span>           <span class="token number">10</span> days ago         /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop)  LABEL org.label-schema.sc…   0B                 </span><span class="token operator">&lt;</span>missing<span class="token operator">></span>           <span class="token number">10</span> days ago         /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop) ADD file:84700c11fcc969ac0…   215MB    </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5-CMD和ENTRYPOINT"><a href="#5-5-CMD和ENTRYPOINT" class="headerlink" title="5.5.CMD和ENTRYPOINT"></a>5.5.CMD和ENTRYPOINT</h3><blockquote><p>测试CMD</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CMD                        <span class="token comment"># 指定容器启动的时候要运行的命令，只有最后一个CMD会生效，可被替代</span>ENTRYPOINT                 <span class="token comment"># 指定容器启动的时候要运行的命令，可以追加命令</span><span class="token comment"># 1、写dockerfile文件</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># vim dockerfile-cmd-test</span>FROM centosCMD <span class="token punctuation">[</span><span class="token string">"ls"</span>,<span class="token string">"-a"</span><span class="token punctuation">]</span><span class="token comment"># 2、构建测试镜像</span><span class="token function">docker</span> build <span class="token parameter variable">-f</span> dockerfile-cmd-test <span class="token parameter variable">-t</span> test/cmd:1.0 <span class="token builtin class-name">.</span><span class="token comment"># 3、查看构建好的镜像</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEtest/cmd            <span class="token number">1.0</span>                 df29f1d322e7        <span class="token number">4</span> minutes ago       215MB<span class="token comment"># 4、启动测试镜像 发现我们ls -a命令生效</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># docker run -it --name test-cmd test/cmd:1.0</span><span class="token builtin class-name">.</span>   .dockerenvdev  home  lib64       media  opt   root  sbinsys  usr<span class="token punctuation">..</span>  binetc  lib   lost+found  mnt    proc  run   srvtmp  var<span class="token comment"># 5、测试追加命令 结果失败 o(╥﹏╥)o</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># docker run -it --name test-cmd test/cmd:1.0 -l</span>docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused <span class="token string">"exec: <span class="token entity" title="\&quot;">\"</span>-l<span class="token entity" title="\&quot;">\"</span>: executable file not found in <span class="token environment constant">$PATH</span>"</span><span class="token builtin class-name">:</span> unknown.<span class="token comment"># 6、原因：用CMD的情况下 -l 替换了 CMD ["ls","-a"]，-l不是命令所以就报错了！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>测试ENTRYPOINT</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CMD                        <span class="token comment"># 指定容器启动的时候要运行的命令，只有最后一个CMD会生效，可被替代</span>ENTRYPOINT                 <span class="token comment"># 指定容器启动的时候要运行的命令，可以追加命令</span><span class="token comment"># 1、写dockerfile文件</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># vim dockerfile-entrypoint-test</span>FROM centosENTRYPOINT <span class="token punctuation">[</span><span class="token string">"ls"</span>,<span class="token string">"-a"</span><span class="token punctuation">]</span><span class="token comment"># 2、构建测试镜像</span><span class="token function">docker</span> build <span class="token parameter variable">-f</span> dockerfile-entrypoint-test <span class="token parameter variable">-t</span> test/entrypoint:1.0 <span class="token builtin class-name">.</span><span class="token comment"># 3、查看构建好的镜像</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEtest/entrypoint     <span class="token number">1.0</span>                 6ede8cb2383f        <span class="token number">31</span> seconds ago      215MB<span class="token comment"># 4、启动测试镜像 发现我们ls -a命令生效</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># docker run --name test-entrypoint -it test/entrypoint:1.0</span><span class="token builtin class-name">.</span>   .dockerenvdev  home  lib64       media  opt   root  sbinsys  usr<span class="token punctuation">..</span>  binetc  lib   lost+found  mnt    proc  run   srvtmp  var<span class="token comment"># 5、测试追加命令 成功了 (*^▽^*)</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># docker run --name test-entrypoint1 -it test/entrypoint:1.0 -l</span>total <span class="token number">56</span>drwxr-xr-x  <span class="token number">1</span> root root <span class="token number">4096</span> Jun <span class="token number">27</span> 05:58 <span class="token builtin class-name">.</span>drwxr-xr-x  <span class="token number">1</span> root root <span class="token number">4096</span> Jun <span class="token number">27</span> 05:58 <span class="token punctuation">..</span>-rwxr-xr-x  <span class="token number">1</span> root root    <span class="token number">0</span> Jun <span class="token number">27</span> 05:58 .dockerenvlrwxrwxrwx  <span class="token number">1</span> root root    <span class="token number">7</span> May <span class="token number">11</span>  <span class="token number">2019</span> bin -<span class="token operator">></span> usr/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-6-实战：Tomcat镜像"><a href="#5-6-实战：Tomcat镜像" class="headerlink" title="5.6.实战：Tomcat镜像"></a>5.6.实战：Tomcat镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、准备jdk压缩包和tomcat压缩包</span>jdk-8u251-linux-x64.tar.gzapache-tomcat-9.0.36.tar.gz<span class="token comment"># 2、编写dockerfile文件</span>FROM centosMAINTAINER mingyu<span class="token operator">&lt;</span><span class="token number">1790210727</span>@qq.com<span class="token operator">></span>ADD /opt/java/jdk-8u251-linux-x64.tar.gz /usr/local/ADD /opt/tomcat/apache-tomcat-9.0.36.tar.gz /usr/local/RUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">vim</span>ENV MYPATH /usr/localWORKDIR <span class="token variable">$MYPATH</span>ENV JAVA_HOME /usr/local/jdk1.8.0_251ENV CLASSPATH <span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jarENV CATALINA_HOME /usr/local/apache-tomcat-9.0.36ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.36ENV <span class="token environment constant">PATH</span> <span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$CATALINA_HOME</span>/lib:<span class="token variable">$CATALINA_HOME</span>/binEXPOSE <span class="token number">8080</span>CMD /usr/local/apache-tomcat-9.0.36/bin/startup.sh <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-7-小结"><a href="#5-7-小结" class="headerlink" title="5.7.小结"></a>5.7.小结</h3><p><img src="/anubis-blogs/markdownimages/Docker/7.png" alt="docker流程"></p><h2 id="6-Docker网络"><a href="#6-Docker网络" class="headerlink" title="6.Docker网络"></a>6.Docker网络</h2><h3 id="6-1-理解Docker网络"><a href="#6-1-理解Docker网络" class="headerlink" title="6.1.理解Docker网络"></a>6.1.理解Docker网络</h3><blockquote><p>查看网络环境</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@mingyu tomcat<span class="token punctuation">]</span><span class="token comment"># ifconfig</span>docker0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet <span class="token number">172.18</span>.0.1  netmask <span class="token number">255.255</span>.0.0  broadcast <span class="token number">172.18</span>.255.255        ether 02:42:f4:c7:a9:d2  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">615374</span>  bytes <span class="token number">214760761</span> <span class="token punctuation">(</span><span class="token number">204.8</span> MiB<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">1059269</span>  bytes <span class="token number">132175026</span> <span class="token punctuation">(</span><span class="token number">126.0</span> MiB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>eth0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet <span class="token number">172.17</span>.95.30  netmask <span class="token number">255.255</span>.240.0  broadcast <span class="token number">172.17</span>.95.255        ether 00:16:3e:34:40:89  txqueuelen <span class="token number">1000</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">1358134</span>  bytes <span class="token number">713636205</span> <span class="token punctuation">(</span><span class="token number">680.5</span> MiB<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">1049543</span>  bytes <span class="token number">319209059</span> <span class="token punctuation">(</span><span class="token number">304.4</span> MiB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>lo: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">7</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,LOOPBACK,RUNNING<span class="token operator">></span>  mtu <span class="token number">65536</span>        inet <span class="token number">127.0</span>.0.1  netmask <span class="token number">255.0</span>.0.0        loop  txqueuelen <span class="token number">1</span>  <span class="token punctuation">(</span>Local Loopback<span class="token punctuation">)</span>        RX packets <span class="token number">1387986</span>  bytes <span class="token number">260874723</span> <span class="token punctuation">(</span><span class="token number">248.7</span> MiB<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">1387986</span>  bytes <span class="token number">260874723</span> <span class="token punctuation">(</span><span class="token number">248.7</span> MiB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>docker0</code>：docker的地址。</li><li><code>lo</code>：本机地址。</li><li><code>eth0</code>：阿里云内网地址。</li></ul><blockquote><p>原理</p></blockquote><ul><li>我们只要安装了docker就会安装一个网卡docker0，每启动一个docker容器，docker就会给docker容器分配一个ip ,桥接模式。</li><li>启动的容器带来的网卡都是一对对的。</li><li><code>veth-pair</code>技术就是一对虚拟设备接口，他们都是成对出现的，一端连着协议，一端彼此相连。</li><li>正因为有<code>veth-pair</code>的特性，<code>veth-pair</code>可以充当桥梁，连接各种虚拟网络设备。</li></ul><p><img src="/anubis-blogs/markdownimages/Docker/9.png" alt="docker网络"></p><h3 id="6-2-查看Docker网络"><a href="#6-2-查看Docker网络" class="headerlink" title="6.2.查看Docker网络"></a>6.2.查看Docker网络</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、docker network ls 查看所有的docker网络</span><span class="token punctuation">[</span>root@mingyu ~<span class="token punctuation">]</span><span class="token comment"># docker network ls</span>NETWORK ID          NAME                DRIVER              SCOPE8ae116b000e5        bridge              bridge              <span class="token builtin class-name">local</span>18feddce366c        <span class="token function">host</span>                <span class="token function">host</span>                <span class="token builtin class-name">local</span>5cfab10d71d0        none                null                <span class="token builtin class-name">local</span><span class="token comment"># 2、查看具体的docker网络信息</span><span class="token function">docker</span> network inspect <span class="token punctuation">[</span>NETWORK ID<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-自定义网络"><a href="#6-3-自定义网络" class="headerlink" title="6.3.自定义网络"></a>6.3.自定义网络</h3><h4 id="6-3-1-网络模式"><a href="#6-3-1-网络模式" class="headerlink" title="6.3.1.网络模式"></a>6.3.1.网络模式</h4><ul><li><code>bridge</code>：桥接模式（默认，自定义网络也用桥接模式）。</li><li><code>none</code>：不配网络，一般不用。</li><li><code>host</code>：主机模式，和宿主机共享网络。</li><li><code>container</code>：容器间直接连通（用的少）。</li></ul><h4 id="6-3-2-创建网络"><a href="#6-3-2-创建网络" class="headerlink" title="6.3.2.创建网络"></a>6.3.2.创建网络</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、我们直接启动的命令 --net bridge，这个就是我们的docker0</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> p <span class="token parameter variable">--name</span> tomcat01 <span class="token parameter variable">--net</span> bridge tomcat<span class="token comment"># 2、docker0特点：默认，域名不能访问</span><span class="token comment"># 3、自定义网络</span><span class="token comment"># --driver网络模式</span><span class="token comment"># --subnet子网掩码</span><span class="token comment"># --gateway默认网关</span><span class="token function">docker</span> network create <span class="token parameter variable">--driver</span> bridge <span class="token parameter variable">--subnet</span> <span class="token number">192.168</span>.0.0/16 <span class="token parameter variable">--gateway</span> <span class="token number">192.168</span>.0.1 mynetwork<span class="token comment"># 4、查看自己创建的网络</span><span class="token punctuation">[</span>root@mingyu ~<span class="token punctuation">]</span><span class="token comment"># docker network ls</span>NETWORK ID          NAME                DRIVER              SCOPE8ae116b000e5        bridge              bridge              <span class="token builtin class-name">local</span>18feddce366c        <span class="token function">host</span>                <span class="token function">host</span>                <span class="token builtin class-name">local</span>625963e16231        mynetwork           bridge              <span class="token builtin class-name">local</span>5cfab10d71d0        none                null                <span class="token builtin class-name">local</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-3-自定义网络的好处"><a href="#6-3-3-自定义网络的好处" class="headerlink" title="6.3.3.自定义网络的好处"></a>6.3.3.自定义网络的好处</h4><ul><li><p>使用docker0网络，容器和容器之间只能通过IP地址来ping通，不能使用容器名字来ping。</p></li><li><p>我们自定义网络，容器之间不仅可以使用IP地址来通信，而且可以使用容器名字来通信。</p></li><li><p>不同的集群可以使用不同的网络，保证集群式安全和健康的。</p></li></ul><h3 id="6-4-网络联通"><a href="#6-4-网络联通" class="headerlink" title="6.4.网络联通"></a>6.4.网络联通</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker network connect</span><span class="token punctuation">[</span>root@mingyu ~<span class="token punctuation">]</span><span class="token comment"># docker network --help</span>Usage:<span class="token function">docker</span> network COMMANDManage networksCommands:  connect     Connect a container to a network<span class="token comment"># docker network connect 语法</span><span class="token function">docker</span> network connect NETWORK CONTAINER<span class="token comment"># 联通之后就是将CONTAINER放到了NETWORK下</span><span class="token comment"># 一个容器两个IP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-SpringBoot微服务打包成镜像"><a href="#7-SpringBoot微服务打包成镜像" class="headerlink" title="7.SpringBoot微服务打包成镜像"></a>7.SpringBoot微服务打包成镜像</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、构建SpringBoot项目。</span><span class="token comment"># 2、打包应用。</span><span class="token comment"># 3、编写dockerfile。</span>FROM java:8EXPOSE <span class="token number">8080</span>VOLUME /tmpADD renren-fast.jar  /app.jarRUN <span class="token function">bash</span> <span class="token parameter variable">-c</span> <span class="token string">'touch /app.jar'</span>ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"java"</span>,<span class="token string">"-jar"</span>,<span class="token string">"/app.jar"</span><span class="token punctuation">]</span><span class="token comment"># 4、将Dockerfile和jar上传到服务器上同一层目录下</span><span class="token comment"># 5、构建镜像</span><span class="token function">docker</span> build <span class="token parameter variable">-f</span> Dockerfile <span class="token parameter variable">-t</span> mingyu/renren-fast:1.0 <span class="token builtin class-name">.</span><span class="token comment"># 6、启动镜像</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> renren-fast <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /root/idea/renren-fast/tmp:/tmp <span class="token punctuation">\</span><span class="token parameter variable">-d</span> mingyu/renren-fast:1.0<span class="token comment"># 7、访问服务器地址</span>http://xxx.xxx.xxx.xxx:8080/renren-fast/sys/user/info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-f</span> Dockerfile <span class="token parameter variable">-t</span> vhr-web:1.0 <span class="token builtin class-name">.</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> vhr-web <span class="token parameter variable">-p</span> <span class="token number">8001</span>:8001 <span class="token parameter variable">-d</span> vhr-web:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
