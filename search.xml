<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux 笔记</title>
      <link href="/2024/07/10/Linux%20%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/07/10/Linux%20%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-笔记"><a href="#Linux-笔记" class="headerlink" title="Linux 笔记"></a>Linux 笔记</h1><h2 id="1-服务无响应"><a href="#1-服务无响应" class="headerlink" title="1.服务无响应"></a>1.服务无响应</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 接口调用返时出现ECONNRESET,那么应该是监听端口的全连接队列满了,系统无法接受新</span><span class="token function">netstat</span> -ano<span class="token operator">|</span><span class="token function">grep</span> <span class="token operator">&lt;</span>PROT<span class="token operator">></span> <span class="token operator">|</span> <span class="token function">grep</span> LISTEN<span class="token function">netstat</span> -ano<span class="token operator">|</span><span class="token function">grep</span> <span class="token number">11008</span> <span class="token operator">|</span> <span class="token function">grep</span> LISTEN<span class="token number">11007</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-链接数"><a href="#2-链接数" class="headerlink" title="2.链接数"></a>2.链接数</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 输出每个ip的连接数，以及总的各个状态的连接数</span><span class="token function">netstat</span> <span class="token parameter variable">-n</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'/^tcp/ &#123;n=split($(NF-1),array,":");if(n&lt;=2)++S[array[(1)]];else++S[array[(4)]];++s[$NF];++N&#125; END &#123;for(a in S)&#123;printf("%-20s %s\n", a, S[a]);++I&#125;printf("%-20s %s\n","TOTAL_IP",I);for(a in s) printf("%-20s %s\n",a, s[a]);printf("%-20s %s\n","TOTAL_LINK",N);&#125;'</span><span class="token comment"># 统计所有连接状态, </span><span class="token comment"># CLOSED：无连接是活动的或正在进行</span><span class="token comment"># LISTEN：服务器在等待进入呼叫</span><span class="token comment"># SYN_RECV：一个连接请求已经到达，等待确认</span><span class="token comment"># SYN_SENT：应用已经开始，打开一个连接</span><span class="token comment"># ESTABLISHED：正常数据传输状态</span><span class="token comment"># FIN_WAIT1：应用说它已经完成</span><span class="token comment"># FIN_WAIT2：另一边已同意释放</span><span class="token comment"># ITMED_WAIT：等待所有分组死掉</span><span class="token comment"># CLOSING：两边同时尝试关闭</span><span class="token comment"># TIME_WAIT：主动关闭连接一端还没有等到另一端反馈期间的状态</span><span class="token comment"># LAST_ACK：等待所有分组死掉</span>p s znetstat <span class="token parameter variable">-n</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'/^tcp/ &#123;++state[$NF]&#125; END &#123;for(key in state) print key,"\t",state[key]&#125;'</span><span class="token comment"># 查找较多time_wait连接</span><span class="token function">netstat</span> -n<span class="token operator">|</span><span class="token function">grep</span> TIME_WAIT<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;print $5&#125;'</span><span class="token operator">|</span><span class="token function">sort</span><span class="token operator">|</span><span class="token function">uniq</span> -c<span class="token operator">|</span><span class="token function">sort</span> -rn<span class="token operator">|</span><span class="token function">head</span> <span class="token parameter variable">-n20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-iostat-磁盘IO情况监控"><a href="#3-iostat-磁盘IO情况监控" class="headerlink" title="3.iostat(磁盘IO情况监控)"></a>3.iostat(磁盘IO情况监控)</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iostat <span class="token parameter variable">-xz</span> <span class="token number">1</span> <span class="token comment"># r/s, w/s, rkB/s, wkB/s：分别表示每秒读写次数和每秒读写数据量（千字节）。读写量过大，可能会引起性能问题。</span><span class="token comment"># await：IO操作的平均等待时间，单位是毫秒。这是应用程序在和磁盘交互时，需要消耗的时间，包括IO等待和实际操作的耗时。如果这个数值过大，可能是硬件设备遇到了瓶颈或者出现故障。</span><span class="token comment"># avgqu-sz：向设备发出的请求平均数量。如果这个数值大于1，可能是硬件设备已经饱和（部分前端硬件设备支持并行写入）。</span><span class="token comment"># %util：设备利用率。这个数值表示设备的繁忙程度，经验值是如果超过60，可能会影响IO性能（可以参照IO操作平均等待时间）。如果到达100%，说明硬件设备已经饱和。</span><span class="token comment"># 如果显示的是逻辑设备的数据，那么设备利用率不代表后端实际的硬件设备已经饱和。值得注意的是，即使IO性能不理想，也不一定意味这应用程序性能会不好，可以利用诸如预读取、写缓存等策略提升应用性能。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-free-内存使用情况"><a href="#4-free-内存使用情况" class="headerlink" title="4.free(内存使用情况)"></a>4.free(内存使用情况)</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">free</span> <span class="token parameter variable">-m</span> eg:      total       used       <span class="token function">free</span>     shared    buffers     cachedMem:          <span class="token number">1002</span>        <span class="token number">769</span>        <span class="token number">232</span>          <span class="token number">0</span>         <span class="token number">62</span>        <span class="token number">421</span>-/+ buffers/cache:          <span class="token number">286</span>        <span class="token number">715</span>Swap:          <span class="token number">1153</span>          <span class="token number">0</span>       <span class="token number">1153</span> 第一部分Mem行:total 内存总数: 1002Mused 已经使用的内存数: 769M<span class="token function">free</span> 空闲的内存数: 232Mshared 当前已经废弃不用,总是0buffers Buffer 缓存内存数: 62Mcached Page 缓存内存数:421M 关系：total<span class="token punctuation">(</span>1002M<span class="token punctuation">)</span> <span class="token operator">=</span> used<span class="token punctuation">(</span>769M<span class="token punctuation">)</span> + free<span class="token punctuation">(</span>232M<span class="token punctuation">)</span> 第二部分<span class="token punctuation">(</span>-/+ buffers/cache<span class="token punctuation">)</span>:<span class="token punctuation">(</span>-buffers/cache<span class="token punctuation">)</span> used内存数：286M <span class="token punctuation">(</span>指的第一部分Mem行中的used – buffers – cached<span class="token punctuation">)</span><span class="token punctuation">(</span>+buffers/cache<span class="token punctuation">)</span> free内存数: 715M <span class="token punctuation">(</span>指的第一部分Mem行中的free + buffers + cached<span class="token punctuation">)</span> 可见-buffers/cache反映的是被程序实实在在吃掉的内存,而+buffers/cache反映的是可以挪用的内存总数. 第三部分是指交换分区<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-vmstat-给定时间监控CPU使用率-内存使用-虚拟内存交互-IO读写"><a href="#5-vmstat-给定时间监控CPU使用率-内存使用-虚拟内存交互-IO读写" class="headerlink" title="5.vmstat(给定时间监控CPU使用率, 内存使用, 虚拟内存交互, IO读写)"></a>5.vmstat(给定时间监控CPU使用率, 内存使用, 虚拟内存交互, IO读写)</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 2表示每2秒采集一次状态信息, 1表示只采集一次(忽略既是一直采集)</span><span class="token function">vmstat</span> <span class="token number">2</span> <span class="token number">1</span> eg:r b swpd <span class="token function">free</span> buff cache si so bi bo <span class="token keyword">in</span> cs us sy <span class="token function">id</span> wa<span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">3499840</span> <span class="token number">315836</span> <span class="token number">3819660</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">100</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">3499584</span> <span class="token number">315836</span> <span class="token number">3819660</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">88</span> <span class="token number">158</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">100</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">3499708</span> <span class="token number">315836</span> <span class="token number">3819660</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">86</span> <span class="token number">162</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">100</span> <span class="token number">0</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">3499708</span> <span class="token number">315836</span> <span class="token number">3819660</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">10</span> <span class="token number">81</span> <span class="token number">151</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">100</span> <span class="token number">0</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">3499732</span> <span class="token number">315836</span> <span class="token number">3819660</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">83</span> <span class="token number">154</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">100</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>r 表示运行队列(就是说多少个进程真的分配到CPU)，我测试的服务器目前CPU比较空闲，没什么程序在跑，当这个值超过了CPU数目，就会出现CPU瓶颈了。这个也和top的负载有关系，一般负载超过了3就比较高，超过了5就高，超过了10就不正常了，服务器的状态很危险。top的负载类似每秒的运行队列。如果运行队列过大，表示你的CPU很繁忙，一般会造成CPU使用率很高。</li><li>b 表示阻塞的进程,这个不多说，进程阻塞，大家懂的。</li><li>swpd 虚拟内存已使用的大小，如果大于0，表示你的机器物理内存不足了，如果不是程序内存泄露的原因，那么你该升级内存了或者把耗内存的任务迁移到其他机器。</li><li>free 空闲的物理内存的大小，我的机器内存总共8G，剩余3415M。</li><li>buff Linux&#x2F;Unix系统是用来存储，目录里面有什么内容，权限等的缓存，我本机大概占用300多M</li><li>cache cache直接用来记忆我们打开的文件,给文件做缓冲，我本机大概占用300多M(这里是Linux&#x2F;Unix的聪明之处，把空闲的物理内存的一部分拿来做文件和目录的缓存，是为了提高 程序执行的性能，当程序使用内存时，buffer&#x2F;cached会很快地被使用。)</li><li>si 每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用或者内存泄露了，要查找耗内存进程解决掉。我的机器内存充裕，一切正常。</li><li>so 每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上。</li><li>bi 块设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备，默认块大小是1024byte，我本机上没什么IO操作，所以一直是0，但是我曾在处理拷贝大量数据(2-3T)的机器上看过可以达到140000&#x2F;s，磁盘写入速度差不多140M每秒。</li><li>bo 块设备每秒发送的块数量，例如我们读取文件，bo就要大于0。bi和bo一般都要接近0，不然就是IO过于频繁，需要调整。</li><li>in 每秒CPU的中断次数，包括时间中断。</li><li>cs 每秒上下文切换次数，例如我们调用系统函数，就要进行上下文切换，线程的切换，也要进程上下文切换，这个值要越小越好，太大了，要考虑调低线程或者进程的数目,例如在apache和nginx这种web服务器中，我们一般做性能测试时会进行几千并发甚至几万并发的测试，选择web服务器的进程可以由进程或者线程的峰值一直下调，压测，直到cs到一个比较小的值，这个进程和线程数就是比较合适的值了。系统调用也是，每次调用系统函数，我们的代码就会进入内核空间，导致上下文切换，这个是很耗资源，也要尽量避免频繁调用系统函数。上下文切换次数过多表示你的CPU大部分浪费在上下文切换，导致CPU干正经事的时间少了，CPU没有充分利用，是不可取的。</li><li>us 用户CPU时间，我曾经在一个做加密解密很频繁的服务器上，可以看到us接近100,r运行队列达到80(机器在做压力测试，性能表现不佳)。</li><li>sy 系统CPU时间，如果太高，表示系统调用时间长，例如是IO操作频繁。</li><li>id 空闲 CPU时间，一般来说，id + us + sy &#x3D; 100,一般我认为id是空闲CPU使用率，us是用户CPU使用率，sy是系统CPU使用率。</li><li>wt 等待IO CPU时间。</li></ul><h2 id="6-sar-CPU-网络-内存-I-O"><a href="#6-sar-CPU-网络-内存-I-O" class="headerlink" title="6.sar(CPU,网络,内存,I&#x2F;O)"></a>6.sar(CPU,网络,内存,I&#x2F;O)</h2><h3 id="a-网络吞吐"><a href="#a-网络吞吐" class="headerlink" title="a.网络吞吐"></a>a.网络吞吐</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sar命令在这里可以查看网络设备的吞吐率。在排查性能问题时，可以通过网络设备的吞吐量，判断网络设备是否已经饱和</span>sar <span class="token parameter variable">-n</span> DEV <span class="token number">1</span> <span class="token comment"># sar命令在这里用于查看TCP连接状态，其中包括：</span><span class="token comment"># active/s：每秒本地发起的TCP连接数，既通过connect调用创建的TCP连接；</span><span class="token comment"># passive/s：每秒远程发起的TCP连接数，即通过accept调用创建的TCP连接；</span><span class="token comment"># retrans/s：每秒TCP重传数量；</span><span class="token comment"># TCP连接数可以用来判断性能问题是否由于建立了过多的连接，进一步可以判断是主动发起的连接，还是被动接受的连接。TCP重传可能是因为网络环境恶劣，或者服务器压力过大导致丢包</span>sar <span class="token parameter variable">-n</span> TCP,ETCP <span class="token number">1</span><span class="token comment"># 网络统计(-n)命令：</span>sar <span class="token parameter variable">-n</span> <span class="token number">2</span> <span class="token number">3</span><span class="token comment"># IFACE: 网络接口名称</span><span class="token comment"># rxpck/s: 每秒收包的数量</span><span class="token comment"># txpck/s: 每秒发包的数量</span><span class="token comment"># rxkB/s: 每秒收的数据量(kB为单位)</span><span class="token comment"># txkB/s: 每秒发的数据量(kB为单位)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="b-CPU监控"><a href="#b-CPU监控" class="headerlink" title="b.CPU监控"></a>b.CPU监控</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 整体CPU使用统计(-u)命令：</span>sar  <span class="token parameter variable">-u</span>  <span class="token number">1</span>  <span class="token number">2</span>    <span class="token comment">#（1代表采集时间，2代表采集次数）</span><span class="token comment"># %user: 用户态下CPU使用时间比率</span><span class="token comment"># %system: 内核态下CPU使用时间比率</span><span class="token comment"># %iowait: CPU等待I/O占用时间比率</span><span class="token comment"># %idle: CPU空闲时间比率</span><span class="token comment"># 各个CPU使用统计(-P)命令：</span>sar <span class="token parameter variable">-p</span> ALL <span class="token number">1</span> <span class="token number">1</span><span class="token comment"># %user: 用户态下CPU使用时间比率</span><span class="token comment"># %system: 内核态下CPU使用时间比率</span><span class="token comment"># %iowait: CPU等待I/O占用时间比率</span><span class="token comment"># %idle: CPU空闲时间比率</span><span class="token comment"># 查看cpu 使用率 </span>sar <span class="token parameter variable">-P</span> ALL <span class="token parameter variable">-u</span> <span class="token number">2</span> <span class="token number">2</span>08:21:16 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle08:21:18 PM     all      <span class="token number">2.25</span>      <span class="token number">0.00</span>     <span class="token number">48.25</span>      <span class="token number">0.00</span>      <span class="token number">0.00</span>     <span class="token number">49.50</span>08:21:18 PM       <span class="token number">0</span>      <span class="token number">0.50</span>      <span class="token number">0.00</span>      <span class="token number">1.00</span>      <span class="token number">0.00</span>      <span class="token number">0.00</span>     <span class="token number">98.51</span>08:21:18 PM       <span class="token number">1</span>      <span class="token number">4.02</span>      <span class="token number">0.00</span>     <span class="token number">95.98</span>      <span class="token number">0.00</span>      <span class="token number">0.00</span>      <span class="token number">0.00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="c-内存"><a href="#c-内存" class="headerlink" title="c.内存"></a>c.内存</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 内存使用情况统计(-r)：命令：</span>sar <span class="token parameter variable">-r</span> <span class="token number">1</span> <span class="token number">2</span><span class="token comment"># kbmemfree：空闲物理内存量；</span><span class="token comment"># kbmemused：使用中的物理内存量；</span><span class="token comment"># %memused：物理内存量使用率；</span><span class="token comment"># kbbuffers：内核中作为缓冲区使用的物理内存容量；</span><span class="token comment"># kbcacheed：内核中作为缓存使用的物理内存容量；</span><span class="token comment"># kbswpfree：交换区的空闲容量；</span><span class="token comment"># kbswpused：使用中的交换区容量；</span><span class="token comment"># kbmemfree与kbmemused字段分别显示内存的未使用与已使用空间，后面跟着的是已使用空间的百分比（%memused字段）。</span><span class="token comment"># kbbuffers与kbcached字段分别显示缓冲区与系统全域的数据存取量，单位为KB。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="d-I-O"><a href="#d-I-O" class="headerlink" title="d.I&#x2F;O"></a>d.I&#x2F;O</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 整体I/O情况(-b)命令：</span>sar <span class="token parameter variable">-b</span> <span class="token number">1</span> <span class="token number">2</span><span class="token comment"># tps: 每秒向磁盘设备请求数据的次数，包括读、写请求，为rtps与wtps的和。出于效率考虑，每一次IO下发后并不是立即处理请求，而是将请求合并(merge)，这里tps指请求合并后的请求计数。</span><span class="token comment"># rtps: 每秒向磁盘设备的读请求次数</span><span class="token comment"># wtps: 每秒向磁盘设备的写请求次数</span><span class="token comment"># bread: 每秒从磁盘读的bytes数量</span><span class="token comment"># bwrtn: 每秒向磁盘写的bytes数量</span><span class="token comment"># 各个I/O设备情况(-d)命令：</span>sar <span class="token parameter variable">-d</span> <span class="token number">1</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-perf-CPU"><a href="#7-perf-CPU" class="headerlink" title="7.perf(CPU)"></a>7.perf(CPU)</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> perfyum <span class="token function">install</span> sysstat systemctl start sysstatsystemctl <span class="token builtin class-name">enable</span> sysstat<span class="token comment"># 用 perf 工具采样：</span>perf record <span class="token parameter variable">-a</span> <span class="token parameter variable">-e</span> cycles <span class="token parameter variable">-o</span> cycle.perf <span class="token parameter variable">-g</span> <span class="token function">sleep</span> <span class="token number">10</span><span class="token comment"># [ perf record: Woken up 18 times to write data ]</span><span class="token comment"># [ perf record: Captured and wrote 4.953 MB cycle.perf (~216405 samples) ]</span><span class="token comment"># 注：”-a”表示对所有CPU采样，如果只需针对特定的CPU，可以使用”-C”选项。</span><span class="token comment"># 把采样的数据生成报告：</span>perf report <span class="token parameter variable">-i</span> cycle.perf <span class="token operator">|</span> <span class="token function">more</span><span class="token punctuation">..</span>.<span class="token comment"># Samples: 40K of event 'cycles'</span><span class="token comment"># Event count (approx.): 18491174032</span><span class="token comment">#</span><span class="token comment"># Overhead          Command                   Shared Object              Symbol</span><span class="token comment"># ........  ...............  ..............................    ................</span><span class="token comment">#</span>    <span class="token number">75.65</span>%              <span class="token function">cat</span>  <span class="token punctuation">[</span>kernel.kallsyms<span class="token punctuation">]</span>                 <span class="token punctuation">[</span>k<span class="token punctuation">]</span> __clear_user                                             <span class="token operator">|</span>                        --- __clear_user                           <span class="token operator">|</span>                                     <span class="token operator">|</span>--99.56%-- read_zero                           <span class="token operator">|</span>          vfs_read                           <span class="token operator">|</span>          sys_read                           <span class="token operator">|</span>          system_call_fastpath                           <span class="token operator">|</span>          __GI___libc_read                            --0.44%-- <span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>      <span class="token number">2.34</span>%              <span class="token function">cat</span>  <span class="token punctuation">[</span>kernel.kallsyms<span class="token punctuation">]</span>                 <span class="token punctuation">[</span>k<span class="token punctuation">]</span> system_call                                              <span class="token operator">|</span>                        --- system_call                           <span class="token operator">|</span>                                     <span class="token operator">|</span>--56.72%-- __write_nocancel                           <span class="token operator">|</span>                                      --43.28%-- __GI___libc_read<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-top-perf"><a href="#8-top-perf" class="headerlink" title="8.top &amp; perf:"></a>8.top &amp; perf:</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># top 的使用,top 命令也是Linux下的性能分析工具，能够实时显示系统中各个进程的资源占用状况。</span><span class="token comment"># 使用 perf 之前，可以先用 top 命令查看指定进程（xxx）的CPU占用率是否异常，命令如下：</span><span class="token function">top</span> <span class="token parameter variable">-p</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"xxx"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-c</span> <span class="token number">9</span>-15<span class="token variable">`</span></span><span class="token comment"># 上面命令的含义是通过 top 查看指定进程（xxx）的整体运行情况，其中，</span><span class="token function">top</span> -p：指定进程<span class="token function">top</span> <span class="token parameter variable">-d</span> <span class="token number">1</span>：指定屏幕刷新时间，1s刷新一次<span class="token function">top</span> -b：表示以批处理模式操作<span class="token function">ps</span> aux：列出所有进程grep：查找指定进程<span class="token function">grep</span> -v：反向查找<span class="token function">cut</span> <span class="token parameter variable">-c</span> <span class="token number">9</span>-15：选择每行指定列的字符<span class="token comment"># 4、perf 的使用</span><span class="token comment"># 使用 perf 进行性能分析，主要使用下面两个命令：</span><span class="token comment"># perf record：保存perf追踪的内容，文件名为perf.data</span><span class="token comment"># perf report：解析perf.data的内容</span><span class="token comment"># 比如要分析进程 xxx，启动该进程后，首先启动使用下面命令：</span><span class="token function">sudo</span> perf record <span class="token parameter variable">-a</span> --call-graph dwarf <span class="token parameter variable">-p</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"xxx"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-c</span> <span class="token number">9</span>-15<span class="token variable">`</span></span> <span class="token parameter variable">-d</span> <span class="token number">1</span> <span class="token parameter variable">-b</span>perf record <span class="token parameter variable">-g</span> XXX 对 XXX 程序的热点和调用栈进行采样其中，-a：表示对所有CPU采样--call-graph dward：表示分析调用栈的关系-p：表示分析指定的进程通过 Ctrl + C 结束后，会生成 perf.data 文件，然后通过 report 导出报告，即可以查看 main 函数和子函数的CPU平均占用率。<span class="token function">sudo</span> perf report <span class="token parameter variable">-i</span> perf.data <span class="token operator">></span> perf.txt<span class="token comment"># 已知PID 查看目录</span><span class="token function">lsof</span> <span class="token parameter variable">-p</span> PID <span class="token operator">|</span> <span class="token function">grep</span> cwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-高频："><a href="#9-高频：" class="headerlink" title="9.高频："></a>9.高频：</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">磁盘：df <span class="token operator">-</span>h网络：netstat <span class="token operator">-</span>nat <span class="token punctuation">|</span> awk <span class="token string">'&#123;print $6&#125;'</span> <span class="token punctuation">|</span> <span class="token function">sort</span> <span class="token punctuation">|</span> uniq <span class="token operator">-</span>c <span class="token punctuation">|</span> <span class="token function">sort</span> <span class="token operator">-</span>rn查看服务器长链接：netstat <span class="token operator">-</span>an <span class="token punctuation">|</span> grep 8080 <span class="token punctuation">|</span> wc <span class="token operator">-</span>lIO：iostat内存：free <span class="token operator">-</span>mCPU：top <span class="token operator">-</span>HpJVM：jstack（线程）、jmap（内存）、jstat（<span class="token function">GC</span>）其他工具：JVisual、MAT、arthas提取文件权限: sudo chmod <span class="token operator">+</span>777 文件路径名netstat <span class="token operator">-</span>tlnnetstat <span class="token operator">-</span>tln <span class="token punctuation">|</span> grep 9090<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-日志："><a href="#10-日志：" class="headerlink" title="10.日志："></a>10.日志：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> info.log <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-B100</span> <span class="token parameter variable">-A100</span> <span class="token string">'test'</span> <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">300</span> <span class="token function">cat</span> info.0.log <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-A2</span> <span class="token string">'test'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-A2</span> <span class="token string">'hello'</span><span class="token function">cat</span> info.0.log <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-n</span> <span class="token string">'test'</span><span class="token function">tail</span> <span class="token parameter variable">-100f</span> xx.logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-firewalld"><a href="#11-firewalld" class="headerlink" title="11.firewalld"></a>11.firewalld</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 防火墙是否关闭：</span>systemctl status firewalld<span class="token comment"># 关闭防火墙：</span>systemctl stop firewalld<span class="token comment"># 查看所有打开的端口： </span>firewall-cmd <span class="token operator">--</span>zone=public <span class="token operator">--</span>list-ports<span class="token comment"># 开放端口：</span>firewall-cmd <span class="token operator">--</span>zone=public <span class="token operator">--</span><span class="token function">add-port</span>=80/tcp <span class="token operator">--</span>permanent<span class="token comment"># 重载防火墙：</span>firewall-cmd <span class="token operator">--</span>reload<span class="token comment"># 防火墙关闭端口：</span>firewall-cmd <span class="token operator">--</span>zone=public <span class="token operator">--</span><span class="token function">remove-port</span>=80/tcp <span class="token operator">--</span>permanent<span class="token comment"># 查看端口占用情况</span>netstat <span class="token operator">-</span>anp <span class="token punctuation">|</span> grep 8080netstat <span class="token operator">-</span>tln <span class="token punctuation">|</span> grep 8080<span class="token comment"># 具体程序</span>lsof <span class="token operator">-</span>i :8080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-cmd"><a href="#12-cmd" class="headerlink" title="12.cmd"></a>12.cmd</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 查找端口</span>netstat <span class="token operator">-</span>aon<span class="token punctuation">|</span>findstr  8080<span class="token comment"># 停止进程</span>taskkill <span class="token operator">/</span>f <span class="token operator">/</span>im 14416<span class="token comment"># 参数可显示端口对应的pid</span>netstat <span class="token operator">-</span>o<span class="token comment"># -a即所有端口，-p指明使用的协议，udp即udp协议</span>netstat <span class="token operator">-</span>ao <span class="token operator">-</span>p udp<span class="token comment"># 查看42152 pid对应的进程名称</span>tasklist <span class="token punctuation">|</span> findstr <span class="token operator">/</span>i <span class="token string">"42152"</span> <span class="token comment"># 测试端口是否开放</span>telnet IP/域名 端口<span class="token comment"># 关机（win+r）</span>shutdown <span class="token operator">-</span>s <span class="token operator">-</span>t 3600 <span class="token comment"># 60min</span>shutdown <span class="token operator">-</span>s <span class="token operator">-</span>t 600    <span class="token comment"># 10min</span><span class="token comment"># 撤销</span>shutdown <span class="token operator">-</span>a <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-Docker"><a href="#13-Docker" class="headerlink" title="13.Docker :"></a>13.Docker :</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动Docker </span>systemctl start <span class="token function">docker</span> <span class="token comment">#查看是否启动 </span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token comment">#查看容器 </span><span class="token function">docker</span> images <span class="token function">sudo</span> <span class="token function">docker</span> container <span class="token function">ls</span> <span class="token comment"># 创建和启动容器 </span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-p</span> <span class="token number">27017</span>:27017 <span class="token parameter variable">--name</span> mymongo <span class="token parameter variable">-v</span> /data/db:/data/db <span class="token parameter variable">-d</span> mongo <span class="token comment"># 进入容器 </span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 0ccbb13c81ad  <span class="token function">bash</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mymongo/bin/bash <span class="token comment"># 退出容器</span>ctrl + P + Q<span class="token comment"># 时区</span><span class="token parameter variable">-v</span> /etc/localtime:/etc/localtime <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-Redis"><a href="#14-Redis" class="headerlink" title="14.Redis:"></a>14.Redis:</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 停止</span>redis-cli <span class="token parameter variable">-h</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">-p</span> <span class="token number">6379</span> <span class="token function">shutdown</span>redis-cli <span class="token parameter variable">-h</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">-p</span> <span class="token number">6379</span> <span class="token parameter variable">-u</span> <span class="token number">1999</span> <span class="token function">shutdown</span><span class="token function">kill</span> <span class="token parameter variable">-9</span> pid<span class="token comment"># 启动</span>redis-server /绝对路径/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-mongoDB"><a href="#15-mongoDB" class="headerlink" title="15.mongoDB:"></a>15.mongoDB:</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 使用MongoDB客户端进行操作 </span>mongo <span class="token comment">#查询所有的数据库</span>show dbs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-GitHub-搜索"><a href="#16-GitHub-搜索" class="headerlink" title="16.GitHub 搜索:"></a>16.GitHub 搜索:</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">in:name test               <span class="token comment">#仓库标题搜索含有关键字test</span>in:descripton test         <span class="token comment">#仓库描述搜索含有关键字</span>in:readme test             <span class="token comment">#Readme文件搜素含有关键字</span>stars:>3000 test           <span class="token comment">#stars数量大于3000的搜索关键字</span>stars:1000<span class="token punctuation">.</span><span class="token punctuation">.</span>3000 test      <span class="token comment">#stars数量大于1000小于3000的搜索关键字</span>forks:>1000 test           <span class="token comment">#forks数量大于1000的搜索关键字</span>forks:1000<span class="token punctuation">.</span><span class="token punctuation">.</span>3000 test      <span class="token comment">#forks数量大于1000小于3000的搜索关键字</span>size:>=5000 test           <span class="token comment">#指定仓库大于5000k(5M)的搜索关键字</span>pushed:>2019-02-12 test    <span class="token comment">#发布时间大于2019-02-12的搜索关键字</span>created:>2019-02-12 test   <span class="token comment">#创建时间大于2019-02-12的搜索关键字</span>user:test                  <span class="token comment">#用户名搜素</span>license:apache-2<span class="token punctuation">.</span>0 test    <span class="token comment">#明确仓库的 LICENSE 搜索关键字</span>language:java test         <span class="token comment">#在java语言的代码中搜索关键字</span>user:test in:name test     <span class="token comment">#组合搜索,用户名test的标题含有test的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-maven"><a href="#17-maven" class="headerlink" title="17.maven:"></a>17.maven:</h2><h3 id="a-命令"><a href="#a-命令" class="headerlink" title="a.命令"></a>a.命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn tomcat:run        <span class="token comment">#运行maven工程</span>mvn <span class="token parameter variable">-v</span>                <span class="token comment">#查看maven配置</span>mvn clean            <span class="token comment">#删除-->target目录    ---清理生命周期---</span><span class="token comment">##---||默认生命周期||---##</span>mvn compile           <span class="token comment">#编译出-->target目录    src\main</span>mvn text            <span class="token comment">#测试            src\test  &amp;&amp;  src\main</span>mvn package           <span class="token comment">#打包</span>mvn <span class="token function">install</span>          <span class="token comment">#打包&amp;安装到本地仓库</span>mvn deploy            <span class="token comment">#发布</span>mvn clean <span class="token function">install</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">-U</span>  <span class="token comment">#maven执行强制更新命令</span><span class="token comment"># VM Options </span><span class="token comment"># 配置完可忽略安全校验[一些依赖下载不到]</span><span class="token parameter variable">-Dmaven.wagon.http.ssl.insecure</span><span class="token operator">=</span>true <span class="token parameter variable">-Dmaven.wagon.http.ssl.allowall</span><span class="token operator">=</span>true<span class="token comment"># IDEA根据maven archetype的本质，其实是执行mvn archetype:generate命令，该命令执行时，需要指定一个archetype-catalog.xml文件。该命令的参数-DarchetypeCatalog，可选值为：remote，internal，local等，用来指定archetype-catalog.xml文件从哪里获取。</span><span class="token comment"># 优先从本地仓库获取[maven打包慢]</span><span class="token parameter variable">-DarchetypeCatalog</span><span class="token operator">=</span>internal<span class="token comment"># 控制台乱码</span><span class="token parameter variable">-Dfile.encoding</span><span class="token operator">=</span>GBK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="b-maven-上传私库："><a href="#b-maven-上传私库：" class="headerlink" title="b.maven 上传私库："></a>b.maven 上传私库：</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">mvn deploy:deploy-file <span class="token operator">-</span>DgroupId=com<span class="token punctuation">.</span>test <span class="token operator">-</span>DartifactId=<span class="token function">test-java</span> <span class="token operator">-</span>Dversion=0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1-SNAPSHOT <span class="token operator">-</span>Dpackaging=jar <span class="token operator">-</span>Dfile=<span class="token function">test-java</span><span class="token operator">-</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1-SNAPSHOT<span class="token punctuation">.</span>jar <span class="token operator">-</span>Durl=http:<span class="token operator">/</span><span class="token operator">/</span>admin:admin123@192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>1<span class="token punctuation">.</span><span class="token punctuation">.</span>7:8081/nexus/content/repositories/snapshots<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="18-JS脚本"><a href="#18-JS脚本" class="headerlink" title="18.JS脚本"></a>18.JS脚本</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// url javascript:</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".tab"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".setCode"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token number">123456</span><span class="token punctuation">;</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".submitBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// B站倍速</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'bwp-video'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>playbackRate<span class="token operator">=</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-nginx"><a href="#19-nginx" class="headerlink" title="19.nginx"></a>19.nginx</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#启动命令:</span><span class="token function">start</span> nginx<span class="token comment">#停止命令(直接退出):</span>nginx <span class="token operator">-</span>s stop <span class="token comment">#停止命令(保存并退出):</span>nginx <span class="token operator">-</span>s quit<span class="token comment">#重新加载配置文件:</span>nginx <span class="token operator">-</span>s reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="20-hexo"><a href="#20-hexo" class="headerlink" title="20.hexo"></a>20.hexo</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli    <span class="token comment">#安装hexo框架</span>hexo <span class="token parameter variable">-v</span>    <span class="token comment">#查看hexo版本</span><span class="token function">mkdir</span> blog    <span class="token comment">#创建blog目录</span><span class="token builtin class-name">cd</span> blog     <span class="token comment">#进入blog目录</span><span class="token function">sudo</span> hexo init     <span class="token comment">#生成博客 初始化博客</span>hexo s    <span class="token comment">#启动本地博客服务</span>http://localhost:4000/    <span class="token comment">#本地访问地址</span>hexo n <span class="token string">"我的第一篇文章"</span> <span class="token comment">#创建新的文章 </span><span class="token function">npm</span> audit fix <span class="token parameter variable">--force</span><span class="token function">yarn</span> <span class="token function">add</span> hexo-theme-aurora<span class="token comment">#返回blog目录</span>hexo clean <span class="token comment">#清理</span>hexo g <span class="token comment">#生成</span><span class="token comment">#Github创建一个新的仓库 YourGithubName.github.io</span>cnpm <span class="token function">install</span> <span class="token parameter variable">--save</span> hexo-deployer-git <span class="token comment">#在blog目录下安装git部署插件</span><span class="token comment">#配置_config.yml </span><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/deployment.html</span>deploy:  type: <span class="token function">git</span>  repo: https://github.com/YourGithubName/YourGithubName.github.io.git  branch: masterhexo d    <span class="token comment">#部署到Github仓库里</span>https://YourGithubName.github.io/  <span class="token comment">#访问这个地址可以查看博客</span><span class="token function">git</span> clone https://github.com/litten/hexo-theme-yilia.git themes/yiliac<span class="token comment">#下载yilia主题到本地</span><span class="token comment">#修改hexo根目录下的 _config.yml 文件 ： theme: yilia</span>hexo c    <span class="token comment">#清理一下</span>hexo g    <span class="token comment">#生成</span>hexo d    <span class="token comment">#部署到远程Github仓库</span>https://YourGithubName.github.io/  <span class="token comment">#查看博客</span><span class="token function">npm</span> <span class="token function">install</span> hexo-theme-aurora <span class="token parameter variable">--save</span><span class="token function">cp</span> <span class="token parameter variable">-rf</span> ./node_modules/hexo-theme-aurora/_config.yml ./_config.aurora.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-markdown"><a href="#21-markdown" class="headerlink" title="21.markdown"></a>21.markdown</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1.md插入视频 对应语法如下，这两个都可以:</span><span class="token operator">&lt;</span>video <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"视频链接"</span><span class="token operator">></span><span class="token operator">&lt;</span>/video<span class="token operator">></span><span class="token operator">&lt;</span>iframe <span class="token assign-left variable">height</span><span class="token operator">=</span><span class="token number">498</span> <span class="token assign-left variable">width</span><span class="token operator">=</span><span class="token number">510</span> <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"视频链接"</span><span class="token operator">></span><span class="token comment"># 2.音频：</span><span class="token operator">&lt;</span>audio <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"mp3文件链接地址"</span><span class="token operator">></span><span class="token operator">&lt;</span>/audio<span class="token operator">></span><span class="token operator">&lt;</span>iframe <span class="token assign-left variable">frameborder</span><span class="token operator">=</span><span class="token string">"no"</span> <span class="token assign-left variable">border</span><span class="token operator">=</span><span class="token string">"0"</span> <span class="token assign-left variable">marginwidth</span><span class="token operator">=</span><span class="token string">"0"</span> <span class="token assign-left variable">marginheight</span><span class="token operator">=</span><span class="token string">"0"</span> <span class="token assign-left variable">width</span><span class="token operator">=</span><span class="token number">330</span> <span class="token assign-left variable">height</span><span class="token operator">=</span><span class="token number">86</span> <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"//music.163.com/outchain/player?type=2&amp;id=33367876&amp;auto=1&amp;height=66"</span><span class="token operator">></span><span class="token operator">&lt;</span>/iframe<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes</title>
      <link href="/2024/03/21/kubernetes/"/>
      <url>/2024/03/21/kubernetes/</url>
      
        <content type="html"><![CDATA[<h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h1><h2 id="一、认识Kubernetes"><a href="#一、认识Kubernetes" class="headerlink" title="一、认识Kubernetes"></a>一、认识Kubernetes</h2><h3 id="1-服务部署方式演变"><a href="#1-服务部署方式演变" class="headerlink" title="1.服务部署方式演变"></a>1.服务部署方式演变</h3><p><img src="/markdownimages/Kubernetes/307031498846115.png" alt="服务部署方式演变">  </p><p>大致来说，在部署应用程序的方式上，我们主要经历了三个时代：</p><ul><li><input disabled="" type="checkbox"> 传统部署时代：早期，企业直接将应用程序部署在物理机上。由于物理机上不能为应用程序定义资源使用边界，我们也就很难合理地分配计算资源。例如：如果多个应用程序运行在同一台物理机上，可能发生这样的情况：其中的一个应用程序消耗了大多数的计算资源，导致其他应用程序不能正常运行。应对此问题的一种解决办法是，将每一个应用程序运行在不同的物理机上。然而，这种做法无法大规模实施，因为资源利用率很低，且企业维护更多物理机的成本昂贵。</li><li><input disabled="" type="checkbox"> 虚拟化部署时代：针对上述问题，虚拟化技术应运而生。用户可以在单台物理机的CPU上运行多个虚拟机（Virtual Machine）。<br>虚拟化技术使得应用程序被虚拟机相互分隔开，限制了应用程序之间的非法访问，进而提供了一定程度的安全性。<br>虚拟化技术提高了物理机的资源利用率，可以更容易地安装或更新应用程序，降低了硬件成本，因此可以更好地规模化实施。<br>每一个虚拟机可以认为是被虚拟化的物理机之上的一台完整的机器，其中运行了一台机器的所有组件，包括虚拟机自身的操作系统。</li><li><input disabled="" type="checkbox"> 容器化部署时代：容器与虚拟机类似，但是降低了隔离层级，共享了操作系统。因此，容器可以认为是轻量级的。<br>与虚拟机相似，每个容器拥有自己的文件系统、CPU、内存、进程空间等<br>运行应用程序所需要的资源都被容器包装，并和底层基础架构解耦<br>容器化的应用程序可以跨云服务商、跨Linux操作系统发行版进行部署</li></ul><h3 id="2-kubernetes简介"><a href="#2-kubernetes简介" class="headerlink" title="2.kubernetes简介"></a>2.kubernetes简介</h3><p>kubernetes的本质是一组服务器集群，它支持自动化部署、大规模可伸缩、 应用容器化管理。在生产环境中部署一个应用程序时，通常要部署该应用的多个实例以便对应用请求进行负载均衡。 在 Kubernetes 中，我们可以创建多个容器，每个容器里面运行一个应用实例，然后通过内置的负载均衡策略，实现对这一组应用实例的管理、发现、访问，而这些细节都不需要运维人员去进行复杂的手工配置和处理。</p><h4 id="k8s-主要提供以下服务："><a href="#k8s-主要提供以下服务：" class="headerlink" title="k8s 主要提供以下服务："></a>k8s 主要提供以下服务：</h4><ul><li><input disabled="" type="checkbox"> （1）自动装箱：基于容器对应用运行环境的资源配置要求自动部署应用容器</li><li><input disabled="" type="checkbox"> （2）自我修复(自愈能力)：当容器失败时，会对容器进行重启。当所部署的 Node 节点有问题时，会对容器进行重新部署和重新调度。当容器未通过监控检查时，会关闭此容器直到容器正常运行时，才会对外提供服务</li><li><input disabled="" type="checkbox"> （3）水平扩展：通过简单的命令、用户 UI 界面或基于 CPU 等资源使用情况，对应用容器进行规模扩大或规模剪裁</li><li><input disabled="" type="checkbox"> （4）服务发现：服务可以通过自动发现的形式找到它所依赖的服务。</li><li><input disabled="" type="checkbox"> （5）滚动更新：可以根据应用的变化，对应用容器运行的应用，进行一次性或批量式更新。</li><li><input disabled="" type="checkbox"> （6）版本回退：可以根据应用部署情况，对应用容器运行的应用，进行历史版本即时回退</li><li><input disabled="" type="checkbox"> （6）密钥和配置管理：在不需要重新构建镜像的情况下，可以部署和更新密钥和应用配置，类似热部署。</li><li><input disabled="" type="checkbox"> （7）存储编排：自动实现存储系统挂载及应用，特别对有状态应用实现数据持久化非常重要。存储系统可以来自于本地目录、网络存储(NFS、Gluster、Ceph 等)、公共云存储服务</li><li><input disabled="" type="checkbox"> （8）批处理：提供一次性任务，定时任务；满足批量数据处理和分析的场景。</li><li><input disabled="" type="checkbox"> （9）负载均衡：如果一个服务起动了多个容器，能够自动实现请求的负载均衡。</li></ul><h5 id="Kubernetes-组件介绍："><a href="#Kubernetes-组件介绍：" class="headerlink" title="Kubernetes 组件介绍："></a>Kubernetes 组件介绍：</h5><p>![](&#x2F;markdownimages&#x2F;Kubernetes&#x2F;256932907635207.png &#x3D;601x)</p><h4 id="一个-kubernetes-集群主要是由-控制节点-master-、工作节点-node-构成，每个节点上都会安装不同的组件。"><a href="#一个-kubernetes-集群主要是由-控制节点-master-、工作节点-node-构成，每个节点上都会安装不同的组件。" class="headerlink" title="一个 kubernetes 集群主要是由 控制节点(master)、工作节点(node) 构成，每个节点上都会安装不同的组件。"></a>一个 kubernetes 集群主要是由 控制节点(master)、工作节点(node) 构成，每个节点上都会安装不同的组件。</h4><h5 id="master：集群的控制平面，负责集群的决策-管理"><a href="#master：集群的控制平面，负责集群的决策-管理" class="headerlink" title="master：集群的控制平面，负责集群的决策 ( 管理 )"></a>master：集群的控制平面，负责集群的决策 ( 管理 )</h5><ul><li><input disabled="" type="checkbox"> ApiServer : 资源操作的唯一入口，接收用户输入的命令，提供认证、授权、API注册和发现等机制</li><li><input disabled="" type="checkbox"> Scheduler : 负责集群资源调度，按照预定的调度策略将Pod调度到相应的node节点上</li><li><input disabled="" type="checkbox"> ControllerManager : 负责维护集群的状态，比如程序部署安排、故障检测、自动扩展、滚动更新等</li><li><input disabled="" type="checkbox"> Etcd ：负责存储集群中各种资源对象的信息</li></ul><h5 id="node-worker-：集群的数据平面，负责为容器提供运行环境-干活"><a href="#node-worker-：集群的数据平面，负责为容器提供运行环境-干活" class="headerlink" title="node(worker)：集群的数据平面，负责为容器提供运行环境 ( 干活 )"></a>node(worker)：集群的数据平面，负责为容器提供运行环境 ( 干活 )</h5><ul><li><input disabled="" type="checkbox"> Kubelet : 负责维护容器的生命周期，即通过控制docker，来创建、更新、销毁容器</li><li><input disabled="" type="checkbox"> KubeProxy : 负责提供集群内部的服务发现和负载均衡</li><li><input disabled="" type="checkbox"> Docker : 负责节点上容器的各种操作</li></ul><h3 id="3-kubernetes-组件调用关系的应用示例"><a href="#3-kubernetes-组件调用关系的应用示例" class="headerlink" title="3.kubernetes 组件调用关系的应用示例"></a>3.kubernetes 组件调用关系的应用示例</h3><p>以部署一个 Nginx 服务来说明 Kubernetes 系统各个组件调用关系：</p><ul><li><input disabled="" type="checkbox"> ① 首先需要明确，一旦 Kubernetes 环境启动之后，master 和 node 都会将自身的信息存储到etcd数据库中。</li><li><input disabled="" type="checkbox"> ② 一个Nginx服务的安装请求首先会被发送到 master 节点上的 API Server 组件。</li><li><input disabled="" type="checkbox"> ③ API Server 组件会调用 Scheduler 组件来决定到底应该把这个服务安装到那个 node 节点上。此时，它会从 etcd 中读取各个 node 节点的信息，然后按照一定的算法进行选择，并将结果告知 API Server 。</li><li><input disabled="" type="checkbox"> ④ API Server 调用 Controller-Manager 去调用 Node 节点安装 Nginx 服务。</li><li><input disabled="" type="checkbox"> ⑤ Kubelet 接收到指令后，会通知 Docker ，然后由 Docker 来启动一个 Nginx 的 Pod 。Pod 是 Kubernetes 的最小操作单元，容器必须跑在 Pod 中。</li></ul><h3 id="4-Kubernetes-其他概念"><a href="#4-Kubernetes-其他概念" class="headerlink" title="4.Kubernetes 其他概念"></a>4.Kubernetes 其他概念</h3><ul><li><input disabled="" type="checkbox"> Master：集群控制节点，每个集群需要至少一个master节点负责集群的管控</li><li><input disabled="" type="checkbox"> Node：工作负载节点，由master分配容器到这些node工作节点上，然后node节点上的docker负责容器的运行</li><li><input disabled="" type="checkbox"> Pod：kubernetes的最小控制单元，容器都是运行在pod中的，一个pod中可以有1个或者多个容器</li><li><input disabled="" type="checkbox"> Controller：控制器，通过它来实现对pod的管理，比如启动pod、停止pod、伸缩pod的数量等等</li><li><input disabled="" type="checkbox"> Service：pod对外服务的统一入口，下面可以维护者同一类的多个pod</li><li><input disabled="" type="checkbox"> Label：标签，用于对pod进行分类，同一类pod会拥有相同的标签</li><li><input disabled="" type="checkbox"> NameSpace：命名空间，用来隔离pod的运行环境</li></ul><h2 id="二、搭建K8s集群"><a href="#二、搭建K8s集群" class="headerlink" title="二、搭建K8s集群"></a>二、搭建K8s集群</h2><p>kubernetes有多种部署方式，目前主流的方式有kubeadm、minikube、二进制包，本次选择方式二。</p><ul><li><input disabled="" type="checkbox"> minikube：一个用于快速搭建单节点的kubernetes工具。</li><li><input disabled="" type="checkbox"> kubeadm：一个用于快速搭建kubernetes集群的工具。</li><li><input disabled="" type="checkbox"> 二进制包：从官网上下载每个组件的二进制包，依次去安装，此方式对于理解kubernetes组件更加有效。</li><li><input disabled="" type="checkbox"> <a href="https://www.kuboard.cn/install/install-k8s.html">使用 KuboardSpray 安装kubernetes_v1.23.1</a></li></ul><p><img src="/markdownimages/Kubernetes/497234228596110.png"></p><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><h4 id="1-三台Centos7-9"><a href="#1-三台Centos7-9" class="headerlink" title="(1) 三台Centos7.9"></a>(1) 三台Centos7.9</h4><p>查看操作系统版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/redhat-release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/markdownimages/Kubernetes/141451120288698.png"><br><img src="/markdownimages/Kubernetes/4021502846221.png"></p><h4 id="2-关闭防火墙与Iptable"><a href="#2-关闭防火墙与Iptable" class="headerlink" title="(2) 关闭防火墙与Iptable"></a>(2) 关闭防火墙与Iptable</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalld <span class="token comment"># 关闭防火墙</span>systemctl disable firewalld <span class="token comment"># 禁止防火墙开机自启</span>systemctl stop iptables <span class="token comment"># 没有就算了</span>systemctl disable iptables<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-同步时钟"><a href="#3-同步时钟" class="headerlink" title="(3) 同步时钟"></a>(3) 同步时钟</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装ntp软件包。</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> ntp<span class="token comment">#设置ntp服务开机自启。</span>systemctl <span class="token builtin class-name">enable</span> ntpd<span class="token comment">#启动ntp服务。</span>systemctl start ntpd<span class="token comment">#从公共ntp服务器同步一次时间。</span><span class="token function">sudo</span> ntpdate <span class="token parameter variable">-u</span> pool.ntp.org<span class="token comment">#将系统时间同步到硬件时钟。</span>hwclock <span class="token parameter variable">--systohc</span><span class="token comment">#设置系统时区为上海。</span>timedatectl set-timezone Asia/Shanghai<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-关闭selinux-与-swap分区"><a href="#4-关闭selinux-与-swap分区" class="headerlink" title="(4) 关闭selinux 与 swap分区"></a>(4) 关闭selinux 与 swap分区</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 永久关闭 selinux</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/enforcing/disabled/'</span> /etc/selinux/config<span class="token comment"># 关闭swap分区</span><span class="token function">sed</span> <span class="token parameter variable">-ri</span> <span class="token string">'s/.*swap.*/#&amp;/'</span> /etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-其他"><a href="#5-其他" class="headerlink" title="(5) 其他"></a>(5) 其他</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改系统配置（k8s 强制要求的，做就是了）</span><span class="token function">cat</span> <span class="token operator">></span> /etc/sysctl.d/k8s.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1net.ipv4.ip_forward = 1vm.swappiness = 0EOF</span><span class="token comment"># 使能配置</span><span class="token function">sysctl</span> <span class="token parameter variable">-p</span><span class="token comment"># 加载网桥过滤模块</span>modprobe br_netfilter<span class="token comment"># 查看网桥过滤模块是否加载成功</span>lsmod <span class="token operator">|</span> <span class="token function">grep</span> br_netfilter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/markdownimages/Kubernetes/43493411635313.png">  </p><h4 id="6-配置ipvs"><a href="#6-配置ipvs" class="headerlink" title="(6) 配置ipvs"></a>(6) 配置ipvs</h4><p>在kubernetes中service有两种代理模型，一种是基于iptables，另一种是基于ipvs的。ipvs的性能要高于iptables的，但是如果要使用它，需要手动载入ipvs模块。</p><h4 id="7-安装Docker"><a href="#7-安装Docker" class="headerlink" title="(7) 安装Docker"></a>(7) 安装Docker</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 0.yum 安装 wget</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">wget</span><span class="token comment"># 1、切换镜像源</span><span class="token function">wget</span> https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo <span class="token parameter variable">-O</span> /etc/yum.repos.d/docker-ce.repo<span class="token comment"># 2、查看当前镜像源中支持的docker版本</span>yum list docker-ce <span class="token parameter variable">--showduplicates</span><span class="token comment"># 3、安装特定版本的docker-ce</span><span class="token comment"># 必须指定--setopt=obsoletes=0，否则yum会自动安装更高版本</span>yum <span class="token function">install</span> <span class="token parameter variable">--setopt</span><span class="token operator">=</span>obsoletes<span class="token operator">=</span><span class="token number">0</span> docker-ce-18.06.3.ce-3.el7 <span class="token parameter variable">-y</span><span class="token comment"># 4、配置加速</span><span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'&#123;  "exec-opts": ["native.cgroupdriver=systemd"],  "registry-mirrors": ["https://du3ia00u.mirror.aliyuncs.com"],  "live-restore": true,  "log-driver":"json-file",  "log-opts": &#123;"max-size":"500m", "max-file":"3"&#125;,  "storage-driver": "overlay2"&#125;EOF</span>systemctl daemon-reloadsystemctl restart <span class="token function">docker</span><span class="token comment"># 5、启动dokcer</span>systemctl restart <span class="token function">docker</span>systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-安装Kubernetes"><a href="#8-安装Kubernetes" class="headerlink" title="(8) 安装Kubernetes"></a>(8) 安装Kubernetes</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、设置镜像源</span><span class="token function">vi</span> /etc/yum.repos.d/kubernetes.repo<span class="token comment"># 2、添加下面的配置</span><span class="token punctuation">[</span>kubernetes<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>Kubernetes<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgchech</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">repo_gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpghttp://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg<span class="token comment"># 3、安装kubeadm、kubelet和kubectl</span>yum <span class="token function">install</span> <span class="token parameter variable">--setopt</span><span class="token operator">=</span>obsoletes<span class="token operator">=</span><span class="token number">0</span> kubeadm-1.17.4-0 kubelet-1.17.4-0 kubectl-1.17.4-0 <span class="token parameter variable">-y</span><span class="token comment"># 4、配置kubelet的cgroup</span><span class="token function">vi</span> /etc/sysconfig/kubelet<span class="token comment"># 添加下面的配置</span><span class="token assign-left variable">KUBELET_CGROUP_ARGS</span><span class="token operator">=</span><span class="token string">"--cgroup-driver=systemd"</span><span class="token assign-left variable">KUBE_PROXY_MODE</span><span class="token operator">=</span><span class="token string">"ipvs"</span><span class="token comment"># 5、设置kubelet开机自启</span>systemctl <span class="token builtin class-name">enable</span> kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-提前下载Kubernetes组件镜像"><a href="#9-提前下载Kubernetes组件镜像" class="headerlink" title="(9) 提前下载Kubernetes组件镜像"></a>(9) 提前下载Kubernetes组件镜像</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubeadm config images list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/markdownimages/Kubernetes/360722735961064.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">images</span><span class="token operator">=</span><span class="token punctuation">(</span>kube-apiserver:v1.17.7kube-controller-manager:v1.17.7kube-scheduler:v1.17.7kube-proxy:v1.17.7pause:3.1etcd:3.4.3-0coredns:1.6.5<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token for-or-select variable">imageName</span> <span class="token keyword">in</span> <span class="token variable">$&#123;images<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token function">docker</span> pull registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/<span class="token variable">$imageName</span><span class="token function">docker</span> tag registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/<span class="token variable">$imageName</span> k8s.gcr.io/<span class="token variable">$imageName</span><span class="token function">docker</span> rmi registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/<span class="token variable">$imageName</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><h4 id="7"><a href="#7" class="headerlink" title="(7)"></a>(7)</h4><h4 id="7-1"><a href="#7-1" class="headerlink" title="(7)"></a>(7)</h4><h4 id="7-2"><a href="#7-2" class="headerlink" title="(7)"></a>(7)</h4><h4 id="7-3"><a href="#7-3" class="headerlink" title="(7)"></a>(7)</h4><h4 id="7-4"><a href="#7-4" class="headerlink" title="(7)"></a>(7)</h4>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx + Lua 脚本 动态配置</title>
      <link href="/2024/01/24/Nginx+Lua%20%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/01/24/Nginx+Lua%20%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx-Lua-脚本-动态配置"><a href="#Nginx-Lua-脚本-动态配置" class="headerlink" title="Nginx + Lua 脚本 动态配置"></a>Nginx + Lua 脚本 动态配置</h1><h2 id="一、安装LuaJIT2"><a href="#一、安装LuaJIT2" class="headerlink" title="一、安装LuaJIT2"></a>一、安装LuaJIT2</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装下载目录</span><span class="token builtin class-name">cd</span> /usr/local/src<span class="token comment"># 下载地址</span><span class="token function">wget</span> https://github.com/openresty/luajit2/archive/refs/tags/v2.1-20201229.tar.gz<span class="token comment"># 解压缩文件夹</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> v2.1-20201229.tar.gz<span class="token comment"># 编译和安装</span><span class="token function">make</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span>/usr/local/luajit<span class="token function">make</span> <span class="token function">install</span> <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span>/usr/local/luajit<span class="token comment"># 安装lua-devel</span>yum <span class="token function">install</span> lua-devel<span class="token comment"># 配置环境变量</span><span class="token function">vim</span> /etc/profile <span class="token comment"># 添加下方代码</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">LUAJIT_LIB</span><span class="token operator">=</span>/usr/local/luajit/lib<span class="token builtin class-name">export</span> <span class="token assign-left variable">LUAJIT_INC</span><span class="token operator">=</span>/usr/local/luajit/include/luajit-2.1<span class="token comment"># 使/etc/profile 立刻生效</span><span class="token builtin class-name">source</span> /etc/profile<span class="token comment"># 检查安装情况</span>lua <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、安装Nginx"><a href="#二、安装Nginx" class="headerlink" title="二、安装Nginx"></a>二、安装Nginx</h2><h3 id="1-下载nginx"><a href="#1-下载nginx" class="headerlink" title="1.下载nginx"></a>1.下载nginx</h3><p>已经安装过nginx的可以看 “4.追加nginx-module”</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装依赖库 这些依赖库主要有g++、gcc、openssl-devel、pcre-devel和zlib-devel </span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">make</span> gcc gcc-c++ glibc glibc-devel <span class="token function">lsof</span>   yum <span class="token parameter variable">-y</span> <span class="token function">install</span> pcre pcre-devel  yum <span class="token parameter variable">-y</span> <span class="token function">install</span> zlib zlib-devel  yum <span class="token parameter variable">-y</span> <span class="token function">install</span> openssl openssl--devel <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载源码包</span><span class="token builtin class-name">cd</span> /usr/local/src<span class="token function">wget</span> <span class="token parameter variable">-d</span> <span class="token string">"http://nginx.org/download/nginx-1.8.0.tar.gz"</span><span class="token comment"># 解压 nginx-1.8.0</span><span class="token function">tar</span> zxvf nginx-1.8.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Nginx-Module下载"><a href="#2-Nginx-Module下载" class="headerlink" title="2.Nginx Module下载"></a>2.Nginx Module下载</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/src/nginx-modules<span class="token comment"># ngx_devel_kit 下载</span><span class="token function">wget</span> https://github.com/vision5/ngx_devel_kit/archive/v0.3.1.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> v0.3.1.tar.gz<span class="token comment"># lua-nginx-module 下载</span><span class="token function">wget</span> https://github.com/openresty/lua-nginx-module/archive/v0.10.14.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> v0.10.14.tar.gz<span class="token comment"># headers-more-nginx-module 下载</span><span class="token function">wget</span> https://github.com/openresty/headers-more-nginx-module/archive/v0.33.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> v0.33.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-编译nginx"><a href="#3-编译nginx" class="headerlink" title="3.编译nginx"></a>3.编译nginx</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 编译nginx</span>./configure <span class="token punctuation">\</span><span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/nginx <span class="token punctuation">\</span>--with-http_stub_status_module <span class="token punctuation">\</span>--with-http_ssl_module <span class="token punctuation">\</span>--with-file-aio <span class="token punctuation">\</span>--with-http_sub_module <span class="token punctuation">\</span>--with-http_gzip_static_module <span class="token punctuation">\</span>--with-http_v2_module <span class="token punctuation">\</span>--with-pcre <span class="token punctuation">\</span>--with-http_realip_module <span class="token punctuation">\</span>--with-stream <span class="token punctuation">\</span>--with-stream_ssl_module <span class="token punctuation">\</span>--with-ld-opt<span class="token operator">=</span><span class="token string">"-Wl,-rpath,/usr/local/luajit/lib"</span> <span class="token punctuation">\</span>--add-module<span class="token operator">=</span>/usr/local/src/nginx-modules/headers-more-nginx-module-0.33 <span class="token punctuation">\</span>--add-module<span class="token operator">=</span>/usr/local/src/nginx-modules/ngx_devel_kit-0.3.1 <span class="token punctuation">\</span>--add-module<span class="token operator">=</span>/usr/local/src/nginx-modules/lua-nginx-module-0.10.14<span class="token comment"># 安装</span><span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-追加nginx-module"><a href="#4-追加nginx-module" class="headerlink" title="4.追加nginx-module"></a>4.追加nginx-module</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入nginx解压目录</span><span class="token builtin class-name">cd</span> /usr/local/src/nginx-1.8.0<span class="token comment"># 追加nginx-module</span>./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/src/nginx-modules --add-module<span class="token operator">=</span>/usr/local/src/nginx-modules/headers-more-nginx-module-0.33 <span class="token punctuation">\</span>--add-module<span class="token operator">=</span>/usr/local/src/nginx-modules/ngx_devel_kit-0.3.1 <span class="token punctuation">\</span>--add-module<span class="token operator">=</span>/usr/local/src/nginx-modules/lua-nginx-module-0.10.14<span class="token comment"># 编辑，切记没有make install</span><span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Nginx命令"><a href="#5-Nginx命令" class="headerlink" title="5.Nginx命令"></a>5.Nginx命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动nginx</span>nginx<span class="token comment">#停止nginx</span>nginx <span class="token parameter variable">-s</span> stop<span class="token comment">#重启nginx</span>nginx <span class="token parameter variable">-s</span> reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-验证安装情况"><a href="#6-验证安装情况" class="headerlink" title="6.验证安装情况"></a>6.验证安装情况</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/nginx/sbin/nginx <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-在nginx配置文件中-server段-添加如下代码"><a href="#1-在nginx配置文件中-server段-添加如下代码" class="headerlink" title="1.在nginx配置文件中 server段 添加如下代码"></a>1.在nginx配置文件中 server段 添加如下代码</h4><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> /lua</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">default_type</span> <span class="token string">'text/plain'</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">content_by_lua</span> <span class="token string">'ngx.say("hello,lua!!!")'</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-重启nginx"><a href="#2-重启nginx" class="headerlink" title="2.重启nginx"></a>2.重启nginx</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./nginx <span class="token parameter variable">-s</span> reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-访问：xxx-xxx-xxx-xxx-端口-lua"><a href="#3-访问：xxx-xxx-xxx-xxx-端口-lua" class="headerlink" title="3.访问：xxx.xxx.xxx.xxx:端口&#x2F;lua"></a>3.访问：xxx.xxx.xxx.xxx:端口&#x2F;lua</h4><h2 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h2><h3 id="1-Vue反向代理-开关控制"><a href="#1-Vue反向代理-开关控制" class="headerlink" title="1.Vue反向代理 开关控制"></a>1.Vue反向代理 开关控制</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">worker_processes</span> <span class="token number">5</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">error_log</span>  logs/error.log</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">error_log</span>  logs/error.log  notice</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">error_log</span>  logs/error.log  info</span><span class="token punctuation">;</span><span class="token comment"># events事件指令是设定Nginx的工作模式及连接数上限</span><span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">worker_connections</span> <span class="token number">512</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>    <span class="token comment"># lua 全局缓存</span>    <span class="token directive"><span class="token keyword">lua_shared_dict</span> dyn_ups_zone <span class="token number">10m</span></span><span class="token punctuation">;</span>    <span class="token comment"># include是个主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度。类似于Apache中的include方法。</span>    <span class="token directive"><span class="token keyword">include</span> mime.types</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">default_type</span> application/octet-stream</span><span class="token punctuation">;</span>    <span class="token comment"># sendfile参数用于开启高效文件传输模式。将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞；</span>    <span class="token directive"><span class="token keyword">sendfile</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>    <span class="token comment"># 8080端口 gzip 反向代理</span>    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">8080</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span> vue</span><span class="token punctuation">;</span>        <span class="token comment"># 必须要加 错误页配置</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">&#123;</span>            <span class="token directive"><span class="token keyword">root</span> html</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">#开启gzip</span>        <span class="token directive"><span class="token keyword">gzip</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>        <span class="token comment">##低于1kb的资源不压缩 </span>        <span class="token directive"><span class="token keyword">gzip_min_length</span> <span class="token number">1k</span></span><span class="token punctuation">;</span>        <span class="token comment">##压缩级别1-9，越大压缩率越高，同时消耗cpu资源也越多，建议设置在5左右。</span>        <span class="token directive"><span class="token keyword">gzip_comp_level</span> <span class="token number">7</span></span><span class="token punctuation">;</span>         <span class="token comment">##需要压缩哪些响应类型的资源，多个空格隔开。不建议压缩图片.</span>        <span class="token directive"><span class="token keyword">gzip_types</span> text/plain application/javascript application/x-javascript text/javascript text/xml text/css</span><span class="token punctuation">;</span>        <span class="token comment">##配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）</span>        <span class="token directive"><span class="token keyword">gzip_disable</span> <span class="token string">"MSIE [1-6]\."</span></span><span class="token punctuation">;</span>        <span class="token comment">##是否添加“Vary: Accept-Encoding”响应头</span>        <span class="token directive"><span class="token keyword">gzip_vary</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">charset</span> utf8</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">large_client_header_buffers</span> <span class="token number">4</span> <span class="token number">64k</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">client_header_buffer_size</span> <span class="token number">64k</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">client_max_body_size</span> <span class="token number">60m</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">client_body_buffer_size</span> <span class="token number">128k</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_connect_timeout</span> <span class="token number">600</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_read_timeout</span> <span class="token number">600</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_send_timeout</span> <span class="token number">600</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_buffer_size</span> <span class="token number">64k</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_buffers</span> <span class="token number">4</span> <span class="token number">32k</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_busy_buffers_size</span> <span class="token number">64k</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_temp_file_write_size</span> <span class="token number">64k</span></span><span class="token punctuation">;</span>        <span class="token comment"># vue 静态资源 反向代理</span>        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>            <span class="token directive"><span class="token keyword">access_by_lua</span> <span class="token string">'                local dynupszone = ngx.shared.dyn_ups_zone;                local access = dynupszone:get("accessfoo");                ngx.log(ngx.INFO, "access status: ", access);                if access == "off" then                   ngx.status = 403;                   ngx.say("403 : no auth to visit big-screen");                   ngx.header["X-Nginx-Header"] = "No Nginx Auth ";                   ngx.exit(403)                else                   ngx.header["X-Nginx-Header"] = "Have Nginx Auth";                end            '</span></span><span class="token punctuation">;</span>            <span class="token directive"><span class="token keyword">root</span> /dist/</span><span class="token punctuation">;</span>            <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>            <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment"># 动态反向代理开关控制入口</span>        <span class="token directive"><span class="token keyword">location</span> /config</span> <span class="token punctuation">&#123;</span>            <span class="token directive"><span class="token keyword">default_type</span> text/plain</span><span class="token punctuation">;</span>            <span class="token directive"><span class="token keyword">content_by_lua_block</span></span> <span class="token punctuation">&#123;</span>                <span class="token directive"><span class="token keyword">local</span> foo = ngx.req.get_uri_args()[<span class="token string">"foo"</span>]                if foo == nil then                    ngx.say(<span class="token string">"usage: /config?foo=off, or /config?foo=on"</span>)                    local dynupszone = ngx.shared.dyn_ups_zone</span><span class="token punctuation">;</span>                    <span class="token directive"><span class="token keyword">local</span> access = dynupszone:get(<span class="token string">"accessfoo"</span>)</span><span class="token punctuation">;</span>                    <span class="token directive"><span class="token keyword">ngx.say("now</span> status: ", access)                    return</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">end</span>                ngx.log(ngx.INFO, <span class="token string">"vue can visit: "</span>, foo)</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">ngx.say("vue</span> can visit: ", foo)</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">ngx.shared.dyn_ups_zone:set("accessfoo",</span> foo)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-动态流量环境切换"><a href="#2-动态流量环境切换" class="headerlink" title="2.动态流量环境切换"></a>2.动态流量环境切换</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">worker_processes</span> <span class="token number">2</span></span><span class="token punctuation">;</span><span class="token comment">#配置nginx工作进程数</span><span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">use</span> epoll</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span><span class="token comment"># lua 全局缓存</span>   <span class="token directive"><span class="token keyword">lua_shared_dict</span> dyn_ups_zone <span class="token number">10m</span></span><span class="token punctuation">;</span><span class="token comment"># include是个主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度。类似于Apache中的include方法。</span>   <span class="token directive"><span class="token keyword">include</span>       mime.types</span><span class="token punctuation">;</span>   <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>   <span class="token comment">#access_log  logs/access.log  main;</span><span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span>   <span class="token directive"><span class="token keyword">gzip</span>  <span class="token boolean">on</span></span><span class="token punctuation">;</span>   <span class="token directive"><span class="token keyword">tcp_nopush</span>      <span class="token boolean">on</span></span><span class="token punctuation">;</span>   <span class="token directive"><span class="token keyword">tcp_nodelay</span>     <span class="token boolean">on</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">upstream</span> prod-env</span> <span class="token punctuation">&#123;</span>   <span class="token directive"><span class="token keyword">server</span> 192.168.0.5:8080</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">keepalive</span> <span class="token number">50</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token directive"><span class="token keyword">upstream</span> grayscale-env</span> <span class="token punctuation">&#123;</span><span class="token directive"><span class="token keyword">server</span> 192.168.0.6: <span class="token number">8080</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">keepalive</span> <span class="token number">50</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">upstream</span> default</span> <span class="token punctuation">&#123;</span>   <span class="token directive"><span class="token keyword">server</span> 192.168.0.7: <span class="token number">8080</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">keepalive</span> <span class="token number">50</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span><span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">server_name</span> 192.168.0.1</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">charset</span> utf-8</span><span class="token punctuation">;</span><span class="token comment"># 默认流量环境</span> <span class="token directive"><span class="token keyword">set</span> <span class="token variable">$group</span> <span class="token string">"default"</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">location</span> /api</span> <span class="token punctuation">&#123;</span><span class="token directive"><span class="token keyword">access_by_lua</span> <span class="token string">'                local dynupszone = ngx.shared.dyn_ups_zone;                local access = dynupszone:get("accessfoo");                ngx.log(ngx.INFO, "accessfoo status: ", access);                if access and access == "on" then                local headers = ngx.req.get_headers()    local staffid = headers["Staff-Id"]ngx.log(ngx.INFO, "staffid value: ", staffid);if staffid and staffid:sub(-1) == "5" thenngx.var.group = "grayscale-env";elsengx.var.group = “prod-env";end                else                ngx.var.group = "default";                end          '</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">rewrite</span> ^/api/(.*)$ /api/<span class="token variable">$1</span> break</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">proxy_pass</span> http://<span class="token variable">$group</span></span><span class="token punctuation">;</span><span class="token comment">#keepalive_timeout  0;</span><span class="token punctuation">&#125;</span>  <span class="token comment"># 动态灰度环境开关控制入口</span>      <span class="token directive"><span class="token keyword">location</span> /GrayscaleEnvironment</span> <span class="token punctuation">&#123;</span><span class="token directive"><span class="token keyword">default_type</span> text/plain</span><span class="token punctuation">;</span>          <span class="token directive"><span class="token keyword">content_by_lua_block</span></span> <span class="token punctuation">&#123;</span>          <span class="token directive"><span class="token keyword">local</span> foo = ngx.req.get_uri_args()[<span class="token string">"config"</span>]          if foo == nil then             ngx.say(<span class="token string">"usage: /GrayscaleEnvironment?config=off, or /GrayscaleEnvironment?config=on"</span>)                local dynupszone = ngx.shared.dyn_ups_zone</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">local</span> access = dynupszone:get(<span class="token string">"accessfoo"</span>)</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">ngx.say("Grayscale</span> Environment Default Off: ", access)</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">return</span></span><span class="token punctuation">;</span>          <span class="token directive"><span class="token keyword">end</span>                ngx.log(ngx.INFO, <span class="token string">"Grayscale Environment ON: "</span>, foo)</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">ngx.say("Grayscale</span> Environment ON: ", foo)</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">ngx.shared.dyn_ups_zone:set("accessfoo",</span> foo)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、参考文档"><a href="#四、参考文档" class="headerlink" title="四、参考文档"></a>四、参考文档</h2><ul><li><input disabled="" type="checkbox"> <a href="https://www.runoob.com/lua/lua-tutorial.html">Lua脚本语法</a></li><li><input disabled="" type="checkbox"> <a href="https://www.jianshu.com/p/aaa3d84e3d59">Nginx Lua API 学习</a></li><li><input disabled="" type="checkbox"> <a href="https://www.cnblogs.com/shihuc/p/8044753.html">基于Nginx与Lua脚本实现反向代理的动态更新</a></li><li><input disabled="" type="checkbox"> <a href="https://www.jianshu.com/p/74a5a7e6ebf9">Nginx+Lua：过滤特定接口请求</a></li><li><input disabled="" type="checkbox"> <a href="https://blog.csdn.net/shark_pang/article/details/124709417">Nginx模块Lua基本使用方法抄录</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Lua </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node</title>
      <link href="/2024/01/24/Node&amp;Npm/"/>
      <url>/2024/01/24/Node&amp;Npm/</url>
      
        <content type="html"><![CDATA[<h2 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h2><pre class="line-numbers language-none"><code class="language-none"># 使用Node ，Npm版本：node&#x3D;&gt;6.14.4npm&#x3D;&gt;npm -g install npm@4.6.1# macnpm install# node-gyp 依赖于 Python &gt;&#x3D; 2.5.0 &amp; &lt; 3.0.0npm install -g node-gypnpm install --python&#x3D;python2.7# 清除缓存npm cache clean --forcerm -rf node_modulesnpm install# 下载aid-clinpm info aid-cli versionsnpm install -g aid-cli@2.0.0# aid-cli 依赖官网（仓库地址是内网ip，所以必须使用已经下载好的）：https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;aid-cli# 阿里云镜像npm仓库地址：1、查看镜像仓库npm config get registry2、设置镜像仓库npm config set registry https:&#x2F;&#x2F;mirrors.huaweicloud.com&#x2F;repository&#x2F;npm&#x2F;npm config set registry http:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;npm&#x2F;npm config set registry https:&#x2F;&#x2F;registry.npmmirror.comnpm config set registry https:&#x2F;&#x2F;registry.npmjs.org&#x2F;# aid-cli在阿里云的官网（可以选择对应的版本直接下载源码）https:&#x2F;&#x2F;npmmirror.com&#x2F;package&#x2F;aid-cli# 手动导入npm包aid-cli最好在项目根目录安装，不加“-g”进行全局安装（容易报错）,且添加sudo执行权限sudo npm install .&#x2F;my-package&#x2F;xxx.tgz# 重新构建npm rebuild node-sass# 查看最新版本npm info wrap-ansi version# yarn 命令yarnyarn config set ignore-engines trueyarn cache clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Mac-adi-cli项目启动文档"><a href="#2-Mac-adi-cli项目启动文档" class="headerlink" title="2.Mac adi-cli项目启动文档"></a>2.Mac adi-cli项目启动文档</h2><h2 id="a-nvm安装"><a href="#a-nvm安装" class="headerlink" title="a.nvm安装"></a>a.nvm安装</h2><p><code>node 6.14.4 版本，npm -g install npm@4.6.1</code></p><h2 id="b-pyenv-安装python-2-7-18"><a href="#b-pyenv-安装python-2-7-18" class="headerlink" title="b.pyenv 安装python 2.7.18"></a>b.pyenv 安装python 2.7.18</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> pyenvpyenv <span class="token function">install</span> <span class="token number">2.7</span>.18pyenv global <span class="token number">2.7</span>.18<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="c-安装aid-cli"><a href="#c-安装aid-cli" class="headerlink" title="c.安装aid-cli"></a>c.安装aid-cli</h2><p>nvm安装的node目录结构与win不同，<code>/Users/anubis/.nvm/versions/node/v6.14.4/</code>，<br>其中关键的目录有：<code>bin</code>和<code>lib</code>。</p><ol><li><p>向bin目录复制添加aid ，并修改其中的代码，修改完成后赋权<code>chmod u+x aid</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token comment">#basedir=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")</span><span class="token assign-left variable">basedir</span><span class="token operator">=</span><span class="token string">"/Users/anubis/.nvm/versions/node/v6.14.4"</span><span class="token keyword">case</span> <span class="token variable"><span class="token variable">`</span><span class="token function">uname</span><span class="token variable">`</span></span> <span class="token keyword">in</span>    *CYGWIN*<span class="token punctuation">)</span> <span class="token assign-left variable">basedir</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>cygpath <span class="token parameter variable">-w</span> <span class="token string">"<span class="token variable">$basedir</span>"</span><span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token keyword">esac</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-x</span> <span class="token string">"<span class="token variable">$basedir</span>/bin/node"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token string">"<span class="token variable">$basedir</span>/bin/node"</span>  <span class="token string">"<span class="token variable">$basedir</span>/lib/node_modules/aid-cli/bin/aid.js"</span> <span class="token string">"<span class="token variable">$@</span>"</span>    <span class="token assign-left variable">ret</span><span class="token operator">=</span><span class="token variable">$?</span><span class="token keyword">else</span>     <span class="token function">node</span>  <span class="token string">"<span class="token variable">$basedir</span>/lib/node_modules/aid-cli/bin/aid.js"</span> <span class="token string">"<span class="token variable">$@</span>"</span>    <span class="token assign-left variable">ret</span><span class="token operator">=</span><span class="token variable">$?</span><span class="token keyword">fi</span><span class="token builtin class-name">exit</span> <span class="token variable">$ret</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>向<code>lib/node_modules</code>内复制<code>aid-cli</code>。</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 控制台内</span>aid <span class="token parameter variable">-v</span><span class="token number">2.0</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>全局卸载<code>node-sass</code>与<code>node-gyp</code>。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Mac安装node-gyp时需要先安装Xcode与python 2.7.18</span><span class="token comment"># Xcode 你需要通过运行安装</span>xcode-select <span class="token parameter variable">--install</span><span class="token comment"># 卸载 node-sass 与 node-gyp</span><span class="token function">npm</span> uninstall <span class="token parameter variable">-g</span> node-sass@4.14.1<span class="token function">npm</span> uninstall <span class="token parameter variable">-g</span> node-gyp@@7.1.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>打开<code>/Users/anubis/.nvm/versions/node/v6.14.4/lib/node_modules</code>目录可以看到<code>node-sass</code>和<code>node-gyp</code>目录，<br>将其复制到<code>/Users/anubis/.nvm/versions/node/v6.14.4/lib/node_modules/aid-cli/node_modules</code>内，<br>如果不复制会导致原来aid-cli内的win下的 <code>node-sass</code>和<code>node-gyp</code>与当前系统不匹配。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Node Sass could not <span class="token function">find</span> a binding <span class="token keyword">for</span> your current environment: OS X <span class="token number">64</span>-bit with Node.js <span class="token number">6</span>.xFound bindings <span class="token keyword">for</span> the following environments:    - Windows <span class="token number">64</span>-bit with Node.js <span class="token number">6</span>.x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>安装yarn来管理依赖，npm install会导致链接失效</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token function">yarn</span><span class="token comment"># 项目直接 npm install下载依赖会失败：</span><span class="token comment"># Error: Unsupported URL Type: npm:string-width@^4.2.0</span><span class="token comment"># 项目 直接使用 yarn add aid-cli@2.0.0 虽然可以下载成功，</span><span class="token comment"># 但是项目启动时还是会报错，所以采用复制aid-cli依赖的方法，</span><span class="token comment"># 只对 node-sass和node-gyp 进行替换，</span><span class="token comment"># 具体原因是某个依赖内到es6写法node不能识别报错。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>到项目目录下启动项目</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 下载依赖</span>yarn<span class="token comment"># 启动</span>aid dev <span class="token operator">-</span>N<span class="token comment"># 构建</span>aid build <span class="token operator">-</span>N<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>修改<code>src/modules/mochaItOm/portal/portal.js</code>接口访问本地Mock,同时配置 <code>.aid/mock/portal.js</code>内的mock接口返回数据。</li></ol><p>将 <code>_this[axio]</code> 替换为 <code>_this.$mochaItOmMock</code> 。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Nvm </tag>
            
            <tag> Npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pyppeteer</title>
      <link href="/2024/01/24/Pyppeteer/"/>
      <url>/2024/01/24/Pyppeteer/</url>
      
        <content type="html"><![CDATA[<h1 id="Pyppeteer"><a href="#Pyppeteer" class="headerlink" title="Pyppeteer"></a>Pyppeteer</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>Puppeteer 是一个 Node 库，它提供了一个高级 API 来通过 DevTools 协议控制 Chromium 或 Chrome。<br>Puppeteer API 是分层次的，反映了浏览器结构。</p><ul><li><input disabled="" type="checkbox"> Puppeteer 使用 DevTools 协议 与浏览器进行通信。</li><li><input disabled="" type="checkbox"> Browser 实例可以拥有浏览器上下文。</li><li><input disabled="" type="checkbox"> BrowserContext 实例定义了一个浏览会话并可拥有多个页面。</li><li><input disabled="" type="checkbox"> Page 至少有一个框架：主框架。 可能还有其他框架由 iframe 或 框架标签 创建。</li><li><input disabled="" type="checkbox"> frame 至少有一个执行上下文 - 默认的执行上下文 - 框架的 JavaScript 被执行。 一个框架可能有额外的与 扩展 关联的执行上下文。</li><li><input disabled="" type="checkbox"> Worker 具有单一执行上下文，并且便于与 WebWorkers 进行交互。</li></ul><h2 id="二、官方文档"><a href="#二、官方文档" class="headerlink" title="二、官方文档"></a>二、官方文档</h2><ul><li><input disabled="" type="checkbox"> <a href="https://github.com/pyppeteer/pyppeteer">Pyppeteer GitHub 仓库地址</a></li><li><input disabled="" type="checkbox"> <a href="https://pyppeteer.github.io/pyppeteer/reference.html#pyppeteer.page.Page.querySelector">Pyppeteer 文档</a></li><li><input disabled="" type="checkbox"> <a href="https://www.w3cschool.cn/puppeteer/puppeteer-yi2c37sc.html">W3CSchool Pyppeteer 中文文档</a></li></ul><h2 id="三、下载安装"><a href="#三、下载安装" class="headerlink" title="三、下载安装"></a>三、下载安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># pip安装</span>pip <span class="token function">install</span> pyppeteer<span class="token comment"># 从 github 存储库安装最新版本</span>pip <span class="token function">install</span> <span class="token parameter variable">-U</span> git+https://github.com/pyppeteer/pyppeteer@dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、例子"><a href="#四、例子" class="headerlink" title="四、例子"></a>四、例子</h2><h4 id="（1）问卷星"><a href="#（1）问卷星" class="headerlink" title="（1）问卷星"></a>（1）问卷星</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''Description: 问卷星自动表单提交 pyppeteer'''</span><span class="token keyword">import</span> asyncio<span class="token keyword">from</span> pyppeteer <span class="token keyword">import</span> launch<span class="token keyword">from</span> pyppeteer_stealth <span class="token keyword">import</span> stealth  <span class="token comment"># 反爬虫第三方库</span><span class="token keyword">import</span> time  <span class="token comment"># 用于延时</span><span class="token keyword">import</span> sys<span class="token comment"># 接受外部参数</span><span class="token comment"># URL = sys.argv[1]</span>URL <span class="token operator">=</span> <span class="token string">'https://www.wjx.cn/vm/rwCxb27.aspx#'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'py:'</span><span class="token operator">+</span>URL<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    browser <span class="token operator">=</span> <span class="token keyword">await</span> launch<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token comment">#配置浏览器地址</span>        <span class="token comment"># 'executablePath': 'C:/Users/17902/AppData/Local/Google/Chrome/Application/chrome.exe',</span>        <span class="token string">'executablePath'</span><span class="token punctuation">:</span> <span class="token string">'C:/Program Files (x86)/Microsoft/Edge/Application/msedge.exe'</span><span class="token punctuation">,</span>        <span class="token comment"># 'executablePath': 'C:\Program Files\Internet Explorer/iexplore.exe',  #</span>        <span class="token comment"># Pyppeteer 默认使用的是无头浏览器,所以要显示需要给False</span>        <span class="token string">'headless'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>        <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'--no-sandbox'</span><span class="token punctuation">,</span> <span class="token string">'--window-size=1366,850'</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>newPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span>setViewport<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'width'</span><span class="token punctuation">:</span> <span class="token number">1366</span><span class="token punctuation">,</span> <span class="token string">'height'</span><span class="token punctuation">:</span> <span class="token number">768</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment"># 防止页面识别出脚本(反爬虫关键语句)</span>    <span class="token comment"># await stealth(page)</span>    url <span class="token operator">=</span> URL    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment"># 填空题：page.type(selector,text),在指定selector的元素上填写text</span>    <span class="token comment"># q1</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'#q1'</span><span class="token punctuation">,</span> <span class="token string">'XX'</span><span class="token punctuation">)</span>  <span class="token comment"># CssSelector</span>    <span class="token comment"># q2</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'#q2'</span><span class="token punctuation">,</span> <span class="token string">'XXX'</span><span class="token punctuation">)</span>    <span class="token comment"># q3</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'#q3'</span><span class="token punctuation">,</span> <span class="token string">'XXX'</span><span class="token punctuation">)</span>    <span class="token comment"># 单选题：先用page.querySelector(selector)找到指定的元素,再调用元素的click()方法、还可以用xpath方法</span>    <span class="token comment"># CssSelector: ul在第二个次序、li在第二个次序、a标签在第二个次序</span>    <span class="token comment"># q4                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div4 > div:nth-child(2) > div:nth-child(1) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 省-市-区/县 下拉框：div层级选择模拟选择</span>    <span class="token comment"># q5</span>    address <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#q5"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> address<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    province <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#divFrameData > div.layer_content > div:nth-child(2) > div > span > span:nth-child(1) > span > span:nth-child(2) > b"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> province<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    provinceOption <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"span.select2-results > ul > li:nth-child(12)"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> provinceOption<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    city <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#divFrameData > div.layer_content > div:nth-child(3) > div > span > span:nth-child(1) > span > span:nth-child(2) > b"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> city<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    cityOption <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"span.select2-results > ul > li:nth-child(2)"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> cityOption<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    area <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#divFrameData > div.layer_content > div:nth-child(4) > div > span > span:nth-child(1) > span > span:nth-child(2) > b"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> area<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    areaOption <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"span.select2-results > ul > li:nth-child(7)"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> areaOption<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    finishSubmit <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#divFrameData > div.layer_content > div:nth-child(5) > a"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> finishSubmit<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q6</span>    address <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#q6"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> address<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    province <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#divFrameData > div.layer_content > div:nth-child(2) > div > span > span:nth-child(1) > span > span:nth-child(2) > b"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> province<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    provinceOption <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"span.select2-results > ul > li:nth-child(12)"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> provinceOption<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    city <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#divFrameData > div.layer_content > div:nth-child(3) > div > span > span:nth-child(1) > span > span:nth-child(2) > b"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> city<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    cityOption <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"span.select2-results > ul > li:nth-child(2)"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> cityOption<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    area <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#divFrameData > div.layer_content > div:nth-child(4) > div > span > span:nth-child(1) > span > span:nth-child(2) > b"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> area<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    areaOption <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"span.select2-results > ul > li:nth-child(7)"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> areaOption<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    finishSubmit <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"#divFrameData > div.layer_content > div:nth-child(5) > a"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> finishSubmit<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q7</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'#q7'</span><span class="token punctuation">,</span> <span class="token string">'XXX'</span><span class="token punctuation">)</span>    <span class="token comment"># q8</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'#q8'</span><span class="token punctuation">,</span> <span class="token string">'XXX'</span><span class="token punctuation">)</span>    <span class="token comment"># q9</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'#q9'</span><span class="token punctuation">,</span> <span class="token string">'XXX'</span><span class="token punctuation">)</span>    dept <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div10 > div:nth-child(2) > div > span > span:nth-child(1) > span > span:nth-child(2) > b'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> dept<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    ctc <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">"span.select2-results > ul > li:nth-child(6)"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> ctc<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q10                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div11 > div:nth-child(2) > div:nth-child(3) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q20                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div21 > div:nth-child(2) > div:nth-child(2) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q21                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div22 > div:nth-child(2) > div:nth-child(2) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q22                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div23 > div:nth-child(2) > div:nth-child(2) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q23                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div24 > div:nth-child(2) > div:nth-child(1) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q24                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div25 > div:nth-child(2) > div:nth-child(4) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q25                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div26 > div:nth-child(2) > div:nth-child(1) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q26                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div27 > div:nth-child(2) > div:nth-child(1) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q27                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div28 > div:nth-child(2) > div:nth-child(1) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q28                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div29 > div:nth-child(2) > div:nth-child(1) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># q29                                                              选项index ↓</span>    button <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#div30 > div:nth-child(2) > div:nth-child(2) > span > a'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#q32</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'#q33'</span><span class="token punctuation">,</span> <span class="token string">'XXX'</span><span class="token punctuation">)</span>        <span class="token comment"># 日期选择题：先点击日期选择框,在出现的iframe寻找元素并调用click()方法</span>    <span class="token comment"># date1 = await page.querySelector("#q4")</span>    <span class="token comment"># await date1.click()</span>    <span class="token comment"># frame = page.frames</span>    <span class="token comment"># date2 = await frame[1].querySelector('#selectTodayButton')</span>    <span class="token comment"># await date2.click()</span>    <span class="token comment"># 找到提交按钮提交</span>    submit <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'#ctlNext'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> submit<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 关闭浏览器</span>asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 反爬虫：原理是将get请求转换成undefined, 也可以用stealth库来防止机器人检测</span><span class="token comment"># await stealth(page)</span><span class="token comment"># await page.evaluateOnNewDocument('Object.defineProperty(navigator, "webdriver", &#123;get: () => undefined&#125;)')</span><span class="token comment">#</span><span class="token comment"># # 三种解析方式</span><span class="token comment"># Page.querySelector()           # CSS选择器</span><span class="token comment"># Page.querySelectorAll()</span><span class="token comment"># Page.xpath()                   # xpath</span><span class="token comment"># page.evaluate('window.scrollBy(0, window.innerHeight)') # 执行js语句</span><span class="token comment"># </span><span class="token comment"># Pyppeteer的evaluate()方法只使用JavaScript字符串，该字符串可以是函数或表达式。可以添加选项force_expr=True，强制Pyppeteer作为表达式处理。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pyppeteer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2024/01/24/Redis/"/>
      <url>/2024/01/24/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1>]]></content>
      
      
      <categories>
          
          <category> NoSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ</title>
      <link href="/2024/01/24/RocketMQ/"/>
      <url>/2024/01/24/RocketMQ/</url>
      
        <content type="html"><![CDATA[<h1 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h1><h2 id="一、什么是MQ"><a href="#一、什么是MQ" class="headerlink" title="一、什么是MQ?"></a>一、什么是MQ?</h2><ul><li><input disabled="" type="checkbox"> MQ：MessageQuery，消息队列。队列，是一种FIFO先进先出的数据结构。消息由生产者发送到MQ进行排队，然后按原来的顺序交由消息的消费者进行处理。QQ，微信就是典型的MQ。</li></ul><h2 id="二、引入MQ的优点"><a href="#二、引入MQ的优点" class="headerlink" title="二、引入MQ的优点"></a>二、引入MQ的优点</h2><ul><li><input disabled="" type="checkbox"> 异步：异步能提高系统的相应速度，吞吐量。</li><li><input disabled="" type="checkbox"> 解耦：服务之间进行解耦，才可以减少服务之间的影响。提高系统整体的稳定性一阶可扩展性</li><li><input disabled="" type="checkbox"> 削峰：以稳定的系统资源对突发的流量的冲击。</li></ul><h2 id="三、引入MQ的缺点"><a href="#三、引入MQ的缺点" class="headerlink" title="三、引入MQ的缺点"></a>三、引入MQ的缺点</h2><ul><li><input disabled="" type="checkbox"> 系统可用性降低：系统引入外部依赖增多，系统的稳定性就会变差。一旦MQ宕机，就会对业务产生影响。这就需要考虑如何保证MQ的高可用性。</li><li><input disabled="" type="checkbox"> 系统的复杂度提高：引入MQ后系统的复杂度会大大提高。以前服务之间可以进行同步的服务调用，引入MQ后，会变为异步调用，数据的链路就会变得更加复杂。并且还会带来其他的一些问题。比如：如何保证消费不会丢失？不会被重复调用？怎么保证消息的顺序行等问题。</li><li><input disabled="" type="checkbox"> 消息一致性问题：A系统处理完业务，通过MQ发送消息给B，C系统进行后续的业务处理。如果B系统处理成功，C系统处理失败怎么办？这就需要考虑如何保证消息数据处理的一致性（分布式事务）。</li></ul><h2 id="四、几大MQ产品特点比较"><a href="#四、几大MQ产品特点比较" class="headerlink" title="四、几大MQ产品特点比较"></a>四、几大MQ产品特点比较</h2><p><img src="/markdownimages/RocketMQ/1645453206689.png"></p><p><img src="/markdownimages/RocketMQ/1645453368193.png" alt="1645453368193"></p><h2 id="五、安装环境"><a href="#五、安装环境" class="headerlink" title="五、安装环境"></a>五、安装环境</h2><h3 id="1-准备环境"><a href="#1-准备环境" class="headerlink" title="1.准备环境"></a>1.准备环境</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 移动</span><span class="token function">mv</span> jdk-8u171-linux-x64.tar.gz /usr/local/java/jdk-8u171-linux-x64.tar.gz<span class="token comment"># 解压jdk和RocketMQ</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> jdk-8u171-linux-x64.tar.gzyum <span class="token function">install</span> <span class="token function">zip</span> <span class="token comment">#压缩</span>yum <span class="token function">install</span> <span class="token function">unzip</span> <span class="token comment">#解压缩</span><span class="token function">unzip</span> rocketmq-all-4.6.0-bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置环境"><a href="#2-配置环境" class="headerlink" title="2.配置环境"></a>2.配置环境</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置环境变量</span><span class="token function">vi</span> /etc/profile<span class="token comment"># JDK环境变量</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/java/jdk1.8.0_171<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar <span class="token comment">#set rocketMQ environment</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">ROCKETMQ_HOME</span><span class="token operator">=</span>/usr/local/src/rocketmq-all-4.6.0-bin<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$ROCKETMQ_HOME</span>/bin：<span class="token environment constant">$PATH</span><span class="token comment"># 使profile生效</span><span class="token builtin class-name">source</span> /etc/profile<span class="token comment"># 验证jdk是否安装成功</span><span class="token function">java</span> <span class="token parameter variable">-version</span><span class="token function">vim</span> runserver.sh  <span class="token comment">#修改runserver.sh文件（默认4G）</span><span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;JAVA_OPT&#125;</span> -server -Xms512m -Xmx512m -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=320m"</span><span class="token function">vim</span> runbroker.sh <span class="token comment">#修改runbroker.sh文件</span><span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;JAVA_OPT&#125;</span> -server -Xms512m -Xmx512m -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=320m"</span><span class="token function">vim</span> tools.sh  <span class="token comment">#修改tools.sh文件</span><span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;JAVA_OPT&#125;</span> -server -Xms256m -Xmx256m -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=128m"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-启动RocketMQ："><a href="#3-启动RocketMQ：" class="headerlink" title="3.启动RocketMQ："></a>3.启动RocketMQ：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 后台启动运行 mqnamesrv</span><span class="token function">nohup</span> <span class="token function">sh</span> bin/mqnamesrv <span class="token operator">></span> /iubbo/rocketMQ/logs/mqnamesrv.out <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span class="token comment"># 检查启动</span><span class="token function">tail</span> mqnamesrv.out<span class="token comment"># 或</span>jps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动broker</span><span class="token comment"># 默认会读取 /conf 目录下的 broker.conf 配置文件</span><span class="token function">less</span> broker.conf<span class="token comment"># 修改：</span><span class="token assign-left variable">autoCreateTopicEnable</span><span class="token operator">=</span>true<span class="token comment">#aclEnale=true</span><span class="token comment"># 启动：</span><span class="token function">nohup</span> bin/mqbroker <span class="token parameter variable">-c</span> conf/broker.conf <span class="token operator">></span> /iubbo/rocketMQ/logs/mqbroker.out <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span class="token comment"># 检查启动</span><span class="token function">tail</span> nohup.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-命令快速验证"><a href="#4-命令快速验证" class="headerlink" title="4.命令快速验证"></a>4.命令快速验证</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动生产者</span><span class="token comment"># 向环境变量配置的端口发送1000条消息</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">NAMESRV_ADDR</span><span class="token operator">=</span>localhost:9876bin/tools.sh org.apache.rocketmq.example.quickstart.Producer<span class="token comment"># 启动消费者</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">NAMESRV_ADDR</span><span class="token operator">=</span>localhost:9876bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-RocketMQ-图形化（-社区扩展项目）"><a href="#5-RocketMQ-图形化（-社区扩展项目）" class="headerlink" title="5.RocketMQ 图形化（ 社区扩展项目）"></a>5.RocketMQ 图形化（ 社区扩展项目）</h3><p>GitHub:      rocket-externals   rocketmq-console</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> target/rocketmq-console-ng-2.0.0.jar <span class="token parameter variable">--server.port</span><span class="token operator">=</span><span class="token number">6566</span> <span class="token parameter variable">--rocketmq.config.namesrvAddr</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1:9876<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="六、RocketMQ集群搭建"><a href="#六、RocketMQ集群搭建" class="headerlink" title="六、RocketMQ集群搭建"></a>六、RocketMQ集群搭建</h2><h2 id="1-集群特点"><a href="#1-集群特点" class="headerlink" title="1.集群特点"></a>1.集群特点</h2><ul><li><input disabled="" type="checkbox"> NameServer ：是无状态的，brocker会给每个NameServer上报消息；</li><li><input disabled="" type="checkbox"> Producer ：相互之间是没有数据同步的，Consumer同；随机选取一个NameServer建立长链接，定期从NameServer获取Topic路由的信息。同时定时向NameServer发送心跳检测。</li><li><input disabled="" type="checkbox"> Broker ：主从集群，Master为主，Slave为从；Master与Slave的对应关系通过指定相同的BrokerName，不同的BrokerId来定义，BrokerId为0表示为master,<br>非0表示为Slave。Master也可部署多个。每个Broker与BrokerName集群中的所有节点建立长链接，定时注册Topic信息到所有的NameServer.</li></ul><h2 id="2-集群模式"><a href="#2-集群模式" class="headerlink" title="2.集群模式"></a>2.集群模式</h2><ul><li><input disabled="" type="checkbox"> 单Master模式</li><li><input disabled="" type="checkbox"> 多Master模式</li><li><input disabled="" type="checkbox"> 多Master多Slave（异步）</li><li><input disabled="" type="checkbox"> 多Master多Slave（同步，先同步Slave，再相应Producer）</li></ul><h3 id="a-集群机构图-两主两从-："><a href="#a-集群机构图-两主两从-：" class="headerlink" title="a.集群机构图(两主两从)："></a>a.集群机构图(两主两从)：</h3><p><img src="/markdownimages/RocketMQ/1645624596233.png" alt="1645624596233"></p><h3 id="b-集群工作流程"><a href="#b-集群工作流程" class="headerlink" title="b.集群工作流程"></a>b.集群工作流程</h3><p><img src="/markdownimages/RocketMQ/1645624693294.png" alt="1645624693294"></p><h3 id="c-集群管理工具：mqadmin"><a href="#c-集群管理工具：mqadmin" class="headerlink" title="c.集群管理工具：mqadmin"></a>c.集群管理工具：mqadmin</h3><h2 id="七、RocketMQ角色介绍"><a href="#七、RocketMQ角色介绍" class="headerlink" title="七、RocketMQ角色介绍"></a>七、RocketMQ角色介绍</h2><ul><li>producer：消息发送者；</li><li>consumer：消息接受者；</li><li>broker：暂存和传输消息；</li><li>NameServer：管理Broker；</li><li>Topic：区分消息的种类；</li><li>Message Queue：相当于是Topic的分区，用于并行发送和接收消息；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot</title>
      <link href="/2024/01/24/Spring%20Boot/"/>
      <url>/2024/01/24/Spring%20Boot/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1>]]></content>
      
      
      <categories>
          
          <category> Java 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Svn 常用命令</title>
      <link href="/2024/01/24/Svn/"/>
      <url>/2024/01/24/Svn/</url>
      
        <content type="html"><![CDATA[<h1 id="Svn"><a href="#Svn" class="headerlink" title="Svn"></a>Svn</h1><h2 id="1-Mac-Svn-安装-配置环境"><a href="#1-Mac-Svn-安装-配置环境" class="headerlink" title="1.Mac Svn 安装 配置环境"></a>1.Mac Svn 安装 配置环境</h2><h3 id="（1）-Brew安装"><a href="#（1）-Brew安装" class="headerlink" title="（1） Brew安装"></a>（1） Brew安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（2）环境变量配置"><a href="#（2）环境变量配置" class="headerlink" title="（2）环境变量配置"></a>（2）环境变量配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-Svn-常用命令"><a href="#2-Svn-常用命令" class="headerlink" title="2.Svn 常用命令"></a>2.Svn 常用命令</h2>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Svn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2024/01/24/Spring/"/>
      <url>/2024/01/24/Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1>]]></content>
      
      
      <categories>
          
          <category> Java 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/01/24/hello-world/"/>
      <url>/2024/01/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arthas</title>
      <link href="/2024/01/24/Arthas/"/>
      <url>/2024/01/24/Arthas/</url>
      
        <content type="html"><![CDATA[<h1 id="Arthas"><a href="#Arthas" class="headerlink" title="Arthas"></a>Arthas</h1><h2 id="一、Arthas简介"><a href="#一、Arthas简介" class="headerlink" title="一、Arthas简介"></a>一、Arthas简介</h2><p>Arthas 官网：<a href="https://arthas.aliyun.com/doc/install-detail.html">https://arthas.aliyun.com/doc/install-detail.html</a></p><p>Arthas-idea-plugin 插件文档：<a href="https://www.yuque.com/arthas-idea-plugin/help/pzldzl">https://www.yuque.com/arthas-idea-plugin/help/pzldzl</a></p><p>Arthas 用户案例：<a href="https://github.com/alibaba/arthas/issues?q=label:user-case">https://github.com/alibaba/arthas/issues?q=label%3Auser-case</a></p><h2 id="二、Arthas火焰图"><a href="#二、Arthas火焰图" class="headerlink" title="二、Arthas火焰图"></a>二、Arthas火焰图</h2><h3 id="1-Async-profiler"><a href="#1-Async-profiler" class="headerlink" title="1.Async-profiler"></a>1.Async-profiler</h3><p>Async-profiler 说明：<a href="https://www.yuque.com/arthas-idea-plugin/help/iisg20">https://www.yuque.com/arthas-idea-plugin/help/iisg20</a></p><h3 id="2-启动耗时火焰图"><a href="#2-启动耗时火焰图" class="headerlink" title="2.启动耗时火焰图"></a>2.启动耗时火焰图</h3><h4 id="1-在Idea的Springboot启动主类-VM-Options-上添加如下代码："><a href="#1-在Idea的Springboot启动主类-VM-Options-上添加如下代码：" class="headerlink" title="(1)在Idea的Springboot启动主类 VM Options 上添加如下代码："></a>(1)在Idea的Springboot启动主类 VM Options 上添加如下代码：</h4><p>在应用启动的JVM参数中，添加debugger参数，注意其中的suspend参数需要设为y，表示在debugger连接之前，程序会进行阻塞等待。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-agentlib:jdwp</span><span class="token operator">=</span>transport<span class="token operator">=</span>dt_socket,server<span class="token operator">=</span>y,suspend<span class="token operator">=</span>y,address<span class="token operator">=</span><span class="token number">10000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-新建一个shell窗口启动Arthas"><a href="#2-新建一个shell窗口启动Arthas" class="headerlink" title="(2)新建一个shell窗口启动Arthas"></a>(2)新建一个shell窗口启动Arthas</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">anubis:arthas-packaging-3.7.1-bin/ $ ./as.sh                                                            <span class="token punctuation">[</span><span class="token number">10</span>:05:06<span class="token punctuation">]</span>Arthas script version: <span class="token number">3.7</span>.1<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> JAVA_HOME: /Library/Java/JavaVirtualMachines/jdk-1.8.jdk/Contents/HomeFound existing <span class="token function">java</span> process, please choose one and input the serial number of the process, eg <span class="token builtin class-name">:</span> <span class="token number">1</span>. Then hit ENTER.* <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: <span class="token number">43488</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: <span class="token number">14570</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>: <span class="token number">44779</span> org.jetbrains.jps.cmdline.Launcher  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>: <span class="token number">44780</span> -- main class information unavailable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择第四个，启动profiler，由于我们需要分析启动过程的耗时阶段，所以我们需要指定跟踪采集的事件为wall</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">profiler <span class="token parameter variable">-e</span> wall start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-新建一个shell窗口触发程序启动，"><a href="#3-新建一个shell窗口触发程序启动，" class="headerlink" title="(3)新建一个shell窗口触发程序启动，"></a>(3)新建一个shell窗口触发程序启动，</h4><p>利用jdb(jdk自带的debugger工具)连接对应的JVM进程，将此应用run起来。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jdb <span class="token parameter variable">-attach</span> localhost:10000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>连接完成后，执行cont命令，让程序运行起来</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cont<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-程序启动完成后在Arthas的Shell窗口内输入"><a href="#4-程序启动完成后在Arthas的Shell窗口内输入" class="headerlink" title="(4)程序启动完成后在Arthas的Shell窗口内输入"></a>(4)程序启动完成后在Arthas的Shell窗口内输入</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">profiler stop <span class="token parameter variable">--file</span> /Users/anubis/Downloads/software/arthas-packaging-3.7.1-bin/rcs_start_server.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><input disabled="" type="checkbox"> 相关文章：<a href="https://zhuanlan.zhihu.com/p/612238709?utm_id=0">云音乐服务端应用启动时间下降40%实践分享</a></li></ul><h2 id="三、Arthas常用命令"><a href="#三、Arthas常用命令" class="headerlink" title="三、Arthas常用命令"></a>三、Arthas常用命令</h2><h3 id="1-trace"><a href="#1-trace" class="headerlink" title="1.trace"></a>1.trace</h3><p>查看方法调用链路以及方法各部分的耗时（配合arthas插件使用）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># java.* 下的函数调用默认会忽略掉。通过增加--skipJDKMethod false参数可以打印出来</span><span class="token comment"># -n 参数指定捕捉结果的次数</span>trace com.asiainfo.pay.check.analyzer.service.impl.CsvTxtAnalyzerServiceImpl columnMap  <span class="token parameter variable">-n</span> <span class="token number">5</span> <span class="token parameter variable">--skipJDKMethod</span> <span class="token boolean">false</span> <span class="token comment"># -E trace 多个类或者多个函数 '1==1' 表示全部 method1|method2|method3</span>trace <span class="token parameter variable">-E</span> com.asiainfo.pay.check.analyzer.service.impl.CsvTxtAnalyzerServiceImpl columnMap <span class="token parameter variable">-n</span> <span class="token number">5</span>  <span class="token parameter variable">--skipJDKMethod</span> <span class="token boolean">false</span> <span class="token string">'1==1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-jad"><a href="#2-jad" class="headerlink" title="2.jad"></a>2.jad</h3><p>反编译类&#x2F;方法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># jad + 类全路径</span>jad com.tracer.service.impl.CheckServiceImpl <span class="token comment"># jad + 类全路径 + 空格 + 方法名</span>jad com.tracer.service.impl.CheckServiceImpl checkFileFun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-retransform"><a href="#3-retransform" class="headerlink" title="3.retransform"></a>3.retransform</h3><p>加载外部的.class文件到jvm内</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看以及加载的类（显示Id）</span>retransform <span class="token parameter variable">-l</span><span class="token comment"># 删除指定加载的类</span>retransform <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>Id<span class="token operator">></span><span class="token comment"># 加载类到JVM（本地编译好后将class文件复制到主机上）</span>retransform /app/check/arthas-packaging-3.7.1-bin/CheckServiceImpl.class<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><input disabled="" type="checkbox"> 注意 加载类到JVM，不允许新增加字段和方法。</li></ul><h2 id="4-vmoption"><a href="#4-vmoption" class="headerlink" title="4.vmoption"></a>4.vmoption</h2><p>查看，更新 VM 诊断相关的参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>arthas@56963<span class="token punctuation">]</span>$ vmoption KEY                    VALUE                   ORIGIN                 WRITEABLE--------------------------------------------------------------------------------------------- HeapDumpBeforeFullGC   <span class="token boolean">false</span>                   DEFAULT                <span class="token boolean">true</span> <span class="token punctuation">[</span>JVM准备Full GC之前，生成堆快照<span class="token punctuation">]</span> HeapDumpAfterFullGC    <span class="token boolean">false</span>                   DEFAULT                <span class="token boolean">true</span> <span class="token punctuation">[</span>JVMFull GC之后，生成堆快照<span class="token punctuation">]</span> HeapDumpOnOutOfMemory  <span class="token boolean">false</span>                   DEFAULT                <span class="token boolean">true</span> <span class="token punctuation">[</span>当JVM遇到内存溢出错误时，是否自动创建堆内存转储<span class="token punctuation">]</span> Error HeapDumpPath                                   DEFAULT                <span class="token boolean">true</span> <span class="token punctuation">[</span>堆快照文件保存路径<span class="token punctuation">]</span> CMSAbortablePrecleanW  <span class="token number">100</span>                     DEFAULT                <span class="token boolean">true</span> <span class="token punctuation">[</span>在并发标记清除（CMS）收集器中，可中断预清理阶段等待用户线程完成的最长时<span class="token punctuation">]</span> aitMillis CMSWaitDuration        <span class="token number">2000</span>                    DEFAULT                <span class="token boolean">true</span> <span class="token punctuation">[</span>CMS收集器在执行某些操作前等待其他线程完成的最长时间（毫秒）<span class="token punctuation">]</span> CMSTriggerInterval     <span class="token parameter variable">-1</span>                      DEFAULT                <span class="token boolean">true</span> <span class="token punctuation">[</span>触发CMS垃圾回收的间隔时间（-1表示使用默认值，由JVM自行决定）<span class="token punctuation">]</span> PrintGC                <span class="token boolean">false</span>                   DEFAULT                <span class="token boolean">true</span> <span class="token punctuation">[</span>控制是否打印GC事件的基本信息<span class="token punctuation">]</span> PrintGCDetails         <span class="token boolean">true</span>                    MANAGEMENT             <span class="token boolean">true</span> <span class="token punctuation">[</span>打印GC的详细信息，包括各代的内存变化等<span class="token punctuation">]</span> PrintGCDateStamps      <span class="token boolean">false</span>                   DEFAULT                <span class="token boolean">true</span> <span class="token punctuation">[</span>在GC日志中包含日期时间戳<span class="token punctuation">]</span> PrintGCTimeStamps      <span class="token boolean">false</span>                   DEFAULT                <span class="token boolean">true</span> <span class="token punctuation">[</span>包含GC发生的时间戳（以毫秒为单位自JVM启动）<span class="token punctuation">]</span> PrintGCID              <span class="token boolean">false</span>                   DEFAULT                <span class="token boolean">true</span> <span class="token punctuation">[</span>是否在日志中包含GC事件的唯一标识符<span class="token punctuation">]</span> PrintClassHistogramBe  <span class="token boolean">false</span>                   DEFAULT                <span class="token boolean">true</span> <span class="token punctuation">[</span>在GC前或特定时刻是否打印类的直方图（即内存占用情况）<span class="token punctuation">]</span> foreFullGC PrintClassHistogramAf  <span class="token boolean">false</span>                   DEFAULT                <span class="token boolean">true</span> <span class="token punctuation">[</span>在GC后或特定时刻是否打印类的直方图（即内存占用情况）<span class="token punctuation">]</span> terFullGC PrintClassHistogram    <span class="token boolean">false</span>                   DEFAULT                <span class="token boolean">true</span> <span class="token punctuation">[</span>在特定时刻是否打印类的直方图（即内存占用情况）<span class="token punctuation">]</span> MinHeapFreeRatio       <span class="token number">0</span>                       DEFAULT                <span class="token boolean">true</span> <span class="token punctuation">[</span>控制堆内存的最小空闲比例<span class="token punctuation">]</span> MaxHeapFreeRatio       <span class="token number">100</span>                     DEFAULT                <span class="token boolean">true</span> <span class="token punctuation">[</span>控制堆内存的最大空闲比例<span class="token punctuation">]</span> PrintConcurrentLocks   <span class="token boolean">false</span>                   DEFAULT                <span class="token boolean">true</span> <span class="token punctuation">[</span>在进行垃圾回收时，是否打印持有锁的线程信息，帮助诊断死锁问题<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Arthas："><a href="#Arthas：" class="headerlink" title="Arthas："></a>Arthas：</h3><h4 id="监控："><a href="#监控：" class="headerlink" title="监控："></a>监控：</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 请注意，这些命令，都通过字节码增强技术来实现的，会在指定类的方法中插入一些切面来实现数据统计和观测，</span><span class="token comment"># 因此在线上、预发使用时，请尽量明确需要观测的类、方法以及条件，诊断结束要执行  stop 或将增强过的类执行 reset 命令。</span><span class="token comment"># 1、quit 退出当前 Arthas 客户端，其他 Arthas 客户端不受影响</span><span class="token comment"># 2、shutdown——关闭 Arthas 服务端，所有 Arthas 客户端全部退出</span><span class="token comment"># 3、stop——和shutdown命令一致</span>monitor——方法执行监控watch——方法执行数据观测trace——方法内部调用路径，并输出方法路径上的每个节点上耗时stack——输出当前方法被调用的调用路径tt——方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="watch"><a href="#watch" class="headerlink" title="watch:"></a>watch:</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">让你能方便的观察到指定方法的调用情况。能观察到的范围为：返回值、抛出异常、入参，通过编写 OGNL 表达式进行对应变量的查看。参数说明：<span class="token keyword">class</span><span class="token operator">-</span>pattern        类名表达式匹配method-pattern        方法名表达式匹配express                观察表达式condition-express    条件表达式<span class="token operator">-</span>b                    在方法调用之前观察<span class="token operator">-</span>e                    在方法异常之后观察<span class="token operator">-</span>s                    在方法返回之后观察<span class="token operator">-</span>f                     在方法结束之后<span class="token punctuation">(</span>正常返回和异常返回<span class="token punctuation">)</span>观察 默认开启<span class="token operator">-</span>E                    开启正则表达式匹配，默认为通配符匹配<span class="token operator">-</span>x                    指定输出结果的属性遍历深度，默认为 1<span class="token operator">-</span>n                     执行的次数特别说明：watch 命令定义了4个观察事件点，即 <span class="token operator">-</span>b 方法调用前，<span class="token operator">-</span>e 方法异常后，<span class="token operator">-</span>s 方法返回后，<span class="token operator">-</span>f 方法结束后4个观察事件点 <span class="token operator">-</span>b、<span class="token operator">-</span>e、<span class="token operator">-</span>s 默认关闭，<span class="token operator">-</span>f 默认打开，当指定观察点被打开后，在相应事件点会对观察表达式进行求值并输出这里要注意方法入参和方法出参的区别，有可能在中间被修改导致前后不一致，除了 <span class="token operator">-</span>b 事件点 params 代表方法入参外，其余事件都代表方法出参当使用 <span class="token operator">-</span>b 时，由于观察事件点是在方法调用前，此时返回值或异常均不存在<span class="token operator">-</span>x 代表输出结果的深度 ，默认为 1使用参考：常规用法：watch <span class="token keyword">class</span> method <span class="token punctuation">&#123;</span>params<span class="token punctuation">,</span>returnObj<span class="token punctuation">,</span>throwExp<span class="token punctuation">&#125;</span>  <span class="token operator">-</span>x 1 <span class="token string">'#cost>200'</span>观察表达式 <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> 可以包裹结果集 <span class="token punctuation">,</span> 分割。输出的表达式变量定义params 代表参数数组，returnObj 代表返回值，throwExp 代表抛出的异常。过滤耗时大于200ms的特殊用法：1、调用第一个参数的方法或属性watch <span class="token keyword">class</span> method <span class="token string">"&#123;params[0].length()&#125;"</span>  <span class="token operator">-</span>x 1如果是列表参数，则可以使用这种方式来获取列表中每个对象的指定属性watch <span class="token keyword">class</span> method <span class="token string">"&#123;params[0].&#123; #this.length()&#125;&#125;"</span> <span class="token operator">-</span>x 12、按照条件过滤如果是列表，则会过滤列表中长度大于7的字符串watch <span class="token keyword">class</span> method <span class="token string">"&#123;params[0].&#123;? #this.length() > 7&#125;&#125;"</span> <span class="token operator">-</span>x 1watch <span class="token keyword">class</span> method <span class="token string">"&#123;params,returnObj,throwExp&#125;"</span> <span class="token string">"params[0].length() > 7"</span> <span class="token operator">-</span>x 1字符串长度 > 7 才会输出 params<span class="token punctuation">[</span>0<span class="token punctuation">]</span> 的值3、过滤后统计watch <span class="token keyword">class</span> method <span class="token string">"&#123;params[0].&#123;? #this.length() > 9&#125;.size()&#125;"</span> <span class="token operator">-</span>x 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="trace"><a href="#trace" class="headerlink" title="trace:"></a>trace:</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">trace 命令能主动搜索 <span class="token keyword">class</span><span class="token operator">-</span>pattern／method-pattern 对应的方法内部调用路径，渲染和统计整个调用链路上的所有性能开销和追踪调用链路。参数说明：<span class="token keyword">class</span><span class="token operator">-</span>pattern         类名表达式匹配method-pattern         方法名表达式匹配condition-express     条件表达式<span class="token operator">-</span>E                     开启正则表达式匹配，默认为通配符匹配<span class="token operator">-</span>n                     命令执行次数<span class="token comment">#cost                 方法执行耗时</span>使用参考：常规用法：trace <span class="token keyword">class</span> method <span class="token string">'#cost>100'</span> <span class="token operator">-</span>n 1过滤大于100ms的调用链<span class="token punctuation">,</span>只输出一次特殊用法：trace命令只会trace匹配到的函数里的子调用，并不会向下trace多层。因为trace是代价比较贵的，多层trace可能会导致最终要trace的类和函数非常多。动态trace：3<span class="token punctuation">.</span>3<span class="token punctuation">.</span>0 版本后支持。打开终端1，trace run函数，可以看到打印出 listenerId: 1：<span class="token namespace">[arthas@59161]</span>$ trace demo<span class="token punctuation">.</span>MathGame runPress Q or Ctrl+C to abort<span class="token punctuation">.</span>Affect<span class="token punctuation">(</span><span class="token keyword">class</span> count: 1 <span class="token punctuation">,</span> method count: 1<span class="token punctuation">)</span> cost in 112 ms<span class="token punctuation">,</span> listenerId: 1`<span class="token operator">--</span><span class="token operator">-</span>ts=2020-07-09 16:48:11<span class="token punctuation">;</span>thread_name=main<span class="token punctuation">;</span>id=1<span class="token punctuation">;</span>is_daemon=false<span class="token punctuation">;</span>priority=5<span class="token punctuation">;</span>TCCL=sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Launcher<span class="token variable">$AppClassLoader</span>@3d4eac69    `<span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">[</span>1<span class="token punctuation">.</span>389634ms<span class="token punctuation">]</span> demo<span class="token punctuation">.</span>MathGame:run<span class="token punctuation">(</span><span class="token punctuation">)</span>        `<span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">[</span>0<span class="token punctuation">.</span>123934ms<span class="token punctuation">]</span> demo<span class="token punctuation">.</span>MathGame:primeFactors<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#24 [throws Exception]</span>现在想要深入子函数primeFactors，可以打开一个新终端2，使用telnet localhost 3658连接上arthas，再trace primeFactors时，指定listenerId。再查看终端1，可以发现trace的结果增加了一层，打印了primeFactors函数里的内容`<span class="token operator">--</span><span class="token operator">-</span>ts=2020-07-09 16:49:29<span class="token punctuation">;</span>thread_name=main<span class="token punctuation">;</span>id=1<span class="token punctuation">;</span>is_daemon=false<span class="token punctuation">;</span>priority=5<span class="token punctuation">;</span>TCCL=sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Launcher<span class="token variable">$AppClassLoader</span>@3d4eac69    `<span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">[</span>0<span class="token punctuation">.</span>492551ms<span class="token punctuation">]</span> demo<span class="token punctuation">.</span>MathGame:run<span class="token punctuation">(</span><span class="token punctuation">)</span>        `<span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">[</span>0<span class="token punctuation">.</span>113929ms<span class="token punctuation">]</span> demo<span class="token punctuation">.</span>MathGame:primeFactors<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#24 [throws Exception]</span>            `<span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">[</span>0<span class="token punctuation">.</span>061462ms<span class="token punctuation">]</span> demo<span class="token punctuation">.</span>MathGame:primeFactors<span class="token punctuation">(</span><span class="token punctuation">)</span>                `<span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">[</span>0<span class="token punctuation">.</span>001018ms<span class="token punctuation">]</span> <span class="token keyword">throw</span>:java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalArgumentException<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#46</span>通过指定listenerId的方式动态trace，可以不断深入。另外 watch/tt/monitor等命令也支持类似的功能。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Arthas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arthas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bat 脚本</title>
      <link href="/2024/01/24/Bat%20%E8%84%9A%E6%9C%AC/"/>
      <url>/2024/01/24/Bat%20%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="Bat脚本"><a href="#Bat脚本" class="headerlink" title="Bat脚本"></a>Bat脚本</h1><h2 id="1-常用语法"><a href="#1-常用语法" class="headerlink" title="1.常用语法"></a>1.常用语法</h2><h3 id="（1）-接受运行参数"><a href="#（1）-接受运行参数" class="headerlink" title="（1）.接受运行参数"></a>（1）.接受运行参数</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">@<span class="token function">echo</span> offsetlocalTITLE 脚本窗口名称<span class="token function">echo</span> 设置窗口字体颜色COLOR A<span class="token function">set</span> <span class="token operator">/</span>p <span class="token keyword">var</span>=接受参数：<span class="token function">echo</span> 打印接收参数<span class="token operator">%</span><span class="token keyword">var</span><span class="token operator">%</span><span class="token function">echo</span> 调用外部脚本python G:<span class="token operator">/</span>demo<span class="token punctuation">.</span>py <span class="token operator">%</span><span class="token keyword">var</span><span class="token operator">%</span> <span class="token function">echo</span> 执行完毕<span class="token punctuation">,</span>任意键退出PAUSE >nul<span class="token keyword">EXIT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）-以管理员身份运行"><a href="#（2）-以管理员身份运行" class="headerlink" title="（2）.以管理员身份运行"></a>（2）.以管理员身份运行</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">echo</span> 以管理员身份运行<span class="token function">PUSHD</span> <span class="token operator">%</span>~DP0 &amp; cd <span class="token operator">/</span>d <span class="token string">"%~dp0"</span><span class="token operator">%</span>1 <span class="token operator">%</span>2mshta vbscript:createobject<span class="token punctuation">(</span><span class="token string">"shell.application"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shellexecute<span class="token punctuation">(</span><span class="token string">"%~s0"</span><span class="token punctuation">,</span><span class="token string">"goto :runas"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"runas"</span><span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>close<span class="token punctuation">)</span>&amp;goto :eof:runas<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（3）-关闭进程"><a href="#（3）-关闭进程" class="headerlink" title="（3）.关闭进程"></a>（3）.关闭进程</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">echo</span> 关闭Redis服务端与客户端taskkill <span class="token operator">/</span>im  redis-server<span class="token punctuation">.</span>exe <span class="token operator">/</span>f<span class="token function">echo</span> 关闭6379端口<span class="token function">set</span> port=6379<span class="token keyword">for</span> <span class="token operator">/</span>f <span class="token string">"tokens=1-5"</span> <span class="token operator">%</span><span class="token operator">%</span>i in <span class="token punctuation">(</span><span class="token string">'netstat -ano^|findstr ":%port2%"'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> taskkill <span class="token operator">/</span>pid <span class="token operator">%</span><span class="token operator">%</span>m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（4）-启动exe"><a href="#（4）-启动exe" class="headerlink" title="（4）.启动exe"></a>（4）.启动exe</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">echo</span> 启动指定目录exe程序<span class="token function">echo</span>  名称           切换盘符       进入具体目录指定exe文件              并执行命令<span class="token function">start</span> <span class="token string">"Redis服务端"</span> <span class="token operator">/</span>d G:\ cmd <span class="token operator">/</span>k <span class="token string">"cd software\Redis-x64-3.0.504&amp;&amp;redis-server.exe redis.windows.conf"</span><span class="token function">echo</span> 打开网页cd <span class="token operator">/</span>d C:\Google\Chrome\Application<span class="token function">start</span> chrome<span class="token punctuation">.</span>exe  https:<span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（5）-nircmd"><a href="#（5）-nircmd" class="headerlink" title="（5）.nircmd"></a>（5）.nircmd</h3><ul><li><input disabled="" type="checkbox"> setlocal和endlocal：setlocal和endlocal命令执行结果是让中间的程序对于系统变量的改变只在程序内起作用，不会影响整个系统级别。</li><li><input disabled="" type="checkbox"> nircmd：<a href="https://www.nirsoft.net/utils/nircmd.html">官网</a> （官网最下方选择何时版本下载）</li></ul><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">@<span class="token function">echo</span> offchcp 65001<span class="token function">set</span> desktop=C:\Users\anubis\Desktop<span class="token function">set</span> NIRCMD_PATH=<span class="token string">"C:\Windows\nircmd.exe"</span><span class="token function">echo</span> <span class="token punctuation">[</span>1<span class="token punctuation">]</span> 开始聚焦 aTrust 窗口<span class="token operator">%</span>NIRCMD_PATH% win activate title <span class="token string">"窗口名称"</span>timeout <span class="token operator">/</span>t 2 >nul<span class="token function">echo</span> <span class="token punctuation">[</span>2<span class="token punctuation">]</span> 移动鼠标<span class="token operator">%</span>NIRCMD_PATH% setcursorwin 100 50<span class="token function">echo</span> <span class="token punctuation">[</span>3<span class="token punctuation">]</span> Tab 定位到密码输入框<span class="token operator">%</span>NIRCMD_PATH% sendkey 0x9 press<span class="token operator">%</span>NIRCMD_PATH% sendkey 0x9 press<span class="token function">echo</span> <span class="token punctuation">[</span>4<span class="token punctuation">]</span> 设置剪贴板 <span class="token operator">-</span>> password<span class="token operator">%</span>NIRCMD_PATH% clipboard <span class="token function">set</span> <span class="token string">"password"</span><span class="token function">echo</span> <span class="token punctuation">[</span>5<span class="token punctuation">]</span> 粘贴<span class="token operator">%</span>NIRCMD_PATH% sendkey ctrl down<span class="token operator">%</span>NIRCMD_PATH% sendkey v down<span class="token operator">%</span>NIRCMD_PATH% sendkey ctrl up<span class="token operator">%</span>NIRCMD_PATH% sendkey v up<span class="token function">echo</span> <span class="token punctuation">[</span>5<span class="token punctuation">]</span> 聚焦程序窗口<span class="token operator">%</span>NIRCMD_PATH% win activate title <span class="token string">"窗口名称"</span>timeout <span class="token operator">/</span>t 2 >nul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">@<span class="token function">echo</span> offchcp 65001setlocal enabledelayedexpansion<span class="token function">set</span> desktop=C:\Users\anubis\Desktop<span class="token function">set</span> NIRCMD_PATH=<span class="token string">"C:\Windows\nircmd.exe"</span><span class="token function">echo</span> <span class="token punctuation">[</span>0<span class="token punctuation">]</span> 启动指定目录exe，并等待启动cd <span class="token operator">/</span>d <span class="token string">"C:\Program Files (x86)\Sangfor\"</span><span class="token function">start</span> <span class="token string">""</span> <span class="token string">"text.exe"</span>timeout <span class="token operator">/</span>t 3 >nul<span class="token function">echo</span> <span class="token punctuation">[</span>1<span class="token punctuation">]</span> 递归循环检测窗口:LOOP:: 检测窗口是否存在<span class="token function">set</span> <span class="token string">"windowTitle=窗口名称"</span><span class="token function">set</span> <span class="token string">"windowFound=false"</span><span class="token keyword">for</span> <span class="token operator">/</span>f <span class="token string">"tokens=*"</span> <span class="token operator">%</span><span class="token operator">%</span>a in <span class="token punctuation">(</span><span class="token string">'tasklist /v ^| findstr /i "%windowTitle%"'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>    <span class="token function">set</span> <span class="token string">"windowFound=true"</span><span class="token punctuation">)</span>:: 如果窗口存在，则继续执行<span class="token keyword">if</span> <span class="token operator">!</span>windowFound! equ true <span class="token punctuation">(</span>    <span class="token function">echo</span> <span class="token punctuation">[</span>3<span class="token punctuation">]</span> aTrust 窗口存在    goto <span class="token keyword">CONTINUE</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">(</span>    <span class="token function">echo</span> <span class="token punctuation">[</span>2<span class="token punctuation">]</span> aTrust 窗口不存在等待中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    timeout <span class="token operator">/</span>t 3 >nul    goto LOOP<span class="token punctuation">)</span>:<span class="token keyword">CONTINUE</span><span class="token function">echo</span> <span class="token punctuation">[</span>4<span class="token punctuation">]</span> 开始聚焦窗口<span class="token operator">%</span>NIRCMD_PATH% win activate title <span class="token string">"窗口名称"</span>timeout <span class="token operator">/</span>t 2 >nul<span class="token function">echo</span> <span class="token punctuation">[</span>5<span class="token punctuation">]</span> 移动鼠标<span class="token operator">%</span>NIRCMD_PATH% setcursorwin 100 50<span class="token function">echo</span> <span class="token punctuation">[</span>6<span class="token punctuation">]</span> Tab 定位到密码输入框<span class="token operator">%</span>NIRCMD_PATH% sendkey 0x9 press<span class="token operator">%</span>NIRCMD_PATH% sendkey 0x9 press<span class="token function">echo</span> <span class="token punctuation">[</span>7<span class="token punctuation">]</span> 设置剪贴板 <span class="token operator">-</span>> password<span class="token operator">%</span>NIRCMD_PATH% clipboard <span class="token function">set</span> <span class="token string">"password"</span><span class="token function">echo</span> <span class="token punctuation">[</span>8<span class="token punctuation">]</span> 粘贴 <span class="token operator">-</span>> password<span class="token operator">%</span>NIRCMD_PATH% sendkey ctrl down<span class="token operator">%</span>NIRCMD_PATH% sendkey v down<span class="token operator">%</span>NIRCMD_PATH% sendkey ctrl up<span class="token operator">%</span>NIRCMD_PATH% sendkey v up<span class="token function">echo</span> <span class="token punctuation">[</span>9<span class="token punctuation">]</span> Tab 定位到确定按钮并点击<span class="token operator">%</span>NIRCMD_PATH% sendkey 0x9 press<span class="token operator">%</span>NIRCMD_PATH% sendkey 0x9 press<span class="token function">echo</span> <span class="token punctuation">[</span>8<span class="token punctuation">]</span> 点击 enter 键<span class="token operator">%</span>NIRCMD_PATH% sendkey enter press:: 结束脚本endlocal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> win脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DissionPage</title>
      <link href="/2024/01/24/DissionPage/"/>
      <url>/2024/01/24/DissionPage/</url>
      
        <content type="html"><![CDATA[<h1 id="DissionPage"><a href="#DissionPage" class="headerlink" title="DissionPage"></a>DissionPage</h1><h2 id="一、官网文档"><a href="#一、官网文档" class="headerlink" title="一、官网文档"></a>一、官网文档</h2><p><a href="https://github.com/g1879/DrissionPage">DrissionPage GitHub 仓库地址</a><br><a href="https://g1879.gitee.io/drissionpagedocs/usage_introduction/">DrissionPage 官网文档</a></p><h2 id="二、下载安装"><a href="#二、下载安装" class="headerlink" title="二、下载安装"></a>二、下载安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span>pip <span class="token function">install</span> DrissionPage<span class="token comment"># 升级最新版</span>pip <span class="token function">install</span> DrissionPage <span class="token parameter variable">--upgrade</span><span class="token comment"># 升级指定版本升级</span>pip <span class="token function">install</span> <span class="token assign-left variable">DrissionPage</span><span class="token operator">==</span><span class="token number">4.0</span>.0b17<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><input disabled="" type="checkbox"> DrissionPage 是一个基于 python 的网页自动化工具。</li><li><input disabled="" type="checkbox"> 支持系统：Windows、Linux、Mac</li><li><input disabled="" type="checkbox"> python版本：3.6及以上</li><li><input disabled="" type="checkbox"> 支持浏览器：Chromium内核浏览器(如Chrome和Edge)，电子应用</li></ul><h2 id="三、例子"><a href="#三、例子" class="headerlink" title="三、例子"></a>三、例子</h2><h3 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 考试题库数据表 </span><span class="token comment">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> a_secure_example_detail<span class="token punctuation">(</span>    detail_id   <span class="token keyword">bigint</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">'详情ID'</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    info_id     <span class="token keyword">bigint</span>        <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'信息ID'</span><span class="token punctuation">,</span>    <span class="token keyword">type</span>        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'题目类型'</span><span class="token punctuation">,</span>    tag         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'题目标签'</span><span class="token punctuation">,</span>    answer      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'答案'</span><span class="token punctuation">,</span>    question    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'题干'</span><span class="token punctuation">,</span>    option_A    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'选项A'</span><span class="token punctuation">,</span>    option_B    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'选项B'</span><span class="token punctuation">,</span>    option_C    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'选项B'</span><span class="token punctuation">,</span>    option_D    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'选项D'</span><span class="token punctuation">,</span>    <span class="token keyword">status</span>      <span class="token keyword">smallint</span>      <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'0:正常,1:失效'</span><span class="token punctuation">,</span>    create_date <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'任务创建时间'</span><span class="token punctuation">,</span>    update_date <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'任务更新时间'</span><span class="token punctuation">)</span>    <span class="token keyword">comment</span> <span class="token string">'考试题库数据表'</span> <span class="token keyword">charset</span> <span class="token operator">=</span> utf8mb4<span class="token punctuation">;</span>    <span class="token comment">-- 安全考试答题信息表 </span><span class="token comment">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> a_secure_example_info<span class="token punctuation">(</span>    info_id     <span class="token keyword">bigint</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">'信息ID'</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    base_url    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'邀请答题url'</span><span class="token punctuation">,</span>    url         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'答题详情url'</span><span class="token punctuation">,</span>    user_name   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'答题人'</span><span class="token punctuation">,</span>    user_email  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'答题邮箱'</span><span class="token punctuation">,</span>    <span class="token keyword">status</span>      <span class="token keyword">smallint</span>      <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'0:未开始,1:进行中,2:完成'</span><span class="token punctuation">,</span>    create_date <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'任务创建时间'</span><span class="token punctuation">,</span>    update_date <span class="token keyword">timestamp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'任务更新时间'</span><span class="token punctuation">)</span>    <span class="token keyword">comment</span> <span class="token string">'安全考试答题信息表'</span> <span class="token keyword">charset</span> <span class="token operator">=</span> utf8mb4<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">from</span> DrissionPage <span class="token keyword">import</span> ChromiumPage<span class="token keyword">from</span> DrissionPage<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>constants <span class="token keyword">import</span> NoneElement<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token punctuation">,</span> Column<span class="token punctuation">,</span> BigInteger<span class="token punctuation">,</span> String<span class="token punctuation">,</span> SmallInteger<span class="token punctuation">,</span> TIMESTAMP<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimeBase <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建数据库引擎</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql://root:root@127.0.0.1:3306/spider_db'</span><span class="token punctuation">,</span> echo<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 创建所有的表</span>Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token comment"># 创建一个会话</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session <span class="token operator">=</span> Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 安全考试答题信息表</span><span class="token keyword">class</span> <span class="token class-name">SecureExampleInfo</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'a_secure_example_info'</span>    info_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>BigInteger<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    base_url <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    user_name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    user_email <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    status <span class="token operator">=</span> Column<span class="token punctuation">(</span>SmallInteger<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># 0:未开始,1:进行中,2:完成</span>    create_date <span class="token operator">=</span> Column<span class="token punctuation">(</span>TIMESTAMP<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    update_date <span class="token operator">=</span> Column<span class="token punctuation">(</span>TIMESTAMP<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 考试题库数据表</span><span class="token keyword">class</span> <span class="token class-name">SecureExampleDetail</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'a_secure_example_detail'</span>    detail_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>BigInteger<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    info_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>BigInteger<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token builtin">type</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    tag <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    answer <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    question <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    option_A <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    option_B <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    option_C <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    option_D <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    status <span class="token operator">=</span> Column<span class="token punctuation">(</span>SmallInteger<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># 0:正常,1:失效</span>    create_date <span class="token operator">=</span> Column<span class="token punctuation">(</span>TIMESTAMP<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    update_date <span class="token operator">=</span> Column<span class="token punctuation">(</span>TIMESTAMP<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">saveInfoUrl</span><span class="token punctuation">(</span>base_url<span class="token punctuation">,</span> url<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> user_email<span class="token punctuation">)</span><span class="token punctuation">:</span>    session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>SecureExampleInfo<span class="token punctuation">(</span>        base_url<span class="token operator">=</span>base_url<span class="token punctuation">,</span>        url<span class="token operator">=</span>url<span class="token punctuation">,</span>        user_name<span class="token operator">=</span>user_name<span class="token punctuation">,</span>        user_email<span class="token operator">=</span>user_email<span class="token punctuation">,</span>        status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>        create_date<span class="token operator">=</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        update_date<span class="token operator">=</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span>    session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">saveQuestion</span><span class="token punctuation">(</span>details_to_insert<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 添加对象到会话</span>    session<span class="token punctuation">.</span>add_all<span class="token punctuation">(</span>details_to_insert<span class="token punctuation">)</span>    <span class="token comment"># 增，删，改需要提交会话 查询不需要</span>    session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">queryToDoTaskInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>SecureExampleInfo<span class="token punctuation">)</span><span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">updateQuestionTaskInfo</span><span class="token punctuation">(</span>info_id<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">:</span>    session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>SecureExampleInfo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>SecureExampleInfo<span class="token punctuation">.</span>info_id <span class="token operator">==</span> info_id<span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">"status"</span><span class="token punctuation">:</span> status<span class="token punctuation">,</span>        <span class="token string">"update_date"</span><span class="token punctuation">:</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getAnswer</span><span class="token punctuation">(</span>detail_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>SecureExampleDetail<span class="token punctuation">)</span><span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>detail_id<span class="token operator">=</span>detail_id<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getQuestion</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">,</span> question<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>SecureExampleDetail<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>        SecureExampleDetail<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> <span class="token builtin">type</span><span class="token punctuation">,</span>        SecureExampleDetail<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span>        SecureExampleDetail<span class="token punctuation">.</span>question <span class="token operator">==</span> question    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> base_url<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> user_email<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span>    tab <span class="token operator">=</span> page<span class="token punctuation">.</span>new_tab<span class="token punctuation">(</span>base_url<span class="token punctuation">)</span>    <span class="token comment"># 定位我知道了按钮</span>    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">'#btn-introduction'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 输入姓名邮箱</span>    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">'xpath://input[@placeholder="请输入姓名"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">input</span><span class="token punctuation">(</span>user_name<span class="token punctuation">)</span>    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">'xpath://input[@placeholder="请输入邮箱"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">input</span><span class="token punctuation">(</span>user_email<span class="token punctuation">)</span>    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">'#login'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 点击重新作答</span>    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">'xpath://div[@class="exam-end-btn"]/a[1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 定位我知道了按钮</span>    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">'#btn-introduction'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">'#toExam'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 立即交卷获取题库</span>        saveNowInfoUrl<span class="token punctuation">(</span>tab<span class="token punctuation">,</span> base_url<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> user_email<span class="token punctuation">)</span>        login<span class="token punctuation">(</span>page<span class="token punctuation">,</span> base_url<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> user_email<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">-</span>count<span class="token punctuation">)</span>    <span class="token keyword">elif</span> count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 递归立即交卷结束</span>        <span class="token keyword">return</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 登陆后自动答题</span>        automateAnswer<span class="token punctuation">(</span>tab<span class="token punctuation">)</span>        saveNowInfoUrl<span class="token punctuation">(</span>page<span class="token punctuation">,</span> base_url<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> user_email<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token keyword">def</span> <span class="token function">saveNowInfoUrl</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> base_url<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> user_email<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 交卷</span>    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">'xpath://div[@class="question-panels"]/div/div[2]/button[1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 查看题目详情</span>    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">'xpath://div[@class="modal"]/div/div/div[@class="modal-footer"]/button[2]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 保存题目详情信息url</span>    saveInfoUrl<span class="token punctuation">(</span>base_url<span class="token punctuation">,</span> tab<span class="token punctuation">.</span>url<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> user_email<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">saveDetailUrl</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> url<span class="token punctuation">,</span> info_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"========> 开始执行 info_id："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>info_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    updateQuestionTaskInfo<span class="token punctuation">(</span>info_id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># 创建页面对象，并启动或接管浏览器</span>    tab <span class="token operator">=</span> page<span class="token punctuation">.</span>new_tab<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    x <span class="token operator">=</span> <span class="token string">'xpath:'</span>    q_xpath <span class="token operator">=</span> <span class="token string">'//div[@id="report-answer"]/div[@class="question" or @class="question "]'</span>    size <span class="token operator">=</span> tab<span class="token punctuation">.</span>eles<span class="token punctuation">(</span>x <span class="token operator">+</span> q_xpath<span class="token punctuation">)</span><span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span>    details_to_insert <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># print(index)</span>        option_C <span class="token operator">=</span> <span class="token string">''</span>        option_D <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">if</span> index <span class="token operator">&lt;=</span> <span class="token number">40</span><span class="token punctuation">:</span>            q_c <span class="token operator">=</span> tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span>x <span class="token operator">+</span> q_xpath <span class="token operator">+</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']/ul/li[3]'</span><span class="token punctuation">)</span>            q_d <span class="token operator">=</span> tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span>x <span class="token operator">+</span> q_xpath <span class="token operator">+</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']/ul/li[4]'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>q_c<span class="token punctuation">,</span> NoneElement<span class="token punctuation">)</span><span class="token punctuation">:</span>                option_C <span class="token operator">=</span> q_c<span class="token punctuation">.</span>text            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>q_d<span class="token punctuation">,</span> NoneElement<span class="token punctuation">)</span><span class="token punctuation">:</span>                option_D <span class="token operator">=</span> q_d<span class="token punctuation">.</span>text        details_to_insert<span class="token punctuation">.</span>append<span class="token punctuation">(</span>            SecureExampleDetail<span class="token punctuation">(</span>                info_id<span class="token operator">=</span>info_id<span class="token punctuation">,</span>                <span class="token builtin">type</span><span class="token operator">=</span>tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span>                    x <span class="token operator">+</span> q_xpath <span class="token operator">+</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']/div[1]/span[1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>                tag<span class="token operator">=</span>tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span>                    x <span class="token operator">+</span> q_xpath <span class="token operator">+</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']/div[1]/span[2]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>                answer<span class="token operator">=</span>tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span>                    x <span class="token operator">+</span> q_xpath <span class="token operator">+</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']/div[4]/pre'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>                question<span class="token operator">=</span>tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span>x <span class="token operator">+</span> q_xpath <span class="token operator">+</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                    index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']/div[2]/pre'</span> <span class="token operator">+</span> <span class="token string">' | '</span> <span class="token operator">+</span> q_xpath <span class="token operator">+</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>                    index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']/div[2]/p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>                option_A<span class="token operator">=</span>tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span>                    x <span class="token operator">+</span> q_xpath <span class="token operator">+</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']/ul/li[1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>                option_B<span class="token operator">=</span>tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span>                    x <span class="token operator">+</span> q_xpath <span class="token operator">+</span> <span class="token string">'['</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']/ul/li[2]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>                option_C<span class="token operator">=</span>option_C<span class="token punctuation">,</span>                option_D<span class="token operator">=</span>option_D<span class="token punctuation">,</span>                status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>                create_date<span class="token operator">=</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                update_date<span class="token operator">=</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"========> info_id："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>info_id<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 页面解析完成开始入库，入库条数："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>details_to_insert<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    saveQuestion<span class="token punctuation">(</span>details_to_insert<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"========> info_id："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>info_id<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 入库完成"</span><span class="token punctuation">)</span>    updateQuestionTaskInfo<span class="token punctuation">(</span>info_id<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># TODO 补全 Xpath</span><span class="token keyword">def</span> <span class="token function">automateAnswer</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"========> 开始自动答题"</span><span class="token punctuation">)</span>    e_question <span class="token operator">=</span> tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment"># 获取答题页面题干</span>    e_type <span class="token operator">=</span> tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment"># 获取答题页面类型</span>    e_A <span class="token operator">=</span> tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token comment"># 获取答题页面选项</span>    e_B <span class="token operator">=</span> tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    e_C <span class="token operator">=</span> <span class="token string">''</span>    e_D <span class="token operator">=</span> <span class="token string">''</span>    selectIndex <span class="token operator">=</span> <span class="token number">0</span>    selectIndexs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> e_type <span class="token operator">==</span> <span class="token string">'[ 判断题 ]'</span><span class="token punctuation">:</span>        e_C <span class="token operator">=</span> tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        e_D <span class="token operator">=</span> tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    questionList <span class="token operator">=</span> getQuestion<span class="token punctuation">(</span>e_type<span class="token punctuation">,</span> e_question<span class="token punctuation">)</span>    <span class="token keyword">if</span> questionList<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment"># 可以查到</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> questionList<span class="token punctuation">:</span>            <span class="token keyword">if</span> e_type <span class="token operator">==</span> <span class="token string">'[ 判断题 ]'</span><span class="token punctuation">:</span>                txt <span class="token operator">=</span> <span class="token string">''</span>                <span class="token keyword">if</span> k<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'A'</span><span class="token punctuation">:</span>                    txt <span class="token operator">=</span> k<span class="token punctuation">.</span>option_A                <span class="token keyword">if</span> k<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">:</span>                    txt <span class="token operator">=</span> k<span class="token punctuation">.</span>option_B                <span class="token keyword">if</span> txt <span class="token operator">==</span> e_A<span class="token punctuation">:</span>                    selectIndex <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    selectIndex <span class="token operator">=</span> <span class="token number">2</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                temp <span class="token operator">=</span> <span class="token punctuation">[</span>k<span class="token punctuation">.</span>option_A<span class="token punctuation">,</span>k<span class="token punctuation">.</span>option_B<span class="token punctuation">,</span>k<span class="token punctuation">.</span>option_C<span class="token punctuation">,</span>k<span class="token punctuation">.</span>option_D<span class="token punctuation">]</span>                <span class="token keyword">if</span> e_A <span class="token keyword">in</span> temp <span class="token keyword">and</span> e_B <span class="token keyword">in</span> temp <span class="token keyword">and</span> e_C <span class="token keyword">in</span> temp <span class="token keyword">and</span> e_D <span class="token keyword">in</span> temp<span class="token punctuation">:</span>                    <span class="token keyword">if</span> e_type <span class="token operator">==</span> <span class="token string">'[ 单选题 ]'</span><span class="token punctuation">:</span>                        txt <span class="token operator">=</span> <span class="token string">''</span>                        <span class="token keyword">if</span> k<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'A'</span><span class="token punctuation">:</span> txt <span class="token operator">=</span> k<span class="token punctuation">.</span>option_A                        <span class="token keyword">if</span> k<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">:</span> txt <span class="token operator">=</span> k<span class="token punctuation">.</span>option_B                        <span class="token keyword">if</span> k<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">:</span> txt <span class="token operator">=</span> k<span class="token punctuation">.</span>option_C                        <span class="token keyword">if</span> k<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'D'</span><span class="token punctuation">:</span> txt <span class="token operator">=</span> k<span class="token punctuation">.</span>option_D                        <span class="token keyword">if</span> txt <span class="token operator">==</span> e_A<span class="token punctuation">:</span> selectIndex <span class="token operator">=</span> <span class="token number">1</span>                        <span class="token keyword">if</span> txt <span class="token operator">==</span> e_B<span class="token punctuation">:</span> selectIndex <span class="token operator">=</span> <span class="token number">2</span>                        <span class="token keyword">if</span> txt <span class="token operator">==</span> e_C<span class="token punctuation">:</span> selectIndex <span class="token operator">=</span> <span class="token number">3</span>                        <span class="token keyword">if</span> txt <span class="token operator">==</span> e_D<span class="token punctuation">:</span> selectIndex <span class="token operator">=</span> <span class="token number">4</span>                    <span class="token keyword">elif</span> e_type <span class="token operator">==</span> <span class="token string">'[ 多选题 ]'</span><span class="token punctuation">:</span>                        value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                        kas <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>answer<span class="token punctuation">)</span>                        <span class="token keyword">for</span> ka <span class="token keyword">in</span> kas<span class="token punctuation">:</span>                            <span class="token keyword">if</span> ka<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'A'</span><span class="token punctuation">:</span> value<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">.</span>option_A<span class="token punctuation">)</span>                            <span class="token keyword">if</span> ka<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">:</span> value<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">.</span>option_B<span class="token punctuation">)</span>                            <span class="token keyword">if</span> ka<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">:</span> value<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">.</span>option_C<span class="token punctuation">)</span>                            <span class="token keyword">if</span> ka<span class="token punctuation">.</span>answer <span class="token operator">==</span> <span class="token string">'D'</span><span class="token punctuation">:</span> value<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">.</span>option_D<span class="token punctuation">)</span>                        <span class="token keyword">if</span> e_A <span class="token keyword">in</span> value<span class="token punctuation">:</span> selectIndexs<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> e_B <span class="token keyword">in</span> value<span class="token punctuation">:</span> selectIndexs<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> e_C <span class="token keyword">in</span> value<span class="token punctuation">:</span> selectIndexs<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> e_D <span class="token keyword">in</span> value<span class="token punctuation">:</span> selectIndexs<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment"># 空着下一题</span>                    tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 选择选项 selectIndex,selectIndexs</span>        <span class="token keyword">if</span> e_type <span class="token operator">==</span> <span class="token string">'[ 多选题 ]'</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> index <span class="token keyword">in</span> selectIndexs<span class="token punctuation">:</span>                tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://["</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://["</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>selectIndex<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        index <span class="token operator">=</span> tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment"># 下一题</span>        <span class="token keyword">if</span> index <span class="token operator">!=</span> <span class="token number">50</span><span class="token punctuation">:</span>            tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment"># 查不到</span>        tab<span class="token punctuation">.</span>ele<span class="token punctuation">(</span><span class="token string">"xpath://"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    base_url <span class="token operator">=</span> <span class="token string">'https://XXXX'</span>    user_name <span class="token operator">=</span> <span class="token string">'XX'</span>    user_email <span class="token operator">=</span> <span class="token string">'XXX@XXX.com'</span>    page <span class="token operator">=</span> ChromiumPage<span class="token punctuation">(</span><span class="token punctuation">)</span>    page<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url<span class="token punctuation">)</span>    <span class="token comment"># 【1】获取 url 执行3次</span>    <span class="token comment"># login(page, base_url, user_name, user_email, 3)</span>    <span class="token comment"># 【2】执行已交卷的待入库题目</span>    secureExampleInfoList <span class="token operator">=</span> queryToDoTaskInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> secureExampleInfoList<span class="token punctuation">:</span>        <span class="token comment"># 多线程同时处理多个页面</span>        Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>saveDetailUrl<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> item<span class="token punctuation">.</span>url<span class="token punctuation">,</span> item<span class="token punctuation">.</span>info_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 【3 自动答题</span>    <span class="token comment"># login(base_url, user_name, user_email, -1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DissionPage </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo</title>
      <link href="/2024/01/24/Dubbo/"/>
      <url>/2024/01/24/Dubbo/</url>
      
        <content type="html"><![CDATA[<h1 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h1>]]></content>
      
      
      <categories>
          
          <category> Java 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Homebrew</title>
      <link href="/2024/01/24/Homebrew/"/>
      <url>/2024/01/24/Homebrew/</url>
      
        <content type="html"><![CDATA[<h1 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/bin/zsh <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-安装-卸载软件"><a href="#2-安装-卸载软件" class="headerlink" title="2.安装&#x2F;卸载软件"></a>2.安装&#x2F;卸载软件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认安装最新版</span>brew <span class="token function">install</span> <span class="token function">node</span><span class="token comment"># 安装指定版本</span>brew <span class="token function">install</span> node@14.16.8<span class="token comment"># 切换版本</span>brew switch <span class="token function">node</span> <span class="token number">16.0</span>.0<span class="token comment"># 卸载node</span>brew uninstall <span class="token function">node</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-更新软件"><a href="#3-更新软件" class="headerlink" title="3.更新软件"></a>3.更新软件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新安装过的软件(如果不加软件名，就更新所有可以更新的软件)</span>brew upgrade name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-服务相关"><a href="#4-服务相关" class="headerlink" title="4.服务相关"></a>4.服务相关</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 服务列表</span>brew services list<span class="token comment"># 启动/停止/重启 服务</span>brew services start/stop/restart serverName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-其他常用命令"><a href="#5-其他常用命令" class="headerlink" title="5.其他常用命令"></a>5.其他常用命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看brew配置</span>brew config<span class="token comment"># 查看node安装信息</span>brew info <span class="token function">node</span><span class="token comment"># 查看已安装软件</span>brew list<span class="token comment"># 查看已安装软件版本号</span>brew list <span class="token parameter variable">--versions</span><span class="token comment"># 搜索可用node相关软件</span>brew search <span class="token function">node</span><span class="token comment"># 自身更新</span>brew update brew<span class="token comment"># 清除下载的缓存</span>brew cleanup<span class="token comment"># 诊断brew，并给出修复命令</span>brew doctor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Homebrew </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Homebrew </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA 常用配置</title>
      <link href="/2024/01/24/IntelliJ%20IDEA%20%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/01/24/IntelliJ%20IDEA%20%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="IntelliJ-IDEA-常用配置"><a href="#IntelliJ-IDEA-常用配置" class="headerlink" title="IntelliJ IDEA 常用配置"></a>IntelliJ IDEA 常用配置</h1><h2 id="一、常用-Plugins"><a href="#一、常用-Plugins" class="headerlink" title="一、常用 Plugins"></a>一、常用 Plugins</h2><ul><li><input disabled="" type="checkbox"> Translation：翻译插件</li><li><input disabled="" type="checkbox"> arthas idea：arthas增强工具</li><li><input disabled="" type="checkbox"> CamelCase：字符串大小写转换</li><li><input disabled="" type="checkbox"> CodeGeex：AI代码生成工具</li><li><input disabled="" type="checkbox"> Maven Helper：依赖整理工具</li><li><input disabled="" type="checkbox"> LeetCode Editor：LeetCode工具</li><li><input disabled="" type="checkbox"> GenerateAllSetter：自动生成对象setter调用</li><li><input disabled="" type="checkbox"> GenerateSerialVersionUID：自动生成SerialVersionUID</li><li><input disabled="" type="checkbox"> EasyCode-MybatisCodeHelper：代码生成插件，支持自定义任意模板</li><li><input disabled="" type="checkbox"> Extra ToolWindow Colorful lcons：图标插件</li><li><input disabled="" type="checkbox"> Rainbow Brackets：括号主题插件</li><li><input disabled="" type="checkbox"> The Doki Theme：主题插件</li><li><input disabled="" type="checkbox"> Nginx Configuration：Nginx配置文件高亮插件</li><li><input disabled="" type="checkbox"> Regex Rename Files：批量正则重命名文件</li><li><input disabled="" type="checkbox"> Java Mybatis SQL Scanner：扫描 Mybatis SQL XML 文件,分析出不规范或者潜在风险的SQL</li><li><input disabled="" type="checkbox"> Alibaba Java Coding Guidelines：阿里代码规范插件</li><li><input disabled="" type="checkbox"> Smart Input：自动切换输入法</li></ul><h2 id="二、初始化配置"><a href="#二、初始化配置" class="headerlink" title="二、初始化配置"></a>二、初始化配置</h2><h3 id="1-Idea初始化配置"><a href="#1-Idea初始化配置" class="headerlink" title="1.Idea初始化配置"></a>1.Idea初始化配置</h3><h4 id="设置运行内存"><a href="#设置运行内存" class="headerlink" title="设置运行内存"></a>设置运行内存</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-XX:ReservedCodeCacheSize</span><span class="token operator">=</span>1024m<span class="token parameter variable">-Xmx4096m</span><span class="token parameter variable">-Xms1024m</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="设置Idea编译堆大小"><a href="#设置Idea编译堆大小" class="headerlink" title="设置Idea编译堆大小"></a>设置Idea编译堆大小</h4><h5 id="Build，Execution，Deployment-Compiler-heap-size-2048"><a href="#Build，Execution，Deployment-Compiler-heap-size-2048" class="headerlink" title="Build，Execution，Deployment - Compiler - heap size 2048"></a>Build，Execution，Deployment - Compiler - heap size 2048</h5><h4 id="设置文件编码"><a href="#设置文件编码" class="headerlink" title="设置文件编码"></a>设置文件编码</h4><h5 id="Editor-File-Encodings"><a href="#Editor-File-Encodings" class="headerlink" title="Editor - File Encodings"></a>Editor - File Encodings</h5><ul><li>Global Encoding：UTF-8</li><li>Project Encoding：UTF-8</li><li>Properties Files：UTF-8</li></ul><h5 id="Editor-General-Console"><a href="#Editor-General-Console" class="headerlink" title="Editor - General - Console"></a>Editor - General - Console</h5><ul><li>Default Encoding：UTF-8</li></ul><h5 id="Tools-SSH-Terminal"><a href="#Tools-SSH-Terminal" class="headerlink" title="Tools - SSH Terminal"></a>Tools - SSH Terminal</h5><ul><li>Default Encoding：UTF-8</li></ul><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><h3 id="2-Maven配置"><a href="#2-Maven配置" class="headerlink" title="2.Maven配置"></a>2.Maven配置</h3><h4 id="Maven-Runner-VM-Options"><a href="#Maven-Runner-VM-Options" class="headerlink" title="Maven - Runner - VM Options"></a>Maven - Runner - VM Options</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-DarchetypeCatalog</span><span class="token operator">=</span>internal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Maven-Runner-Importing-JDK-版本配置"><a href="#Maven-Runner-Importing-JDK-版本配置" class="headerlink" title="Maven - Runner&amp;Importing - JDK 版本配置"></a>Maven - Runner&amp;Importing - JDK 版本配置</h4><h4 id="设置Maven编译的大小：Maven-Importin-VM-options"><a href="#设置Maven编译的大小：Maven-Importin-VM-options" class="headerlink" title="设置Maven编译的大小：Maven - Importin - VM options"></a>设置Maven编译的大小：Maven - Importin - VM options</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-Xmx16g</span> 或者 <span class="token parameter variable">-Xmx32g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="设置maven多线程编译"><a href="#设置maven多线程编译" class="headerlink" title="设置maven多线程编译"></a>设置maven多线程编译</h4><p>Maven3 支持多线程编译，可以加快项目构建速度<br>Thread Count：1C ，1C的含义是1倍CPU核心数量，假设我的设备是4核处理器 就会开启四个线程编译</p><h2 id="三、常用快捷键-Mac"><a href="#三、常用快捷键-Mac" class="headerlink" title="三、常用快捷键(Mac)"></a>三、常用快捷键(Mac)</h2><ul><li><input disabled="" type="checkbox"> 列选择：<code>Shift+Command+8</code></li><li><input disabled="" type="checkbox"> 同单词列选择：<code>Control+Command+G</code></li><li><input disabled="" type="checkbox"> 格式化代码：<code>Option+Comman+L</code></li><li><input disabled="" type="checkbox"> 优化导包：<code>Control+Option+O</code></li><li><input disabled="" type="checkbox"> 项目之间的跳转：<code>Command+Alt+[ 或 Command+Alt+]</code></li><li><input disabled="" type="checkbox"> 文件之间的跳转：<code>Command+[ 或 Command+]</code></li><li><input disabled="" type="checkbox"> 重写父类方法：<code>Control + O</code></li><li><input disabled="" type="checkbox"> 实现接口方法：<code>Control + I</code></li><li><input disabled="" type="checkbox"> Generate生成代码：<code>Command+N</code></li><li><input disabled="" type="checkbox"> 自定义代码块提示：<code>Command+J</code></li><li><input disabled="" type="checkbox"> Surround With包裹生成代码：<code>Option+Command+T</code></li><li><input disabled="" type="checkbox"> 精确查找：<code>Shift+Command+F</code></li><li><input disabled="" type="checkbox"> 移动代码行：<code>Option+Shift+⬆️</code> 或 <code>Option+Shift+⬇️</code></li><li><input disabled="" type="checkbox"> 移动代码块：<code>Command+Shift+⬆️</code> 或 <code>Command+Shift+⬇️</code></li></ul><h2 id="四、IDEA-正则表达式查找和替换文本"><a href="#四、IDEA-正则表达式查找和替换文本" class="headerlink" title="四、IDEA 正则表达式查找和替换文本"></a>四、IDEA 正则表达式查找和替换文本</h2><ol><li>单击正则表达式图标以启用正则表达式</li><li>搜索诸如 之类的元字符时<code>.[&#123;()\^$|?*+</code>，您需要使用反斜杠对其进行转义<code>\</code></li><li>要替换的字段  <code>(.*?)_(.*?)</code> ,替换站位符号 <code>$1_$2</code></li><li>要保留的字符串使用”<code>()</code>“包含，站位符号 <code>$1</code></li><li>切换字符大小写﻿<pre class="line-numbers language-none"><code class="language-none">\l将字符更改为小写，直到字符串中的下一个字符。例如，Bar变成bar。\u将字符更改为大写，直到字符串中的下一个字符。例如，bar变成Bar。\L将字符更改为小写，直到文字字符串的结尾\E。例如，BAR变成bar。\U将字符更改为大写，直到文字字符串的结尾\E。例如，bar变成BAR。条件：(\w+),结果：\U$1将全部匹配单词转为大写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="五、Idea-VM-Options-常用参数配置"><a href="#五、Idea-VM-Options-常用参数配置" class="headerlink" title="五、Idea VM Options 常用参数配置"></a>五、Idea VM Options 常用参数配置</h2><ul><li><input disabled="" type="checkbox"> <code>-Dserver.port=8080</code>，设置服务端口为8080</li><li><input disabled="" type="checkbox"> <code>-Xms1024m</code>，设置JVM初始堆内存为1024m。此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。</li><li><input disabled="" type="checkbox"> <code>-Xmx1024m</code>，设置JVM最大堆内存为1024m。</li><li><input disabled="" type="checkbox"> <code>-Xss512k</code>，设置每个线程的栈大小。JDK5.0以后每个线程栈大小为1M，之前每个线程栈大小为256K。在相同物理内存下，减小这个值能生成更多的线程，当然操作系统对一个进程内的线程数还是有限制的，不能无限生成。线程栈的大小是个双刃剑，如果设置过小，可能会出现栈溢出，特别是在该线程内有递归、大的循环时出现溢出的可能性更大，如果该值设置过大，就有影响到创建栈的数量，如果是多线程的应用，就会出现内存溢出的错误。</li><li><input disabled="" type="checkbox"> <code>-Xmn341m</code>，设置年轻代大小为341m。在整个堆内存大小确定的情况下，增大年轻代将会减小年老代，反之亦然。此值关系到JVM垃圾回收，对系统性能影响较大，官方推荐配置为整个堆大小的3&#x2F;8。</li><li><input disabled="" type="checkbox"> <code>-XX:NewSize=341m</code>，设置年轻代初始值为341M。</li><li><input disabled="" type="checkbox"> <code>-XX:MaxNewSize=341m</code>，设置年轻代最大值为341M。</li><li><input disabled="" type="checkbox"> <code>-XX:PermSize=512m</code>，设置持久代初始值为512M，但在java8及之后就不支持了，改用-XX:MetaspaceSize&#x3D;512m。</li><li><input disabled="" type="checkbox"> <code>-XX:MaxPermSize=512m</code>，设置持久代最大值为512M，同样在java8及之后就不支持了，改用-XX:MaxMetaspaceSize&#x3D;512m。</li><li><input disabled="" type="checkbox"> <code>-XX:NewRatio=2</code>，设置年轻代（包括1个Eden和2个Survivor区）与年老代的比值。表示年轻代比年老代为1:2。</li><li><input disabled="" type="checkbox"> <code>-XX:SurvivorRatio=8</code>，设置年轻代中Eden区与Survivor区的比值。表示2个Survivor区（JVM堆内存年轻代中默认有2个大小相等的Survivor区）与1个Eden区的比值为1:1:8，即1个Survivor区占整个年轻代大小的1&#x2F;10。</li><li><input disabled="" type="checkbox"> <code>-XX:MaxTenuringThreshold=15</code>，具体参看JVM系列之内存分配和回收策略中对象的衰老过程。</li><li><input disabled="" type="checkbox"> <code>-XX:ReservedCodeCacheSize=240m</code>，设置代码缓存的大小，用来存储已编译方法生成的本地代码。</li><li><input disabled="" type="checkbox"> <code>-client</code>，设置JVM使用Client模式，特点是启动速度比较快，但运行时性能和内存管理效率不高，通常用于客户端应用程序或开发调试；在32位环境下直接运行Java程序默认启用该模式。</li><li><input disabled="" type="checkbox"> <code>-server</code>，设置JVM使Server模式，特点是启动速度比较慢，但运行时性能和内存管理效率很高，适用于生产环境。在具有64位能力的JDK环境下默认启用该模式。</li><li><input disabled="" type="checkbox"> <code>-verbose:gc</code>，开启gc日志</li><li><input disabled="" type="checkbox"> <code>-XX:+PrintGCDetails</code>，打印gc详情</li><li><input disabled="" type="checkbox"> <code>-XX:+PrintGCTimeStamps</code>，打印GC时间戳</li><li><input disabled="" type="checkbox"> <code>-XX:+PrintGCApplicationStoppedTime</code>，打印GC停顿时间，可以查看到GC的STW停顿时间</li><li><input disabled="" type="checkbox"> <code>-Xloggc:D:/temp/gclog/idea.gc.log</code>，将日志输出到文件</li><li><input disabled="" type="checkbox"> <code>-XX:+PrintHeapAtGC</code>，每次一次GC后，都打印堆信息</li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发IDE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IntelliJ IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frp</title>
      <link href="/2024/01/24/Frp/"/>
      <url>/2024/01/24/Frp/</url>
      
        <content type="html"><![CDATA[<h1 id="Frp"><a href="#Frp" class="headerlink" title="Frp"></a>Frp</h1><p>Frp，全称为 Fast Reverse Proxy，是一款高性能的反向代理应用，支持 TCP、UDP 协议，主要用于内网穿透。Frp 的主要功能是帮助用户在有 NAT 或防火墙的环境中建立一个稳定的、低延迟的网络连接。它常被用于远程访问局域网内的服务，如访问家庭网络中的 NAS、游戏服务器、网站服务器等。</p><h3 id="代理类型"><a href="#代理类型" class="headerlink" title="代理类型:"></a>代理类型:</h3><p>frp 支持多种代理类型，以适应不同的使用场景。以下是一些常见的代理类型：</p><ul><li>TCP：提供纯粹的 TCP 端口映射，使服务端能够根据不同的端口将请求路由到不同的内网服务。</li><li>UDP：提供纯粹的 UDP 端口映射，与 TCP 代理类似，但用于 UDP 流量。</li><li>HTTP：专为 HTTP 应用设计，支持修改 Host Header 和增加鉴权等额外功能。</li><li>HTTPS：类似于 HTTP 代理，但专门用于处理 HTTPS 流量。</li><li>STCP：提供安全的 TCP 内网代理，要求在被访问者和访问者的机器上都部署 frpc，不需要在服务端暴露端口。</li><li>SUDP：提供安全的 UDP 内网代理，与 STCP 类似，需要在被访问者和访问者的机器上都部署 frpc，不需要在服务端暴露端口。</li><li>XTCP：点对点内网穿透代理，与 STCP 类似，但流量不需要经过服务器中转。</li><li>TCPMUX：支持服务端 TCP 端口的多路复用，允许通过同一端口访问不同的内网服务。</li></ul><h2 id="1-下载Frp"><a href="#1-下载Frp" class="headerlink" title="1.下载Frp"></a>1.下载Frp</h2><h3 id="Github-仓库下载地址："><a href="#Github-仓库下载地址：" class="headerlink" title="Github 仓库下载地址："></a>Github 仓库下载地址：</h3><p><a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><h3 id="中文文档："><a href="#中文文档：" class="headerlink" title="中文文档："></a>中文文档：</h3><p><a href="https://gofrp.org/zh-cn/docs/">https://gofrp.org/zh-cn/docs/</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 yum 安装 systemd（CentOS/RHEL）</span>yum <span class="token function">install</span> systemd<span class="token comment"># 使用 apt 安装 systemd（Debian/Ubuntu）</span><span class="token function">apt</span> <span class="token function">install</span> systemd<span class="token comment"># 创建 frps.service 文件</span><span class="token function">sudo</span> <span class="token function">vim</span> /etc/systemd/system/frps.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="frps-service"><a href="#frps-service" class="headerlink" title="frps.service:"></a>frps.service:</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token comment"># 服务名称，可自定义</span>Description <span class="token operator">=</span> frp serverAfter <span class="token operator">=</span> network.target syslog.targetWants <span class="token operator">=</span> network.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Type <span class="token operator">=</span> simple<span class="token comment"># 启动frps的命令，需修改为您的frps的安装路径</span>ExecStart <span class="token operator">=</span> /path/to/frps <span class="token parameter variable">-c</span> /path/to/frps.toml<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy <span class="token operator">=</span> multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[] ⚠️ 从 v0.52.0 版本开始，frp 开始支持 TOML、YAML 和 JSON 作为配置文件格式。INI 已被弃用，并将在未来的发布中移除。新功能只能在TOML、YAML 或 JSON 中使用。希望使用这些新功能的用户应相应地切换其配置格式。</li></ul><h2 id="2-服务端Frp配置"><a href="#2-服务端Frp配置" class="headerlink" title="2.服务端Frp配置"></a>2.服务端Frp配置</h2><p>frps（Server）：这是 frp 的服务器端组件，需要部署在一个公网可访问的位置，如一台具有公网 IP 的服务器上。frps 负责接收来自客户端的连接请求，并将这些请求转发到相应的内网服务上。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bindPort <span class="token operator">=</span> <span class="token number">7000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-客户端Frp配置"><a href="#3-客户端Frp配置" class="headerlink" title="3.客户端Frp配置"></a>3.客户端Frp配置</h2><p>frpc（Client）：这是 frp 的客户端组件，部署在需要穿透 NAT 或防火墙的内网环境中。frpc 会主动连接到 frps，然后通过 frps 实现与公网的通信。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">serverAddr <span class="token operator">=</span> <span class="token string">"x.x.x.x"</span>serverPort <span class="token operator">=</span> <span class="token number">7000</span><span class="token punctuation">[</span><span class="token punctuation">[</span>proxies<span class="token punctuation">]</span><span class="token punctuation">]</span>name <span class="token operator">=</span> <span class="token string">"secret_ssh"</span><span class="token builtin class-name">type</span> <span class="token operator">=</span> <span class="token string">"stcp"</span><span class="token comment"># 只有与此处设置的 secretKey 一致的用户才能访问此服务</span>secretKey <span class="token operator">=</span> <span class="token string">"abcdefg"</span>localIP <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span>localPort <span class="token operator">=</span> <span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#通过 SSH 访问内网机器，假设用户名为 test</span><span class="token function">ssh</span> <span class="token parameter variable">-o</span> <span class="token assign-left variable">Port</span><span class="token operator">=</span><span class="token number">6000</span> test@127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-自启动"><a href="#4-自启动" class="headerlink" title="4.自启动"></a>4.自启动</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动frp</span><span class="token function">sudo</span> systemctl start frps<span class="token comment"># 停止frp</span><span class="token function">sudo</span> systemctl stop frps<span class="token comment"># 重启frp</span><span class="token function">sudo</span> systemctl restart frps<span class="token comment"># 查看frp状态</span><span class="token function">sudo</span> systemctl status frps<span class="token comment"># frps 开机自启动</span><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> frps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2024/01/24/JVM/"/>
      <url>/2024/01/24/JVM/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="1-设置堆内存大小和-OOM"><a href="#1-设置堆内存大小和-OOM" class="headerlink" title="1.设置堆内存大小和 OOM"></a>1.设置堆内存大小和 OOM</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span><span class="token class-name">Xms</span> 用来表示堆的起始内存，等价于 <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">InitialHeapSize</span><span class="token operator">-</span><span class="token class-name">Xmx</span> 用来表示堆的最大内存，等价于 <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">MaxHeapSize</span>    如果堆的内存大小超过 <span class="token operator">-</span><span class="token class-name">Xmx</span> 设定的最大内存， 就会抛出 <span class="token class-name">OutOfMemoryError</span> 异常。 我们通常会将 <span class="token operator">-</span><span class="token class-name">Xmx</span> 和 <span class="token operator">-</span><span class="token class-name">Xms</span> 两个参数配置为相同的值，其目的是为了能够在垃圾回收机制清理完堆区后不再需要重新分隔计算堆的大小，从而提高性能。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-新生代和老年代"><a href="#2-新生代和老年代" class="headerlink" title="2.新生代和老年代"></a>2.新生代和老年代</h2><pre class="line-numbers language-none"><code class="language-none">默认情况下新生代和老年代的比例是 1:2，可以通过 &#96;–XX:NewRatio&#96; 来配置。新生代中的 Eden:From Survivor:To Survivor 的比例是8:1:1，可以通过 &#96;-XX:SurvivorRatio&#96; 来配置。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">若在 JDK 7 中开启了 &#96;-XX:+UseAdaptiveSizePolicy&#96;，JVM 会动态调整 JVM 堆中各个区域的大小以及进入老年代的年龄。此时 &#96;–XX:NewRatio&#96; 和 &#96;-XX:SurvivorRatio&#96;  将会失效，而 JDK 8 是默认开启&#96;-XX:+UseAdaptiveSizePolicy&#96;。在 JDK 8中，不要随意关闭 &#96;-XX:+UseAdaptiveSizePolicy&#96;，除非对堆内存的划分有明确的规划，每次 GC 后都会重新计算 Eden、From Survivor、To Survivor 的大小。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算依据是<strong>GC过程</strong>中统计的<strong>GC时间</strong>、<strong>吞吐量</strong>、<strong>内存占用量</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">java <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintFlagsFinal</span> <span class="token operator">-</span>version <span class="token operator">|</span> grep <span class="token class-name">HeapSize</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">uintx ErgoHeapSizeLimit                         &#x3D; 0                                   &#123;product&#125;    uintx HeapSizePerGCThread                       &#x3D; 87241520                            &#123;product&#125;    uintx InitialHeapSize                          :&#x3D; 134217728                           &#123;product&#125;    uintx LargePageHeapSizeThreshold                &#x3D; 134217728                           &#123;product&#125;    uintx MaxHeapSize                              :&#x3D; 2147483648                          &#123;product&#125;java version &quot;1.8.0_211&quot;Java(TM) SE Runtime Environment (build 1.8.0_211-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ jmap -heap 进程号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-TLAB-空间"><a href="#3-TLAB-空间" class="headerlink" title="3. TLAB 空间"></a>3. TLAB 空间</h2><p>尽管不是所有的对象实例都能够在 TLAB 中成功分配内存，但 JVM 确实是将 TLAB 作为内存分配的首选。</p><p>在程序中，可以通过 <code>-XX:UseTLAB</code> 设置是否开启 TLAB 空间。</p><p>默认情况下，TLAB 空间的内存非常小，仅占有整个 Eden 空间的 1%，我们可以通过 <code>-XX:TLABWasteTargetPercent</code> 设置 TLAB 空间所占用 Eden 空间的百分比大小。</p><p>一旦对象在 TLAB 空间分配内存失败时，JVM 就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在 Eden 空间中分配内存。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins  + Docker + SpringBoot自动部署</title>
      <link href="/2024/01/24/Jenkines/"/>
      <url>/2024/01/24/Jenkines/</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins-Docker-SpringBoot-自动部署-CI-CD"><a href="#Jenkins-Docker-SpringBoot-自动部署-CI-CD" class="headerlink" title="Jenkins  + Docker + SpringBoot 自动部署(CI&#x2F;CD)"></a>Jenkins  + Docker + SpringBoot 自动部署(CI&#x2F;CD)</h1><blockquote><p>环境：CentOS7 + Git (Gitee)</p></blockquote><blockquote><p>实现步骤：在 Docker 安装 Jenkins，配置 Jenkins 基本信息，利用 Dockerfile 和 Shell 脚本实现项目自动拉取打包并运行。</p></blockquote><h2 id="1-一、安装-Docker"><a href="#1-一、安装-Docker" class="headerlink" title="1.一、安装 Docker"></a>1.一、安装 Docker</h2><blockquote><p>安装社区版本 Docker CE</p></blockquote><h3 id="1-1-确保-yum-包更新到最新"><a href="#1-1-确保-yum-包更新到最新" class="headerlink" title="1.1. 确保 yum 包更新到最新"></a>1.1. 确保 yum 包更新到最新</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-卸载旧版本（如果安装过旧版本的话）"><a href="#1-2-卸载旧版本（如果安装过旧版本的话）" class="headerlink" title="1.2. 卸载旧版本（如果安装过旧版本的话）"></a>1.2. 卸载旧版本（如果安装过旧版本的话）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove <span class="token function">docker</span>  docker-common docker-selinux docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-安装需要的软件包"><a href="#1-3-安装需要的软件包" class="headerlink" title="1.3. 安装需要的软件包"></a>1.3. 安装需要的软件包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-4-设置-yum-源"><a href="#1-4-设置-yum-源" class="headerlink" title="1.4. 设置 yum 源"></a>1.4. 设置 yum 源</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-5-安装-Docker"><a href="#1-5-安装-Docker" class="headerlink" title="1.5. 安装 Docker"></a>1.5. 安装 Docker</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> docker-ce  <span class="token comment">#由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0yum install &lt;自己的版本>  # 例如：sudo yum install docker-ce-17.12.0.ce</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-6-启动并设置开机启动"><a href="#1-6-启动并设置开机启动" class="headerlink" title="1.6. 启动并设置开机启动"></a>1.6. 启动并设置开机启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start dockersystemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-7-验证安装是否成功"><a href="#1-7-验证安装是否成功" class="headerlink" title="1.7. 验证安装是否成功"></a>1.7. 验证安装是否成功</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-安装-Jenkins"><a href="#2-安装-Jenkins" class="headerlink" title="2.安装 Jenkins"></a>2.安装 Jenkins</h2><blockquote><p>Jenkins 中文官网：<a href="https://www.jenkins.io/zh/">https://www.jenkins.io/zh/</a></p></blockquote><h3 id="2-1-安装-Jenkins"><a href="#2-1-安装-Jenkins" class="headerlink" title="2.1. 安装 Jenkins"></a>2.1. 安装 Jenkins</h3><ul><li><input disabled="" type="checkbox"> 注意检查 8080 是否已经占用，如果占用请修改端口。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> jenkins <span class="token parameter variable">-u</span> root <span class="token parameter variable">--rm</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8090</span>:8080 <span class="token parameter variable">-p</span> <span class="token number">50000</span>:50000 <span class="token parameter variable">-v</span> /var/jenkins_home:/var/jenkins_home <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock jenkinsci/blueocean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 限制内存大小为400m (错误) </span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> jenkins <span class="token parameter variable">-u</span> root <span class="token parameter variable">--rm</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">-m</span> 512m <span class="token parameter variable">-p</span> <span class="token number">8090</span>:8080 <span class="token parameter variable">-p</span> <span class="token number">50000</span>:50000 <span class="token parameter variable">-v</span> /var/jenkins_home:/var/jenkins_home <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock jenkinsci/blueocean<span class="token comment"># docker exec -it jenkins bash</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> jenkins <span class="token parameter variable">-u</span> root <span class="token parameter variable">--rm</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8090</span>:8080 <span class="token parameter variable">-p</span> <span class="token number">50000</span>:50000 <span class="token parameter variable">-v</span> /var/jenkins_home:/var/jenkins_home <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock jenkinsci/blueocean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><input disabled="" type="checkbox"> 如果没改端口号的话，安装完成后访问地址：<pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;&#123;部署Jenkins所在服务IP&#125;:8090<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="2-2-初始化-Jenkins"><a href="#2-2-初始化-Jenkins" class="headerlink" title="2.2. 初始化 Jenkins"></a>2.2. 初始化 Jenkins</h3><blockquote><p>详情见官网教程：<a href="https://www.jenkins.io/zh/doc">https://www.jenkins.io/zh/doc</a></p></blockquote><h4 id="2-2-1-解锁-Jenkins"><a href="#2-2-1-解锁-Jenkins" class="headerlink" title="2.2.1 解锁 Jenkins"></a>2.2.1 解锁 Jenkins</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入Jenkins容器,例如 docker exec -it jenkins bash</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token punctuation">&#123;</span>Jenkins容器名<span class="token punctuation">&#125;</span> <span class="token function">bash</span><span class="token comment"># 查看密码,复制密码到输入框里面(界面上的地址)</span><span class="token function">cat</span> /var/jenkins_home/secrets/initialAdminPassword<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-安装插件"><a href="#2-2-2-安装插件" class="headerlink" title="2.2.2 安装插件"></a>2.2.2 安装插件</h4><ul><li><input disabled="" type="checkbox"> 选择第一项：安装推荐的插件。<br><img src="/markdownimages/Jenkines/1.png" alt="安装插件"></li></ul><h4 id="2-3-创建管理员用户"><a href="#2-3-创建管理员用户" class="headerlink" title="2.3 创建管理员用户"></a>2.3 创建管理员用户</h4><ul><li><input disabled="" type="checkbox"> 此账户信息一定要牢记(admin&#x2F;文件内密码)</li></ul><h2 id="3-系统配置"><a href="#3-系统配置" class="headerlink" title="3.系统配置"></a>3.系统配置</h2><h3 id="3-1-安装需要插件"><a href="#3-1-安装需要插件" class="headerlink" title="3.1. 安装需要插件"></a>3.1. 安装需要插件</h3><ul><li><p><input disabled="" type="checkbox"> 进入【首页】–【系统管理】–【插件管理】–【可选插件】。搜索以下需要安装的插件，点击安装即可。<br><img src="/markdownimages/Jenkines/2.png" alt="安装maven"></p></li><li><p><input disabled="" type="checkbox"> 安装 Maven Integration</p></li><li><p><input disabled="" type="checkbox"> 安装 Publish Over SSH（如果不需要远程推送，不用安装）</p></li><li><p><input disabled="" type="checkbox"> 如果使用 Gitee 码云，安装插件Gitee（自带 Git 不用单独安装）</p></li></ul><h3 id="3-2-配置-Maven"><a href="#3-2-配置-Maven" class="headerlink" title="3.2. 配置 Maven*"></a>3.2. 配置 Maven*</h3><ul><li><input disabled="" type="checkbox"> 进入【首页】–【系统管理】–【全局配置】，拉到页面最下方 maven–maven 安装。<br><img src="/markdownimages/Jenkines/3.png" alt="配置maven"></li></ul><h2 id="4-创建任务"><a href="#4-创建任务" class="headerlink" title="4.创建任务"></a>4.创建任务</h2><h3 id="4-1-新建任务"><a href="#4-1-新建任务" class="headerlink" title="4.1. 新建任务"></a>4.1. 新建任务</h3><ul><li><input disabled="" type="checkbox"> 点击【新建任务】，输入任务名称，点击构建一个自由风格的软件项目。<br><img src="/markdownimages/Jenkines/4.png" alt="创建任务"></li></ul><h3 id="4-2-源码管理"><a href="#4-2-源码管理" class="headerlink" title="4.2. 源码管理"></a>4.2. 源码管理</h3><ul><li><input disabled="" type="checkbox"> 点击【源码管理】–【Git】，输入仓库地址，添加凭证，选择好凭证即可。<br><img src="/markdownimages/Jenkines/5.png" alt="获取gitee私人令牌"></li></ul><p><img src="/markdownimages/Jenkines/6.png" alt="配置gitee仓库地址"></p><p><img src="/markdownimages/Jenkines/7.png" alt="配置gitee凭证"></p><h3 id="4-3-构建触发器"><a href="#4-3-构建触发器" class="headerlink" title="4.3. 构建触发器"></a>4.3. 构建触发器</h3><ul><li><p><input disabled="" type="checkbox"> 点击【构建触发器】–【构建】–【增加构建步骤】–【调用顶层 Maven 目标】–【「填写配置」】–【保存】。<br><img src="/markdownimages/Jenkines/8.png" alt="构建触发器"></p></li><li><p><input disabled="" type="checkbox"> 此处命令只是 install，看是否能生成 jar 包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clean <span class="token function">install</span> <span class="token parameter variable">-Dmaven.test.skip</span><span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="/markdownimages/Jenkines/9.png" alt="配置maven命令"></p><h3 id="4-4-保存"><a href="#4-4-保存" class="headerlink" title="4.4. 保存"></a>4.4. 保存</h3><ul><li><input disabled="" type="checkbox"> 点击【保存】按钮即可。</li></ul><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h2><ul><li><input disabled="" type="checkbox"> 该功能测试是否能正常打包。</li></ul><h3 id="5-1-构建"><a href="#5-1-构建" class="headerlink" title="5.1. 构建"></a>5.1. 构建</h3><ul><li><input disabled="" type="checkbox"> 点击构建按钮。</li></ul><h3 id="5-2-查看日志"><a href="#5-2-查看日志" class="headerlink" title="5.2. 查看日志"></a>5.2. 查看日志</h3><ul><li><input disabled="" type="checkbox"> 点击正在构建的任务，或者点击任务名称进入详情页面，查看控制台输出。看是否能成功打成 jar 包。</li><li><input disabled="" type="checkbox"> 该处日志第一次可能下载依赖 jar 包失败，再次点击构建即可成功。<br><img src="/markdownimages/Jenkines/10.png" alt="查看日志1"></li></ul><p><img src="/markdownimages/Jenkines/11.png" alt="查看日志2"></p><p><img src="/markdownimages/Jenkines/12.png" alt="构建日志"></p><h3 id="5-3-查看项目位置"><a href="#5-3-查看项目位置" class="headerlink" title="5.3. 查看项目位置"></a>5.3. 查看项目位置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /var/jenkins_home/workspacell <span class="token comment"># 即可查看是否存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-运行项目"><a href="#6-运行项目" class="headerlink" title="6.运行项目"></a>6.运行项目</h2><ul><li><input disabled="" type="checkbox"> 因为项目和 Jenkins 在同一台服务器，所以我们用 Shell 脚本运行项目，原理既是通过 Dockerfile 打包镜像，然后 docker 运行即可。</li></ul><h3 id="6-1-Dockerfile"><a href="#6-1-Dockerfile" class="headerlink" title="6.1. Dockerfile"></a>6.1. Dockerfile</h3><ul><li><input disabled="" type="checkbox"> 在 Spring Boot 项目根目录新建一个名为 Dockerfile 的文件，注意没有后缀名。</li><li><input disabled="" type="checkbox"> 其内容如下：（大致就是使用 JDK 8，把 jar 包添加到 docker 然后运行 prod 配置文件。详细可以查看其他教程）<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> jdk:8</span><span class="token instruction"><span class="token keyword">VOLUME</span> /tmp</span><span class="token instruction"><span class="token keyword">ADD</span> target/zx-order-0.0.1-SNAPSHOT.jar app.jar</span><span class="token instruction"><span class="token keyword">EXPOSE</span> 8888</span><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"java"</span>,<span class="token string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="token string">"-jar"</span>,<span class="token string">"/app.jar"</span>,<span class="token string">"--spring.profiles.active=prod"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="6-2-修改-Jenkins-任务配置"><a href="#6-2-修改-Jenkins-任务配置" class="headerlink" title="6.2. 修改 Jenkins 任务配置"></a>6.2. 修改 Jenkins 任务配置</h3><p><img src="/markdownimages/Jenkines/13.png" alt="配置"></p><ul><li><p><input disabled="" type="checkbox"> 配置如下：<br><img src="/markdownimages/Jenkines/14.png" alt="maven脚本配置"></p></li><li><p><input disabled="" type="checkbox"> “-t” 指定新镜像名，”.” 表示 Dockfile 在当前路径。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /var/jenkins_home/workspace/my-task<span class="token function">docker</span> stop my-task <span class="token operator">||</span> <span class="token boolean">true</span> <span class="token function">docker</span> <span class="token function">rm</span> my-task <span class="token operator">||</span> <span class="token boolean">true</span> <span class="token function">docker</span> rmi my-task <span class="token operator">||</span> <span class="token boolean">true</span> <span class="token function">docker</span> build <span class="token parameter variable">-t</span> my-task <span class="token builtin class-name">.</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8888</span>:8888 <span class="token parameter variable">--name</span> my-task my-task:latest<span class="token function">docker</span> logs <span class="token parameter variable">-f</span> my-task<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><input disabled="" type="checkbox"> 上图用了 docker logs -f 是为了方便看日志，真实环境不要用，因为会一直等待日志，构建任务会失败；</p></li><li><p><input disabled="" type="checkbox"> 加 “|| true” 是如果命令执行失败也会继续实行，为了防止第一次没有该镜像报错；</p></li></ul><h3 id="6-3-保存"><a href="#6-3-保存" class="headerlink" title="6.3. 保存"></a>6.3. 保存</h3><ul><li><input disabled="" type="checkbox"> 点击保存即可；</li></ul><h3 id="6-4-构建：查看-Jenkins-控制台输出，输出如下，证明成功；"><a href="#6-4-构建：查看-Jenkins-控制台输出，输出如下，证明成功；" class="headerlink" title="6.4. 构建：查看 Jenkins 控制台输出，输出如下，证明成功；"></a>6.4. 构建：查看 Jenkins 控制台输出，输出如下，证明成功；</h3><p><img src="/markdownimages/Jenkines/15.png" alt="查看镜像是否构建成功"></p><h3 id="6-5-验证"><a href="#6-5-验证" class="headerlink" title="6.5. 验证"></a>6.5. 验证</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span> <span class="token comment"># 查看是否有自己的容器docker logs # 自己的容器名，查看日志是否正确# 打开浏览器访问项目</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/markdownimages/Jenkines/16.png" alt="查看容器是否启动"></p><h3 id="6-6-调用接口测试"><a href="#6-6-调用接口测试" class="headerlink" title="6.6.调用接口测试"></a>6.6.调用接口测试</h3><p><img src="/markdownimages/Jenkines/17.png" alt="调用接口"><br><img src="/markdownimages/Jenkines/18.png" alt="查看日志"></p>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkines </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2024/01/24/Maven/"/>
      <url>/2024/01/24/Maven/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="1-Maven-配置文件（阿里云镜像配置）"><a href="#1-Maven-配置文件（阿里云镜像配置）" class="headerlink" title="1.Maven 配置文件（阿里云镜像配置）"></a>1.Maven 配置文件（阿里云镜像配置）</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginGroups</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginGroups</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proxies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>proxies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>/Users/anubis/maven_repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfiles</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">></span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfiles</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Maven-配置文件（共公仓库与第三方仓库混合配置）"><a href="#2-Maven-配置文件（共公仓库与第三方仓库混合配置）" class="headerlink" title="2.Maven 配置文件（共公仓库与第三方仓库混合配置）"></a>2.Maven 配置文件（共公仓库与第三方仓库混合配置）</h2><ul><li><input disabled="" type="checkbox"> 注：混合配置共公仓库和第三方仓库，需要在setting.xml增加新的mirror和profile，并激活新的activeProfile。</li></ul><h3 id="mirror"><a href="#mirror" class="headerlink" title="mirror"></a>mirror</h3><p>mirrorOf代表了一个镜像的替代位置，其中，</p><ul><li><input disabled="" type="checkbox"> *: 匹配所有，所有内容都从镜像拉取</li><li><input disabled="" type="checkbox"> external:*: 除了本地缓存的所有从镜像仓库拉取</li><li><input disabled="" type="checkbox"> repo,repo1: repo或者repo1，这里的repo指的仓库ID</li><li><input disabled="" type="checkbox"> *,!repo1: 除了repo1的所有仓库</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginGroups</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proxies</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>/Users/anubis/maven_repository_zj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 镜像 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-R1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>maven-R1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://xx.xx.xx.xx:xxxx/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-R2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>maven-R2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>maven-R2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://xx.xx.xx.xx:xxxx/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-R1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-R2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--新增：私有maven仓库配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>ali<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>ali<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">></span></span>always<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checksumPolicy</span><span class="token punctuation">></span></span>warn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checksumPolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-R1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-R1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://xx.xx.xx.xx:xxxx/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">></span></span>always<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checksumPolicy</span><span class="token punctuation">></span></span>warn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checksumPolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-R2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-R2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://xx.xx.xx.xx:xxxx/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">></span></span>always<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>checksumPolicy</span><span class="token punctuation">></span></span>warn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>checksumPolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--激活配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfiles</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">></span></span>ali<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">></span></span>maven-R1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">></span></span>maven-R2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfiles</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-清理本地maven仓库"><a href="#3-清理本地maven仓库" class="headerlink" title="3.清理本地maven仓库"></a>3.清理本地maven仓库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建脚本</span><span class="token function">vi</span> maven_clean.sh<span class="token comment"># 赋权</span><span class="token function">chmod</span> +777 ./maven_clean.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 定义 Maven 仓库路径</span><span class="token assign-left variable">repo_path</span><span class="token operator">=</span><span class="token string">"/Users/anubis/maven_repository"</span>  <span class="token comment"># 请根据实际情况修改路径</span><span class="token comment"># 删除所有以 .lastUpdated 结尾的文件</span><span class="token function">find</span> <span class="token variable">$repo_path</span> <span class="token parameter variable">-name</span> <span class="token string">"*.lastUpdated"</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-delete</span><span class="token comment"># 删除空文件夹</span><span class="token function">find</span> <span class="token variable">$repo_path</span> <span class="token parameter variable">-type</span> d <span class="token parameter variable">-empty</span> <span class="token parameter variable">-delete</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Maven依赖上传"><a href="#4-Maven依赖上传" class="headerlink" title="4.Maven依赖上传"></a>4.Maven依赖上传</h2><ul><li><input disabled="" type="checkbox"> 注：Nexus 私有仓库的public仓库一般不能直接上传，需要上传到其他新建的仓库，并注意区分仓库 release 和 snapshot 版本库。</li></ul><h3 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn install:install-file <span class="token parameter variable">-Dfile</span><span class="token operator">=</span>/路径/xxx-x.x.x.jar <span class="token parameter variable">-DgroupId</span><span class="token operator">=</span>xxx <span class="token parameter variable">-DartifactId</span><span class="token operator">=</span>xxx <span class="token parameter variable">-Dversion</span><span class="token operator">=</span>x.x.x <span class="token parameter variable">-Dpackaging</span><span class="token operator">=</span>jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn deploy:deploy-file <span class="token parameter variable">-DgroupId</span><span class="token operator">=</span>xxx <span class="token parameter variable">-DartifactId</span><span class="token operator">=</span>xxx <span class="token parameter variable">-Dversion</span><span class="token operator">=</span>xxx <span class="token parameter variable">-Dpackaging</span><span class="token operator">=</span>jar <span class="token parameter variable">-Dfile</span><span class="token operator">=</span>xxx的路径 <span class="token parameter variable">-Durl</span><span class="token operator">=</span>http://账号:密码@xx.xx.xx.xx:xxxx/nexus/content/repositories/snapshots<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="将本地仓库依赖批量上传到远程私有仓库"><a href="#将本地仓库依赖批量上传到远程私有仓库" class="headerlink" title="将本地仓库依赖批量上传到远程私有仓库"></a>将本地仓库依赖批量上传到远程私有仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># copy and run this script to the root of the repository directory containing files</span><span class="token comment"># this script attempts to exclude uploading itself explicitly so the script name is important</span><span class="token comment"># Get command line params</span><span class="token keyword">while</span> <span class="token builtin class-name">getopts</span> <span class="token string">":r:u:p:"</span> opt<span class="token punctuation">;</span> <span class="token keyword">do</span>   <span class="token keyword">case</span> <span class="token variable">$opt</span> <span class="token keyword">in</span>   r<span class="token punctuation">)</span> <span class="token assign-left variable">REPO_URL</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$OPTARG</span>"</span>   <span class="token punctuation">;</span><span class="token punctuation">;</span>   u<span class="token punctuation">)</span> <span class="token assign-left variable">USERNAME</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$OPTARG</span>"</span>   <span class="token punctuation">;</span><span class="token punctuation">;</span>   p<span class="token punctuation">)</span> <span class="token assign-left variable">PASSWORD</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$OPTARG</span>"</span>   <span class="token punctuation">;</span><span class="token punctuation">;</span>   <span class="token keyword">esac</span><span class="token keyword">done</span><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-not</span> <span class="token parameter variable">-path</span> <span class="token string">'./mvnimport\.sh*'</span> <span class="token parameter variable">-not</span> <span class="token parameter variable">-path</span> <span class="token string">'*/\.*'</span> <span class="token parameter variable">-not</span> <span class="token parameter variable">-path</span> <span class="token string">'*/\^archetype\-catalog\.xml*'</span> <span class="token parameter variable">-not</span> <span class="token parameter variable">-path</span> <span class="token string">'*/\^maven\-metadata\-local*\.xml'</span> <span class="token parameter variable">-not</span> <span class="token parameter variable">-path</span> <span class="token string">'*/\^maven\-metadata\-deployment*\.xml'</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s|^\./||"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-I</span> <span class="token string">'&#123;&#125;'</span> <span class="token function">curl</span> <span class="token parameter variable">-u</span> <span class="token string">"<span class="token variable">$USERNAME</span>:<span class="token variable">$PASSWORD</span>"</span> <span class="token parameter variable">-X</span> PUT <span class="token parameter variable">-v</span> <span class="token parameter variable">-T</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token variable">$&#123;REPO_URL&#125;</span>/<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -u maven私服用户名</span><span class="token comment"># -p maven私服用密码</span><span class="token comment"># http://私服ip:端口/repository/目标仓库/</span>./mavenimport.sh <span class="token parameter variable">-u</span> admin <span class="token parameter variable">-p</span> admin123 <span class="token parameter variable">-r</span> http://xx.xx.xx.xx:xxxx/repository/test/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/weixin_52109184/article/details/129313008">(脚本原文链接)</a></p>]]></content>
      
      
      <categories>
          
          <category> 构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2024/01/24/MySQL/"/>
      <url>/2024/01/24/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="一、关系型数据库的特点："><a href="#一、关系型数据库的特点：" class="headerlink" title="一、关系型数据库的特点："></a>一、关系型数据库的特点：</h2><h3 id="1-传统关系型数据库中的数据以列和行的方式进行存储"><a href="#1-传统关系型数据库中的数据以列和行的方式进行存储" class="headerlink" title="1. 传统关系型数据库中的数据以列和行的方式进行存储"></a>1. 传统关系型数据库中的数据以列和行的方式进行存储</h3><h3 id="2-关系型数据库采用结构化查询语言（SQL）对数据进行查询"><a href="#2-关系型数据库采用结构化查询语言（SQL）对数据进行查询" class="headerlink" title="2. 关系型数据库采用结构化查询语言（SQL）对数据进行查询"></a>2. 关系型数据库采用结构化查询语言（SQL）对数据进行查询</h3><h3 id="3-关系型数据库强调ACID（原子性-Atomicity，一致性-Consistency，隔离性-Isolation，持久性-Durability）"><a href="#3-关系型数据库强调ACID（原子性-Atomicity，一致性-Consistency，隔离性-Isolation，持久性-Durability）" class="headerlink" title="3. 关系型数据库强调ACID（原子性-Atomicity，一致性-Consistency，隔离性-Isolation，持久性-Durability）"></a>3. 关系型数据库强调ACID（原子性-Atomicity，一致性-Consistency，隔离性-Isolation，持久性-Durability）</h3><ul><li>原子性：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。</li><li>一致性：事务应确保数据库的状态从一个一致状态转变为另一个一致的状态。</li><li>隔离性：多个事务兵法执行时，一个事务的执行不应影响其他事务。</li><li>持久性：一个事务一旦提交，他对数据库的修改应该永久保存在数据库。</li></ul><h4 id="3-1-数据库事务：访问并可能操作各种数据项的一个数据库序列，这些操作要么全部执行要么都不执行，由事务开始于事务结束之间执行的全部数据库操作组成。"><a href="#3-1-数据库事务：访问并可能操作各种数据项的一个数据库序列，这些操作要么全部执行要么都不执行，由事务开始于事务结束之间执行的全部数据库操作组成。" class="headerlink" title="3.1. 数据库事务：访问并可能操作各种数据项的一个数据库序列，这些操作要么全部执行要么都不执行，由事务开始于事务结束之间执行的全部数据库操作组成。"></a>3.1. 数据库事务：访问并可能操作各种数据项的一个数据库序列，这些操作要么全部执行要么都不执行，由事务开始于事务结束之间执行的全部数据库操作组成。</h4><ul><li>脏读：读到了其他事务还未提交的数据</li><li>幻读：事务在做范围查询的过程中，有另外一个事务对范围内新增了记录（INSERT），导致范围查询的结果条数不一致。</li><li>不可重复读：对某数据进行读取的过程中国，有其他事务对数据进行了修改（UPDATE、DELETE），导致第二次读取1的结果不同</li></ul><h4 id="3-2-数据库事务的隔离级别：SQL-92定义了4种隔离级别来解决脏读、幻读、不可重复读。"><a href="#3-2-数据库事务的隔离级别：SQL-92定义了4种隔离级别来解决脏读、幻读、不可重复读。" class="headerlink" title="3.2 数据库事务的隔离级别：SQL-92定义了4种隔离级别来解决脏读、幻读、不可重复读。"></a>3.2 数据库事务的隔离级别：SQL-92定义了4种隔离级别来解决脏读、幻读、不可重复读。</h4><ul><li>串行化（Serializable）：最高的隔离级别，解决了幻读的问题。</li><li>可重复读（Repeatable read）：解决了不可重复读的问题，存在幻读的问题。</li><li>读已提交（Read committed）：在一个事务修改数据的过程中，如果事未提交，其他事务不能读该数据，避免了脏读。会存在不可重复读的问题。</li><li>未提交读（Read uncommitted）：最低的隔离级别，一个事务可以读到另一个未提交事务的数据。会存在脏读、幻读、不可重复读的问题。</li></ul><p><img src="/markdownimages/MySQL/1.jpg" alt="数据库事务的隔离级别"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># MySQL5.X事务隔离级别：REPEATABLE-READ</span><span class="token keyword">select</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span><span class="token comment"># MySQL8.0事务隔离级别：REPEATABLE-READ</span><span class="token keyword">select</span> @<span class="token variable">@transaction_isolation</span><span class="token punctuation">;</span><span class="token comment"># 查看系统当前隔离级别</span><span class="token keyword">select</span> @<span class="token variable">@global.tx_isolation</span><span class="token punctuation">;</span><span class="token comment"># 开始事务</span><span class="token keyword">set</span> autocommit<span class="token operator">=</span><span class="token keyword">off</span><span class="token punctuation">;</span><span class="token comment"># 或者</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-MySQL-默认隔离级别使用：REPEATABLE-READ"><a href="#3-3-MySQL-默认隔离级别使用：REPEATABLE-READ" class="headerlink" title="3.3 MySQL 默认隔离级别使用：REPEATABLE-READ"></a>3.3 MySQL 默认隔离级别使用：REPEATABLE-READ</h4><ul><li>Oracle 默认使用 Read committed。</li><li>MySQL 默认使用 Repeatable read。</li></ul><h5 id="3-3-1-原因：兼容历史上statement模式的bin-log，导致主从同步数据不一致的问题"><a href="#3-3-1-原因：兼容历史上statement模式的bin-log，导致主从同步数据不一致的问题" class="headerlink" title="3.3.1 原因：兼容历史上statement模式的bin log，导致主从同步数据不一致的问题"></a>3.3.1 原因：兼容历史上statement模式的bin log，导致主从同步数据不一致的问题</h5><ul><li>在主从复制的MySQL集群下，数据的同步是通过bin log进行的，且早期只有statement模式（记录SQL语句原文），如果使用Read committed或Read uncommitted会有问题。</li><li>问题：在RC的前提下，事务1-&gt;新增,事物2-&gt;删除 ,如果两个事务写入bin log，事务1先提交，事务2后提交，bin log先记录事务1的SQL语句，后记录事务2的SQL语句，导致主节点，有新增的数据，从节点在则没有新增的数据。</li><li>解决：Repeatable read 更新，插入数据时会加锁（GAP锁+临键锁），使得事务1会被卡住，待事务2提交回滚后再执行，同时使用mixed或者row格式的bin log日志</li></ul><h5 id="3-3-2-bin-log-模式"><a href="#3-3-2-bin-log-模式" class="headerlink" title="3.3.2 bin log 模式"></a>3.3.2 bin log 模式</h5><ul><li>statement：记录SQL语句的原文。</li><li>row：记录每个数据更改的具体行的细节，不会导致主从不一致，担是需要记录更多的内容，数据恢复时，时间会更长，磁盘IO和网络IO等资源占用也比较高。</li><li>mixed：将row和statement结合，MySQL会根据SQL情况，自动切换一个合适的格式进行记录。</li></ul><h4 id="3-4-MySQL-InnoDB-的-REPEATABLE-READ-隔离级别有没有解决幻读"><a href="#3-4-MySQL-InnoDB-的-REPEATABLE-READ-隔离级别有没有解决幻读" class="headerlink" title="3.4 MySQL InnoDB 的 REPEATABLE-READ 隔离级别有没有解决幻读"></a>3.4 MySQL InnoDB 的 REPEATABLE-READ 隔离级别有没有解决幻读</h4><ul><li>答案：通过 间隙锁 + MVCC解决了大部分幻读的问题，彻底解决幻读还是需要使用串行化的隔离级别。</li><li>MVCC 机制:MVCC 为每个数据行维护多个版本，每个版本都有一个可见性标志。当事务开始时，它会获得一个读视图，这个视图决定了事务能看到哪些数据版本。事务在其生命周期内始终看到同一份数据版本，即使有其他事务插入了新的行</li></ul><h5 id="3-4-1-MVCC（Multiversion-Concurrency-Control）"><a href="#3-4-1-MVCC（Multiversion-Concurrency-Control）" class="headerlink" title="3.4.1 MVCC（Multiversion Concurrency Control）"></a>3.4.1 MVCC（Multiversion Concurrency Control）</h5><ul><li>MVCC 翻译为“多版本并发控制”，和数据库锁一样，是一种并发控制的解决方案，主要用于解决 读-写 并发的情况。</li><li>MVCC 是一种读取数据的技术，它允许多个事务同时读取同一份数据的不同版本。在 REPEATABLE-READ 隔离级别下，事务在其生命周期内看到的数据版本是一致的，也就是说，事务在开始时看到的数据版本在整个事务过程中都不会改变。</li></ul><h5 id="3-4-1-1-数据库中对数据的主要操作分别是读和写，在并发的场景下则会出现三种情况："><a href="#3-4-1-1-数据库中对数据的主要操作分别是读和写，在并发的场景下则会出现三种情况：" class="headerlink" title="3.4.1.1 数据库中对数据的主要操作分别是读和写，在并发的场景下则会出现三种情况："></a>3.4.1.1 数据库中对数据的主要操作分别是读和写，在并发的场景下则会出现三种情况：</h5><ul><li>“读-读并发”不会出现问题。</li><li>“写-写并发”则通过加锁解决数据的一致性。</li><li>“读-写并发”则通过MVCC的机制解决。</li></ul><h5 id="3-4-1-2-当前读和快照读"><a href="#3-4-1-2-当前读和快照读" class="headerlink" title="3.4.1.2 当前读和快照读"></a>3.4.1.2 当前读和快照读</h5><ul><li>MySQL中只有 RC 和 RR 这两种事务才会使用当前读和快照读。</li><li>快照读：读取的是快照数据，即普通SELECT语句在不加锁的情况下就是快照读。</li><li>当前读：读取的是最新数据，即加锁的SELECT，或对数据进行行增删改都会进行当前读。</li><li>在RR中，快照会在事务中第一次SELECT语句执行时生成，只有在本事务中对数据进行更改才会更新快照。</li><li>在RC中，每次读取都会重新生成一个快照，总是读取行的最新版本。</li></ul><h5 id="3-4-2-解决的幻读问题："><a href="#3-4-2-解决的幻读问题：" class="headerlink" title="3.4.2 解决的幻读问题："></a>3.4.2 解决的幻读问题：</h5><ul><li>RR中，通过MVCC机制，解决了快照读的幻读问题，RR中的快照读只有第一次会进行数据查询，后面都是直接读取快照，所以不会发生幻读。</li><li>RR中，通过间隙锁解决了部分当前读的幻读问题，通过增加间隙锁将记录之间的间隙锁住，避免新的数据插入。</li></ul><h5 id="3-4-3-未解决的幻读问题："><a href="#3-4-3-未解决的幻读问题：" class="headerlink" title="3.4.3 未解决的幻读问题："></a>3.4.3 未解决的幻读问题：</h5><ul><li><p>如果两个事务，事务1先进行select操作（快照读）<code>select -&gt; A,B</code>，然后事务2插入了一条记录并提交事务2<code>add -&gt; C</code>，再在事务1中进行update新插入的这条记录（当前读操作）是可以更新成功的<code>update -&gt; C</code>，这就是发生了幻读。 </p></li><li><p>如果两个事务，事务1先进行select操作（快照读）<code>select -&gt; A,B</code>，然后事务2插入了一条记录并提交事务2 <code>add -&gt;  C</code>，在事务1中进行了select for update（当前读）之后 <code>select for update -&gt; A,B,C</code>，再进行select（快照读）也会发生幻读 <code>select -&gt; A,B,C</code>。</p></li><li><p>如果两个事务，事务1先进行select操作（快照读）<code>SELECT * FROM users WHERE age = 25; -&gt; A,B</code>，然后事务2插入一条记录并提交事物2<code>（age:唯一索引）</code>，再在事务1中进行select操作<code>select -&gt; A,B,C</code>，因为在唯一性索引上插入的新行不会触发间隙锁。</p></li></ul><h3 id="4-关系型数据库十分强调数据的一致性，并为此降低读写性能付出了巨大的代价"><a href="#4-关系型数据库十分强调数据的一致性，并为此降低读写性能付出了巨大的代价" class="headerlink" title="4. 关系型数据库十分强调数据的一致性，并为此降低读写性能付出了巨大的代价"></a>4. 关系型数据库十分强调数据的一致性，并为此降低读写性能付出了巨大的代价</h3><h4 id="4-1-InnoDB的锁机制"><a href="#4-1-InnoDB的锁机制" class="headerlink" title="4.1 InnoDB的锁机制"></a>4.1 InnoDB的锁机制</h4><p>根据不同的锁粒度：</p><ul><li>行级锁：根据锁粒度区分：记录锁（Record Lock 锁索引记录）、间隙锁（Gap Lock 锁索引记录直接的间隙）、间隙记录锁（Next-Key Lock 同时锁索引记录和间隙，范围左开右闭）、</li><li>页级锁（InnoDB没有）：</li><li>表级锁：对表加锁，包含：意向锁、AUTO-INC锁、字典锁、表级排他&amp;共享锁、</li><li>全局锁：影响整个MySQL实例的锁。<code>FLUSH TABLES WITH READ LOCK</code>这个命令会锁定整个数据库实例所有的表（全局读锁定），主要用于全局备份等操作，执行命令后库实例中的所有表都被锁定为只读。</li></ul><h5 id="4-1-1-共享锁和排他锁"><a href="#4-1-1-共享锁和排他锁" class="headerlink" title="4.1.1 共享锁和排他锁"></a>4.1.1 共享锁和排他锁</h5><p>Innodb中的锁在锁的级别上一般分为两种，一种是共享锁（S锁），一种是排他锁（X锁）</p><ul><li>共享锁又称读锁，是读取操作创建的锁。其他用户可以并发读取数据，但任何事物都不能对数据进行修改（获取数据上的排他锁），直到已释放所有共享锁</li><li>排他锁又称写锁，如果事务T对数据A加上排他锁后，则其他事务不能再对A加任何类型的锁。获得排他锁的事务既能读取数据，又能修改数据。</li><li>表级排他&amp;共享锁：<code>LOCK TABLES table READ</code>：添加表级共享锁， <code>LOCK TABLES table WRITE</code>：添加表级排他锁。</li></ul><h5 id="4-1-2-意向锁（Intention-Locks）"><a href="#4-1-2-意向锁（Intention-Locks）" class="headerlink" title="4.1.2 意向锁（Intention Locks）"></a>4.1.2 意向锁（Intention Locks）</h5><p>当多个事务想要访问一个共享资源时，如果每个事务都直接请求获取锁，那么就可能会导致互相阻塞，甚至导致死锁。<br>为了解决这个问题，MySQL引入了意向锁机制。所以意向锁上数据库管理系统中用于实现锁协议的一种锁机制，旨在处理不同锁力度（如行锁和表锁）之间的并发性问题。（相同锁粒度（如多个行级锁）之间的并发性问题通过行级互斥锁解决。）</p><ul><li>意向排他锁（IX锁），表示事务打算在资源上设置排他锁。这表示事务计划修改，并不希望在读取时有其他事务同时设置共享排他锁。</li><li>意向共享锁（IS锁），表示事务打算在资源上设置共享锁。这通常用于表示事务计划读取资源，并不希望在读取事有其他事务设置排他锁。</li><li>插入意向锁是一种由插入操作在行插入之前设置的间隙锁。这种锁表明了插入的意图，以这样一种方式，如果多个事务插入到同一索引间隙中但不在间隙内到相同位置插入，则他们不需要互相等待。<br>注意：</li><li>意向锁是一个表级锁（作用范围是针对整个表，而不是针对表中的具体行或页），并且他会在触发意向锁的事务提交或者回滚后释放。</li><li>意向锁本身不锁定资源，而是未来通知其他事务，以防止它们在资源上设置不兼容的锁。</li><li>意向锁并不是直接由用户请求的，而是由MySQL管理的。</li></ul><h5 id="4-1-3-记录锁（Record-Lock）"><a href="#4-1-3-记录锁（Record-Lock）" class="headerlink" title="4.1.3 记录锁（Record Lock）"></a>4.1.3 记录锁（Record Lock）</h5><p>记录锁是加在索引记录上的锁，是一个典型的行级锁，如果没有索引InnoDB回创建一个隐藏的聚簇索引（隐藏主键row_id），并使用这个索引进行记录锁定。</p><h5 id="4-1-4-间隙锁（Gap-Lock）"><a href="#4-1-4-间隙锁（Gap-Lock）" class="headerlink" title="4.1.4 间隙锁（Gap Lock）"></a>4.1.4 间隙锁（Gap Lock）</h5><p>间隙锁是锁索引记录之间的间隙。</p><h5 id="4-1-5-间隙记录锁（Next-Key-Lock）"><a href="#4-1-5-间隙记录锁（Next-Key-Lock）" class="headerlink" title="4.1.5 间隙记录锁（Next-Key Lock）"></a>4.1.5 间隙记录锁（Next-Key Lock）</h5><p>是Record Lock和Gap Lock的组合，同时锁索引记录和间隙，他的范围是左开右闭。</p><p>注意 MySQL加锁原则为，两个“原则”、两个“优化”和一个“bug”：</p><ul><li>原则1：加锁的基本单位是next-key lock。是一个前开后闭区间。</li><li>原则2：查找过程中访问到的对象才会加锁。 </li><li>优化1：索引上的等值查询，给唯一索引加锁的时候，next-key lock 退化为行锁。 </li><li>优化2：索引上的等值查询，向右遍历时且最后一个值不满足等值条件的时候，next-key lock 退化为间隙锁。 </li><li>一个 bug：唯一索引上的范围查询会访问到不满足条件的第一个值为止。</li></ul><h5 id="4-1-6-字典锁（Metadata-Locks）"><a href="#4-1-6-字典锁（Metadata-Locks）" class="headerlink" title="4.1.6 字典锁（Metadata Locks）"></a>4.1.6 字典锁（Metadata Locks）</h5><p>对表结构改变的动作，如ALTER、DROP，他们加锁的过程添加的MDL锁，即字典锁，也叫元数据锁。主要目的是保护数据字典中的元数据不被并发更改。MDL 锁是由MySQL自动管理的，不需要应用程序显式地获取或释放。</p><h5 id="4-1-6-1-DML锁的类型："><a href="#4-1-6-1-DML锁的类型：" class="headerlink" title="4.1.6.1 DML锁的类型："></a>4.1.6.1 DML锁的类型：</h5><ul><li>MDL_EXCLUSIVE (EX)：独占锁，用于写入操作，阻止所有其他类型的 MDL 锁。</li><li>MDL_SHARED (SH)：共享锁，用于读取操作，允许其他共享锁，但阻止独占锁。</li><li>MDL_SHARED_UPGRADABLE (SX)：可升级共享锁，用于读取操作，允许其他共享锁，但阻止独占锁。这种锁可以升级为独占锁。</li><li>MDL_INTENTION_EXCLUSIVE (IX)：意向独占锁，表示事务希望在将来获取独占锁。</li></ul><h3 id="5-关系型数据库的数据通常存在硬盘中"><a href="#5-关系型数据库的数据通常存在硬盘中" class="headerlink" title="5. 关系型数据库的数据通常存在硬盘中"></a>5. 关系型数据库的数据通常存在硬盘中</h3><h4 id="5-1-MySQL的数据存储也可以基于内存，即MySQL的内存表技术。它允许将数据和索引存储在内存中，从而提高检索速度和修改数据的效率。创建内存表于创建普通表一样，使用CREATE-TABLE语句，但是需要将存储引擎设置为：ENGINE-MEMORY"><a href="#5-1-MySQL的数据存储也可以基于内存，即MySQL的内存表技术。它允许将数据和索引存储在内存中，从而提高检索速度和修改数据的效率。创建内存表于创建普通表一样，使用CREATE-TABLE语句，但是需要将存储引擎设置为：ENGINE-MEMORY" class="headerlink" title="5.1. MySQL的数据存储也可以基于内存，即MySQL的内存表技术。它允许将数据和索引存储在内存中，从而提高检索速度和修改数据的效率。创建内存表于创建普通表一样，使用CREATE TABLE语句，但是需要将存储引擎设置为：ENGINE=MEMORY"></a>5.1. MySQL的数据存储也可以基于内存，即MySQL的内存表技术。它允许将数据和索引存储在内存中，从而提高检索速度和修改数据的效率。创建内存表于创建普通表一样，使用<code>CREATE TABLE</code>语句，但是需要将存储引擎设置为：<code>ENGINE=MEMORY</code></h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查看mysql当前使用什么存储引擎</span><span class="token keyword">show</span> engines<span class="token punctuation">;</span><span class="token comment"># 查看mysql当前默认存储引擎</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%storage_engine%'</span><span class="token punctuation">;</span><span class="token comment"># 查看表存储引擎</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> v_task<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-数据库存储引擎：数据库引擎是用于存储、处理和保护数据的核心服务。利用数据库引擎可以控制访问权限并快速处理事务。"><a href="#5-2-数据库存储引擎：数据库引擎是用于存储、处理和保护数据的核心服务。利用数据库引擎可以控制访问权限并快速处理事务。" class="headerlink" title="5.2. 数据库存储引擎：数据库引擎是用于存储、处理和保护数据的核心服务。利用数据库引擎可以控制访问权限并快速处理事务。"></a>5.2. 数据库存储引擎：数据库引擎是用于存储、处理和保护数据的核心服务。利用数据库引擎可以控制访问权限并快速处理事务。</h4><h2 id="二、注意事项"><a href="#二、注意事项" class="headerlink" title="二、注意事项"></a>二、注意事项</h2><h3 id="1-多表join"><a href="#1-多表join" class="headerlink" title="1.多表join"></a>1.多表join</h3><h4 id="1-1-join的效率比较低，MySQL使用了嵌套循环（Nested-Loop-Join）的方式来实现关联查询，简单来说就是通过两层循环，第一张表做外循环，第二张表做内循环，外循环每一条记录和内循环中的记录作比较符合就输出，eg：2张表join复杂度为O-n-2-3张表join复杂度为O-n-3"><a href="#1-1-join的效率比较低，MySQL使用了嵌套循环（Nested-Loop-Join）的方式来实现关联查询，简单来说就是通过两层循环，第一张表做外循环，第二张表做内循环，外循环每一条记录和内循环中的记录作比较符合就输出，eg：2张表join复杂度为O-n-2-3张表join复杂度为O-n-3" class="headerlink" title="1.1. join的效率比较低，MySQL使用了嵌套循环（Nested-Loop Join）的方式来实现关联查询，简单来说就是通过两层循环，第一张表做外循环，第二张表做内循环，外循环每一条记录和内循环中的记录作比较符合就输出，eg：2张表join复杂度为O(n^2),3张表join复杂度为O(n^3)"></a>1.1. join的效率比较低，MySQL使用了嵌套循环（Nested-Loop Join）的方式来实现关联查询，简单来说就是通过两层循环，第一张表做外循环，第二张表做内循环，外循环每一条记录和内循环中的记录作比较符合就输出，eg：2张表join复杂度为O(n^2),3张表join复杂度为O(n^3)</h4><h5 id="1-1-1-嵌套循环算法（Nested-Loop-Join）"><a href="#1-1-1-嵌套循环算法（Nested-Loop-Join）" class="headerlink" title="1.1.1 嵌套循环算法（Nested-Loop Join）"></a>1.1.1 嵌套循环算法（Nested-Loop Join）</h5><ul><li>simple nested loop，他的做法简单粗暴，就是全量扫描连接两张表进行数据的两两对比，所以他的复杂度可以认为是N*M</li><li>index nested loop，当Inner Loop的表用到字段有索引的话，可以用到索引进行查询数据，因为索引是B+树的，复杂度可以近似认为是N*logM</li><li>block nested loop，其实是引入了一个Buffer，会提前把外循环的一部分结果提前放到JOIN BUFFER中，然后内循环的每一行都和整个buffer的数据作比较。虽然比较次数还是N*M，但是因为join buffer是基于内存的，所以效率高很多。</li></ul><h5 id="1-1-2-不用join如何关联查询"><a href="#1-1-2-不用join如何关联查询" class="headerlink" title="1.1.2 不用join如何关联查询"></a>1.1.2 不用join如何关联查询</h5><ul><li>在内存中自己做关联，先从数据库吧数据查出来后，代码中再进行二次查询再进行关联。</li><li>数据冗余，把一些重要的数据在表中做冗余，就可以避免关联查询</li><li>宽表，就是基于一定的join关系，吧数据库中多张表的数据打平做成一张大的宽表，可以同步到ES或者直接在数据库汇总查询。</li></ul><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零拷贝</title>
      <link href="/2024/01/24/%E9%9B%B6%E6%8B%B7%E8%B4%9D/"/>
      <url>/2024/01/24/%E9%9B%B6%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h1><p>零拷贝字面上的意思包括两个，“零”和“拷贝”：</p><ul><li>“拷贝”：就是指数据从一个存储区域转移到另一个存储区域。</li><li>“零” ：表示次数为0，它表示拷贝数据的次数为0。</li><li>常见的零拷贝方式有mmap，sendfile，dma，directI&#x2F;O等。</li></ul><h2 id="（一）前置知识"><a href="#（一）前置知识" class="headerlink" title="（一）前置知识"></a>（一）前置知识</h2><h3 id="1-内核态和用户态"><a href="#1-内核态和用户态" class="headerlink" title="1.内核态和用户态"></a>1.内核态和用户态</h3><p>用户态（User Mode）和内核态（Kernel Mode），也分别称为用户空间和内核空间，是现代操作系统中CPU执行的两种不同权限级别，它们在操作系统中扮演着至关重要的角色，确保系统的稳定性和安全性。</p><h4 id="1-1用户态（User-Mode）："><a href="#1-1用户态（User-Mode）：" class="headerlink" title="1.1用户态（User Mode）："></a>1.1用户态（User Mode）：</h4><p>这是应用程序运行的正常状态。大多数程序，如文本编辑器、浏览器等，都在用户态下执行。<br>在用户态下，程序可以访问自己的内存区域（用户空间），但不能直接访问系统核心资源，如硬件设备、系统内存、其他进程的地址空间等。用户态限制了程序的行为，防止错误或恶意代码破坏系统。</p><h4 id="1-2内核态（Kernel-Mode）："><a href="#1-2内核态（Kernel-Mode）：" class="headerlink" title="1.2内核态（Kernel Mode）："></a>1.2内核态（Kernel Mode）：</h4><p>当需要执行特权操作时，如硬件访问、修改内存映射、处理中断等，CPU会从用户态切换到内核态。<br>在内核态下，程序可以执行任何机器指令，访问所有内存和硬件资源，因为此时操作系统内核具有完全的控制权。<br>内核态是操作系统内核执行任务的状态，包括系统调用的处理、驱动程序的执行等。</p><h4 id="1-3关联与转换："><a href="#1-3关联与转换：" class="headerlink" title="1.3关联与转换："></a>1.3关联与转换：</h4><ul><li>系统调用：应用程序通过调用操作系统提供的API（应用编程接口）来请求服务，如文件读写、网络通信等，这会导致从用户态切换到内核态。</li><li>异常：当程序执行遇到错误或特殊情况（如除零错误、页面错误）时，CPU会自动切换到内核态来处理这些异常。</li><li>外围设备中断：硬件设备完成操作或需要服务时，会通过中断信号通知CPU，CPU响应中断时也会进入内核态处理中断事件。</li></ul><h4 id="1-4-总结"><a href="#1-4-总结" class="headerlink" title="1.4.总结"></a>1.4.总结</h4><p>用户态和内核态是操作系统隔离应用程序与系统核心功能的一种机制，确保了系统的稳定运行和安全性。两者之间的转换由硬件支持，并由操作系统精心管理，以在性能和安全之间取得平衡。</p><ul><li>例如：Java程序中的主线程还是JVM（Java虚拟机）管理的守护线程（如垃圾回收线程），它们在执行常规的程序逻辑时，都运行在用户态（User Mode）。这意味着包括读取文件这样的操作在内的大部分任务，都是在用户态下发起请求，然后通过系统调用委托给操作系统内核完成实际的低级操作。但是当堆内存不足且JVM尝试扩展堆空间时，可能需要向操作系统请求更多的内存，这时就需要通过系统调用进入内核态来完成内存分配。此外，如果GC过程中涉及到的内存页当前不在物理内存中（即发生了页面错误），那么处理这一情况也可能需要内核介入，从而导致用户态到内核态的切换。</li></ul><h2 id="（二）I-O流程"><a href="#（二）I-O流程" class="headerlink" title="（二）I&#x2F;O流程"></a>（二）I&#x2F;O流程</h2><p><img src="/markdownimages/zeroCopy/io.jpg" alt="操作系统 I/O">  </p><h3 id="1-Buffer-I-O"><a href="#1-Buffer-I-O" class="headerlink" title="1.Buffer I&#x2F;O"></a>1.Buffer I&#x2F;O</h3><p>Buffer I&#x2F;O为了提高读写效率和保护磁盘，使用了页缓存机制(page cache)，不过由于页缓存处于内核空间，不能被应用程序（用户进程）直接寻址，所以还需要将页缓存数据再拷贝到内存对应的用户空间中。</p><h4 id="1-1-DMA"><a href="#1-1-DMA" class="headerlink" title="1.1 DMA"></a>1.1 DMA</h4><p>DMA（Direct Memory Access）直接内存访问，解决传统I&#x2F;O需要CPU参与的问题。</p><h4 id="1-2-mmap-write"><a href="#1-2-mmap-write" class="headerlink" title="1.2 mmap + write"></a>1.2 mmap + write</h4><p>mmap（memory map）内存映射，将内核态的页缓存（page cache）与用户态内存映射到一起，减少了一次内存拷贝。</p><h4 id="1-3-sendfile"><a href="#1-3-sendfile" class="headerlink" title="1.3 sendfile"></a>1.3 sendfile</h4><p>只传输静态文件，用户态不做干预，减少了一次数据拷贝，上下文切换少了两次。例如：访问web服务器的静态资源。</p><h4 id="1-4-sendfile-DMA-Scatter-Gather"><a href="#1-4-sendfile-DMA-Scatter-Gather" class="headerlink" title="1.4 sendfile + DMA Scatter&#x2F;Gather"></a>1.4 sendfile + DMA Scatter&#x2F;Gather</h4><p>优化了网络访问中，访问静态文件，静态文件在内核态的页缓存（page cache）与socket缓存（socket cache）之间的copy，由DMA将数据从读缓冲区拷贝到网卡。</p><h3 id="2-Direct-I-O"><a href="#2-Direct-I-O" class="headerlink" title="2. Direct I&#x2F;O"></a>2. Direct I&#x2F;O</h3><p>Direct I&#x2F;O也叫直接I&#x2F;O，本质上就是跳过页缓存(bypass page cache)，直接将用户态buffer写入存储系统中（通过DMA），操作系统不会再做刷盘处理。</p><ul><li>例如：Mysql就是使用Direct I&#x2F;O，同时自己实现了一套缓存系统。</li><li><a href="https://github.com/smacke/jaydio">Jaydio是一个实现了对Direct I&#x2F;O支持的Java I&#x2F;O库</a></li></ul><h2 id="（三）参考"><a href="#（三）参考" class="headerlink" title="（三）参考"></a>（三）参考</h2><ul><li><a href="https://www.yuque.com/hollis666/ydpq6c/edxez2ggicn8thzq">Java 8 Guwen K</a></li><li><a href="https://cloud.tencent.com/developer/article/2301097">buffer io和direct io</a></li><li><a href="https://www.zhihu.com/question/490036559/answer/2149345354">知乎：请问下发起write系统调用，是等待数据写完，线程再继续运行吗，还是直接返回，由操作系统写入就行了？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 零拷贝 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2024/01/24/Docker/"/>
      <url>/2024/01/24/Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="1-Docker安装"><a href="#1-Docker安装" class="headerlink" title="1.Docker安装"></a>1.Docker安装</h2><h3 id="1-1-安装Docker"><a href="#1-1-安装Docker" class="headerlink" title="1.1.安装Docker"></a>1.1.安装Docker</h3><blockquote><p>环境查看</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 系统内核是3.10以上的</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># uname -r</span><span class="token number">3.10</span>.0-1127.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 系统版本</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/os-release </span><span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"CentOS Linux"</span><span class="token assign-left variable">VERSION</span><span class="token operator">=</span><span class="token string">"7 (Core)"</span><span class="token assign-left variable">ID</span><span class="token operator">=</span><span class="token string">"centos"</span><span class="token assign-left variable">ID_LIKE</span><span class="token operator">=</span><span class="token string">"rhel fedora"</span><span class="token assign-left variable">VERSION_ID</span><span class="token operator">=</span><span class="token string">"7"</span><span class="token assign-left variable">PRETTY_NAME</span><span class="token operator">=</span><span class="token string">"CentOS Linux 7 (Core)"</span><span class="token assign-left variable">ANSI_COLOR</span><span class="token operator">=</span><span class="token string">"0;31"</span><span class="token assign-left variable">CPE_NAME</span><span class="token operator">=</span><span class="token string">"cpe:/o:centos:centos:7"</span><span class="token assign-left variable">HOME_URL</span><span class="token operator">=</span><span class="token string">"https://www.centos.org/"</span><span class="token assign-left variable">BUG_REPORT_URL</span><span class="token operator">=</span><span class="token string">"https://bugs.centos.org/"</span><span class="token assign-left variable">CENTOS_MANTISBT_PROJECT</span><span class="token operator">=</span><span class="token string">"CentOS-7"</span><span class="token assign-left variable">CENTOS_MANTISBT_PROJECT_VERSION</span><span class="token operator">=</span><span class="token string">"7"</span><span class="token assign-left variable">REDHAT_SUPPORT_PRODUCT</span><span class="token operator">=</span><span class="token string">"centos"</span><span class="token assign-left variable">REDHAT_SUPPORT_PRODUCT_VERSION</span><span class="token operator">=</span><span class="token string">"7"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>安装Docker</p></blockquote><p>帮助文档：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、卸载旧的Docker版本</span><span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\</span>                  docker-client <span class="token punctuation">\</span>                  docker-client-latest <span class="token punctuation">\</span>                  docker-common <span class="token punctuation">\</span>                  docker-latest <span class="token punctuation">\</span>                  docker-latest-logrotate <span class="token punctuation">\</span>                  docker-logrotate <span class="token punctuation">\</span>                  docker-engine<span class="token comment"># 2、需要的安装包</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils<span class="token comment">#3、设置镜像的仓库</span><span class="token comment"># 默认是国外的下载超级慢！</span><span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\</span> --add-repo <span class="token punctuation">\</span> https://download.docker.com/linux/centos/docker-ce.repo <span class="token comment"># 阿里云的镜像</span>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="token comment"># 更新yum软件包索引</span>yum makecache fast<span class="token comment"># 4、安装docker相关的软件 docker-ce社区版 docker-ee企业版</span><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io <span class="token parameter variable">-y</span><span class="token comment"># 5、启动docker</span><span class="token function">sudo</span> systemctl start <span class="token function">docker</span><span class="token comment"># 6、测试docker安装成功？</span><span class="token function">docker</span> version<span class="token comment"># 7、永远的 [HelloWorld] ^_^ 能够成功拉取image表示docker安装成功！</span><span class="token function">docker</span> run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker踩到的坑:运行[docker run hello-world]遇到的坑？会报错？</span>docker: Error response from daemon: Get https://registry-1.docker.io/v2/library/hello-world/manifests/latest: Get https://auth.docker.io/token?scope<span class="token operator">=</span>repository%3Alibrary%2Fhello-world%3Apull<span class="token operator">&amp;</span><span class="token assign-left variable">service</span><span class="token operator">=</span>registry.docker.io: net/http: TLS handshake timeout.<span class="token comment"># 解决办法：在/etc/docker下创建daemon.json文件。拷贝如下代码:</span><span class="token punctuation">&#123;</span>  <span class="token string">"registry-mirrors"</span>:<span class="token punctuation">[</span><span class="token string">"https://registry.docker-cn.com"</span>,<span class="token string">"http://hub-mirror.c.163.com"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment"># 保存退出！</span><span class="token comment"># 重启docker服务：service docker restart</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>卸载Docker</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、卸载依赖</span><span class="token function">sudo</span> yum remove docker-ce docker-ce-cli containerd.io<span class="token comment"># 2、删除资源</span><span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/docker<span class="token comment"># /var/lib/docker是Docker默认的工作路径！！！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-阿里云镜像加速"><a href="#1-2-阿里云镜像加速" class="headerlink" title="1.2.阿里云镜像加速"></a>1.2.阿里云镜像加速</h3><blockquote><p>设置阿里云镜像步骤</p></blockquote><p>1、登录 [阿里云—&gt;控制台] 找到容器服务。</p><p><img src="/markdownimages/Docker/1.png" alt="阿里云"></p><p>2、找到镜像加速地址。</p><p><img src="/markdownimages/Docker/2.png" alt="镜像加速"></p><p>3、配置加速器使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">'EOF'&#123;  "registry-mirrors": ["https://phapqiqc.mirror.aliyuncs.com"]&#125;EOF</span><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>docker run 的运行流程图</p></blockquote><p><img src="/markdownimages/Docker/3.png" alt="docker运行流程"></p><h3 id="1-3-底层原理"><a href="#1-3-底层原理" class="headerlink" title="1.3.底层原理"></a>1.3.底层原理</h3><blockquote><p>docker是怎么工作的？</p></blockquote><p>Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问。</p><p>Docker-Server接收到Docker-Client的指令，就会执行这个命令。</p><p><img src="/markdownimages/Docker/4.png" alt="docker底层原理"></p><blockquote><p>docker为什么比VM快？</p></blockquote><p>1、Docker有着比虚拟机更少的抽象层。</p><p>2、Docker利用的是宿主机的内核。所以说新建一个容器的时候，docker不需要像虚拟机一样重新加载个操作系统内核。</p><h2 id="2-Docker的常用命令"><a href="#2-Docker的常用命令" class="headerlink" title="2.Docker的常用命令"></a>2.Docker的常用命令</h2><h3 id="2-1-帮助命令"><a href="#2-1-帮助命令" class="headerlink" title="2.1.帮助命令"></a>2.1.帮助命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> version<span class="token comment">#显示docker的版本信息</span><span class="token function">docker</span> info<span class="token comment">#显示Docker的系统信息，包括镜像和容器的数量</span><span class="token function">docker</span> <span class="token punctuation">[</span>命令<span class="token punctuation">]</span> <span class="token parameter variable">--help</span><span class="token comment">#docker帮助信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Docker帮助文档地址：<a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p><h3 id="2-2-镜像命令"><a href="#2-2-镜像命令" class="headerlink" title="2.2.镜像命令"></a>2.2.镜像命令</h3><blockquote><p>docker imags  查看所有本地的主机上的镜像</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEhello-world         latest              bf756fb1ae65        <span class="token number">5</span> months ago        <span class="token number">13</span>.3kB<span class="token comment">#解释</span>REPOSITORY 镜像的仓库源TAG镜像的标签IMAGE ID 镜像的IDCREATED 镜像的创建时间SIZE 镜像的大小<span class="token comment">#可选项</span>  -a, <span class="token parameter variable">--all</span>             <span class="token comment">#列出所有的镜像</span>  -q, <span class="token parameter variable">--quiet</span>           <span class="token comment">#只显示镜像的id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>docker search   去dockerhub搜索镜像</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker search mysql</span><span class="token comment">#可选项</span><span class="token parameter variable">--filter</span><span class="token operator">=</span>stars<span class="token operator">=</span><span class="token number">3000</span><span class="token comment">#搜索出来的镜像就是stars大于3000的</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker search nginx --filter=stars=3000</span>NAME                DESCRIPTION                STARS               OFFICIAL            AUTOMATEDnginx               Official build of Nginx.   <span class="token number">13323</span>               <span class="token punctuation">[</span>OK<span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>docker poll下载镜像</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载镜像 docker pull [镜像名] [:tag]</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker pull mysql</span>Using default tag: latest <span class="token comment"># 如果不写tag，默认就下载lastest最新版本</span>latest: Pulling from library/mysql8559a31e96f4: Pull complete <span class="token comment"># 分层下载，docker image的核心，联合文件系统</span>d51ce1c2e575: Pull complete c2344adc4858: Pull complete fcf3ceff18fc: Pull complete 16da0c38dc5b: Pull complete b905d1797e97: Pull complete 4b50d1c6b05c: Pull complete c75914a65ca2: Pull complete 1ae8042bdd09: Pull complete 453ac13c00a3: Pull complete 9e680cd72f08: Pull complete a6b5dc864b6c: Pull complete Digest: sha256:8b7b328a7ff6de46ef96bcf83af048cb00a1c86282bfca0cb119c84568b4caf6 <span class="token comment"># 签名(防伪标志)</span>Status: Downloaded newer image <span class="token keyword">for</span> mysql:latestdocker.io/library/mysql:latest <span class="token comment"># 真实地址</span><span class="token comment">#等价于</span><span class="token function">docker</span> pull mysql<span class="token function">docker</span> pull docker.io/library/mysql:latest<span class="token comment">#指定版本下载 </span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker pull mysql:5.7</span><span class="token number">5.7</span>: Pulling from library/mysql8559a31e96f4: Already exists <span class="token comment"># 下载的mysql5.7和之前下载的mysql可以部分文件可以共用</span>d51ce1c2e575: Already exists c2344adc4858: Already exists fcf3ceff18fc: Already exists 16da0c38dc5b: Already exists b905d1797e97: Already exists 4b50d1c6b05c: Already exists d85174a87144: Pull complete a4ad33703fa8: Pull complete f7a5433ce20d: Pull complete 3dcd2a278b4a: Pull complete Digest: sha256:32f9d9a069f7a735e28fd44ea944d53c61f990ba71460c5c183e610854ca4854Status: Downloaded newer image <span class="token keyword">for</span> mysql:5.7docker.io/library/mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>docker rmi删除image</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 根据image ID删除指定的image</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker rmi -f 9cfcce23593a</span>Untagged: mysql:5.7Untagged: mysql@sha256:32f9d9a069f7a735e28fd44ea944d53c61f990ba71460c5c183e610854ca4854Deleted: sha256:9cfcce23593a93135ca6dbf3ed544d1db9324d4c40b5c0d56958165bfaa2d46aDeleted: sha256:98de3e212919056def8c639045293658f6e6022794807d4b0126945ddc8324beDeleted: sha256:17e8b88858e400f8c5e10e7cb3fbab9477f6d8aacba03b8167d34a91dbe4d8c1Deleted: sha256:c04c087c2af9abd64ba32fe89d65e6d83da514758923de5da154541cc01a3a1eDeleted: sha256:ab8bf065b402b99aec4f12c648535ef1b8dc954b4e1773bdffa10ae2027d3e00<span class="token comment"># 递归删除所有image</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker rmi -f $(docker images -aq)</span><span class="token comment">#删除多个image</span><span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> <span class="token punctuation">[</span>image id1<span class="token punctuation">]</span> <span class="token punctuation">[</span>image id2<span class="token punctuation">]</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-容器命令"><a href="#2-3-容器命令" class="headerlink" title="2.3.容器命令"></a>2.3.容器命令</h3><p><strong>说明：我们有了image才可以创建容器，下载一个centos镜像来测试和学习。</strong></p><blockquote><p>docker run新建容器并启动</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull centos:7<span class="token comment"># docker run [可选参数] image</span><span class="token comment"># 参数说明</span><span class="token parameter variable">--name</span><span class="token operator">=</span><span class="token string">"Name"</span>   <span class="token comment"># 给容器取名字</span><span class="token parameter variable">-d</span><span class="token comment"># 后台运行容器并且输出容器的id</span><span class="token parameter variable">-it</span><span class="token comment"># 使用交互方式运行，进入容器查看内容</span><span class="token parameter variable">-p</span><span class="token comment"># (小写的p)容器的端口和Linux主机端口的映射 </span><span class="token parameter variable">-p</span> 主机端口:容器端口<span class="token punctuation">(</span>常用<span class="token punctuation">)</span><span class="token parameter variable">-p</span> ip:主机端口:容器端口<span class="token parameter variable">-P</span><span class="token comment"># (大写的P)随机指定端口</span><span class="token comment"># 测试，启动centos image并进入容器</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker run -it --name="centos-test1" 470671670cac /bin/bash</span><span class="token punctuation">[</span>root@91f0881f5e49 /<span class="token punctuation">]</span><span class="token comment"># ls </span>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr<span class="token comment"># 退出容器命令</span><span class="token punctuation">[</span>root@91f0881f5e49 /<span class="token punctuation">]</span><span class="token comment"># exit</span><span class="token builtin class-name">exit</span><span class="token punctuation">[</span>root@centos-7-test1 /<span class="token punctuation">]</span><span class="token comment"># ls</span>bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>docker ps列出所有的容器</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有正在运行的容器</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token punctuation">[</span>可选参数<span class="token punctuation">]</span><span class="token comment"># 可选参数</span><span class="token parameter variable">-a</span><span class="token comment"># 列出所有的容器(包括历史运行的容器)</span><span class="token parameter variable">-n</span><span class="token comment"># 显示n个最后创建的容器</span><span class="token parameter variable">-q</span> <span class="token comment"># 只显示容器的id</span><span class="token comment"># 显示最后一个创建的容器</span><span class="token punctuation">[</span>root@centos-7-test1 /<span class="token punctuation">]</span><span class="token comment"># docker ps -n=1</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES91f0881f5e49        470671670cac        <span class="token string">"/bin/bash"</span>         <span class="token number">11</span> minutes ago      Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">8</span> minutes ago                       centos-test1<span class="token comment"># 列出所有的容器(包括历史运行的容器)</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>退出容器</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exit</span><span class="token comment"># 直接退出容器并退出</span>ctrl + P + Q <span class="token comment"># 容器不停止退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>docker rm删除容器</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 按照容器id删除容器 不能删除正在运行的容器，如果要强制删除，需要使用 rm -f</span><span class="token function">docker</span> <span class="token function">rm</span> <span class="token punctuation">[</span>容器id<span class="token punctuation">]</span><span class="token comment"># 删除所有容器</span><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span><span class="token variable">)</span></span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">docker</span> <span class="token function">rm</span><span class="token comment"># 删除所有的容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>启动和停止容器的操作</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> start <span class="token punctuation">[</span>容器id<span class="token punctuation">]</span><span class="token comment"># 启动容器</span><span class="token function">docker</span> restart <span class="token punctuation">[</span>容器id<span class="token punctuation">]</span><span class="token comment"># 重新启动容器</span><span class="token function">docker</span> stop <span class="token punctuation">[</span>容器id<span class="token punctuation">]</span> <span class="token comment"># 停止当前正在运行的容器</span><span class="token function">docker</span> <span class="token function">kill</span> <span class="token punctuation">[</span>容器id<span class="token punctuation">]</span><span class="token comment"># 强制停止运行容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-其他常用命令"><a href="#2-4-其他常用命令" class="headerlink" title="2.4.其他常用命令"></a>2.4.其他常用命令</h3><blockquote><p>后台启动容器</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker run -d [image]</span><span class="token comment"># 问题：docker ps 之后，返现容器停止运行了？why？</span><span class="token comment"># 常见的坑，docker 容器使用后台运行，就必须要有一个前台的进程，docker发现没有应用，就会自动停止。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看日志</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--tail</span> <span class="token punctuation">[</span>number<span class="token punctuation">]</span> <span class="token punctuation">[</span>容器id<span class="token punctuation">]</span><span class="token comment"># 参数说明</span><span class="token parameter variable">-f</span><span class="token comment"># 跟踪日志输出</span><span class="token parameter variable">-t</span><span class="token comment"># 显示时间戳</span><span class="token parameter variable">--tail</span><span class="token comment"># 显示最近number条日志</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看容器中进程信息</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">top</span> <span class="token punctuation">[</span>容器id<span class="token punctuation">]</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker top db1f61a0c5c9</span><span class="token environment constant">UID</span>                 PID                 <span class="token environment constant">PPID</span>                C                   STIME               TTY      root                <span class="token number">7196</span>                <span class="token number">7177</span>                <span class="token number">0</span>                   <span class="token number">22</span>:33               pts/0   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看容器的元数据</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> inspect <span class="token punctuation">[</span>containerId<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>进入当前正在运行的容器</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 容器通常都是后台运行的，需要进入容器 </span><span class="token comment"># 方式一：docker exec</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token punctuation">[</span>containerId<span class="token punctuation">]</span> <span class="token punctuation">[</span>bashshell<span class="token punctuation">]</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker exec -it db1f61a0c5c9 /bin/bash</span><span class="token punctuation">[</span>root@db1f61a0c5c9 /<span class="token punctuation">]</span><span class="token comment"># ls</span>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr <span class="token comment"># 方式二：docker attach</span><span class="token function">docker</span> attach <span class="token punctuation">[</span>containerId<span class="token punctuation">]</span><span class="token comment"># 问题：docker exec 和 docker attach 的区别？</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span><span class="token comment"># 进入容器后开启一个新的终端，exit后不会关闭容器(常用)</span><span class="token function">docker</span> attach <span class="token comment"># 进入容器正在执行的终端，不会启动新的进程，exit后容器会stop。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从容器内拷贝文件到主机上</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令docker cp</span><span class="token function">docker</span> <span class="token function">cp</span> containerID:容器内路径 目的主机路径<span class="token comment"># 测试将centos容器内 /etc/profile 文件拷贝到主机 /opt/ 目录下</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker ps </span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS    db1f61a0c5c9        470671670cac        <span class="token string">"/bin/bash"</span>         <span class="token number">25</span> minutes ago      Up <span class="token number">2</span> minutes                            <span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># docker cp db1f61a0c5c9:/etc/profile /opt/</span><span class="token punctuation">[</span>root@centos-7-test1 ~<span class="token punctuation">]</span><span class="token comment"># cd /opt/</span><span class="token punctuation">[</span>root@centos-7-test1 opt<span class="token punctuation">]</span><span class="token comment"># ll</span>total <span class="token number">4</span>drwxr-xr-x. <span class="token number">3</span> root root   <span class="token number">72</span> Jun <span class="token number">11</span> <span class="token number">14</span>:53 activemqdrwx--x--x. <span class="token number">4</span> root root   <span class="token number">28</span> Jun <span class="token number">12</span> <span class="token number">16</span>:01 containerddrwxr-xr-x. <span class="token number">3</span> root root   <span class="token number">60</span> Jun <span class="token number">11</span> <span class="token number">10</span>:20 <span class="token function">java</span>-rw-r--r--. <span class="token number">1</span> root root <span class="token number">2078</span> Sep <span class="token number">10</span>  <span class="token number">2018</span> profiledrwxr-xr-x. <span class="token number">2</span> root root    <span class="token number">6</span> Oct <span class="token number">31</span>  <span class="token number">2018</span> rhdrwxr-xr-x. <span class="token number">3</span> root root   <span class="token number">61</span> Jun <span class="token number">11</span> <span class="token number">10</span>:23 zookeeper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-小结"><a href="#2-5-小结" class="headerlink" title="2.5.小结"></a>2.5.小结</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">attachAttach to a running container            <span class="token comment"># 当前shell下进入到指定的正在运行的container中</span>build Build an image from a Dockerfile           <span class="token comment"># 通过Dockerfile构建镜像</span>commitCreate a new image from a container‘s changes<span class="token comment"># 提交当前容器为新的镜像</span><span class="token function">cp</span>   Copy files/folders between a container and the <span class="token builtin class-name">local</span> filesystem<span class="token comment"># 从容器中拷贝文件到宿主机指定路径</span>createCreate a new container<span class="token comment"># 创建一个新的容器,同run，但是不会启动容器</span><span class="token function">diff</span>Inspect changes to <span class="token function">file</span> on container <span class="token comment"># 查看容器文件的变化</span>events Get real <span class="token function">time</span> events from the server<span class="token comment"># 从docker服务获取容器实时事件</span><span class="token builtin class-name">exec</span>Run a <span class="token builtin class-name">command</span> <span class="token keyword">in</span> a running container<span class="token comment"># 在一个已经运行的容器内执行命令</span><span class="token builtin class-name">export</span>Export a container’s filesystem as a <span class="token function">tar</span> archive<span class="token comment"># 导出容器的内容流作为一个tar归档文件[对应 import]</span><span class="token function">history</span>show the <span class="token function">history</span> of an image<span class="token comment"># 展示一个镜像形成历史</span>imagesList images<span class="token comment"># 列出系统中当前的镜像</span><span class="token function">import</span>Import the contents form a tarball to create a filesystem image<span class="token comment"># 从tar包中的内容创建一个新的文件系统镜像[对应 export]</span>infoDisplay system-wide information<span class="token comment"># 展示出系统相关信息</span>inspectReturn low-level information on a container<span class="token comment"># 查看容器详细信息</span><span class="token function">kill</span><span class="token function">kill</span> one or <span class="token function">more</span> running containers<span class="token comment"># 强制停止一个或多个正在运行的容器</span>loadload an image from a <span class="token function">tar</span> archive<span class="token comment"># 从一个tar包中加载镜像[对应 save]</span>loginRegisty or login to the <span class="token function">docker</span> registry server<span class="token comment"># 注册或者登陆一个docker源服务器</span><span class="token builtin class-name">logout</span>Logout from a Docker registy server<span class="token comment"># 从当前的docker registry server退出</span>logsFetch the logs of a container<span class="token comment"># 显示容器的日志</span>portshow port mappings <span class="token keyword">for</span> a container<span class="token comment"># 查看容器端口的映射</span>pausePause all process within the container<span class="token comment"># 暂停容器</span><span class="token function">ps</span>  List containers<span class="token comment"># 列出当前系统中的容器列表</span>pullPull an image from a registry<span class="token comment"># 从docker源服务器中拉取镜像</span>pushPush an image or repository to a registry <span class="token comment"># 推送指定镜像或镜像库到docker源服务器</span>restartRestart one or <span class="token function">more</span> containers<span class="token comment"># 重启一个或多个容器</span>stopStop one or <span class="token function">more</span> running containers<span class="token comment"># 停止一个或多个正在运行的容器</span>tag   Tag an image into a repository             <span class="token comment"># 给源镜像中打标签</span><span class="token function">top</span>   Display the running process of a container<span class="token comment"># 展示容器中正在运行的进程列表</span>unpauseUnpause all processes within a container<span class="token comment"># 取消暂停容器</span>versionShow the <span class="token function">docker</span> version information     <span class="token comment"># 展示Docker版本信息</span><span class="token function">wait</span>Block <span class="token keyword">until</span> one or <span class="token function">more</span> containers stop,then print their <span class="token builtin class-name">exit</span> codes<span class="token comment"># 截取容器停止时的退出状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-Docker容器内存配置"><a href="#2-6-Docker容器内存配置" class="headerlink" title="2.6.Docker容器内存配置"></a>2.6.Docker容器内存配置</h3><blockquote><p>docker内存限制有两种方式：</p><ol><li>创建容器时添加-m参数，单位可以是b,k,m,g</li><li>如果已经存在容器，修改该容器的hostconfig.json文件</li></ol></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方式一:-m参数限制</span><span class="token comment"># 创建容器时我们可以添加-m参数限制容器的内存占用。单位是b,k,m,b 例如:</span><span class="token comment"># 创建mysql的镜像实例，并限制容器占用内存大小为400m</span><span class="token function">docker</span> run <span class="token parameter variable">-dit</span> <span class="token parameter variable">--name</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> 400m <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方式二:修改hostconfig.json文件限制</span>hostconfig.hson文件是容器的配置文件，每一个容器都有一个对应的 hostconfig.json配置文件，我们在创建容器时使用的任何参数，都可以在这里配置,功能十分的强劲。<span class="token comment"># 1.查找容器对应的hostconfig.json文件</span><span class="token function">docker</span> <span class="token function">ps</span>  <span class="token comment">#找到要修改的容器id，记住它，后面要根据这个id找文件夹</span><span class="token function">find</span> / <span class="token parameter variable">-name</span> hostconfig.json <span class="token comment">#全局搜索hostconfig.json文件，文件的最后一级目录就是容器id</span><span class="token comment"># 通过上面的命令，就可以找到容器对应的hostconfig.json文件了。</span><span class="token comment"># 2.停止docker</span><span class="token comment"># 在修改hostconfig.json文件前，必须要停止docker，否则修改无效</span>systemctl stop <span class="token function">docker</span><span class="token comment"># 3.修改hostconfig.json文件</span><span class="token comment"># 通过vi命令修改配置文件，找到Memory这一项，修改内存大小。请注意：这里的单位默认为byte。最小内存限制为4m，也就是，4x1024x1024。我这里修改为700mb，也就是700x1024x1024。修改完成之后保存退出。</span><span class="token comment"># 4.启动docker</span>systemctl start <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Docker镜像"><a href="#3-Docker镜像" class="headerlink" title="3.Docker镜像"></a>3.Docker镜像</h2><h3 id="3-1-镜像是什么？"><a href="#3-1-镜像是什么？" class="headerlink" title="3.1.镜像是什么？"></a>3.1.镜像是什么？</h3><p>镜像是一种轻量级，可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><p>所有的应用直接打包成为Docker镜像，就可以直接跑起来！</p><p>如何得到镜像：</p><ul><li>从远程仓库下载。</li><li>朋友拷贝给你。</li><li>自己制作镜像DockerFile。</li></ul><h3 id="3-2-Docker镜像加载原理"><a href="#3-2-Docker镜像加载原理" class="headerlink" title="3.2.Docker镜像加载原理"></a>3.2.Docker镜像加载原理</h3><blockquote><p>UnionFS（联合文件系统）</p></blockquote><p>UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持対文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。Union文件系统是Docker镜像的基础。镜像可以通过分层来继承，基于基础镜像，可以制作各种具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但是从外面看来，只能看到一个文件系统，联合加载会把各层文件叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><blockquote><p>镜像加载原理</p></blockquote><ul><li><p>docker 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p></li><li><p>bootfs(boot file system) 主要包含bootloader和kernel，bootloader 主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux&#x2F;Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就存在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p></li><li><p>roorfs （root file system），在bootfs之上。包含的就是典型Linux系统中的 &#x2F;dev ，&#x2F;proc，&#x2F;bin ，&#x2F;etx 等标准的目录和文件。rootfs就是各种不同的操作系统发行版。比如Ubuntu，Centos等等。</p></li><li><p>对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host（宿主机）的kernel，自己只需要提供rootfs就行了，由此可见对于不同的Linux发行版，bootfs基本是一致的，rootfs会有差别，因此不同的发行版可以公用bootfs。</p></li></ul><p><img src="/markdownimages/Docker/5.png" alt="Docker镜像联合文件系统"></p><blockquote><p>镜像分层</p></blockquote><ul><li>所有的Docker镜像都起始于一个基础的镜像层，当进行修改或增加新的内容时，就会在当前的镜像层上，创建新的镜像层。</li><li>举一个简单的例子，例如基于CentOS7创建新的镜像，这就是镜像的第一层，如果在该镜像中添加<code>Java</code>包，就会在基础镜像层上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。</li></ul><p><img src="/markdownimages/Docker/6.png" alt="容器分层"></p><h3 id="3-3-Commit镜像"><a href="#3-3-Commit镜像" class="headerlink" title="3.3.Commit镜像"></a>3.3.Commit镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> commit 提交容器成为一个新的镜像<span class="token comment"># docker commit基本语法</span><span class="token function">docker</span> commit <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">"描述信息"</span> <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">"作者名字"</span> 目标镜像ID:<span class="token punctuation">[</span>TAG<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-容器数据卷"><a href="#4-容器数据卷" class="headerlink" title="4.容器数据卷"></a>4.容器数据卷</h2><h3 id="4-1-什么是容器数据卷"><a href="#4-1-什么是容器数据卷" class="headerlink" title="4.1.什么是容器数据卷"></a>4.1.什么是容器数据卷</h3><ul><li>将应用和环境打包成一个镜像！数据？如果数据都在容器中，那么我们将容器删除，数据就会消失。</li><li>需求：为了解决数据持久化的问题，可以容器数据存储在本地磁盘中，容器之间可以有一个数据共享的技术！</li><li>Docker容器中的数据可以同步到本地，删除容器后数据不会丢失，这就是容器数据卷技术。</li><li><strong>一句话：容器的数据的持久化和容器间数据的共享。</strong></li></ul><h3 id="4-2-使用数据卷"><a href="#4-2-使用数据卷" class="headerlink" title="4.2.使用数据卷"></a>4.2.使用数据卷</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -v的基本使用</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> 主机端口:容器内端口 <span class="token parameter variable">-v</span> 主机目录:容器目录 镜像id<span class="token comment"># 查看容器数据卷的挂载状态</span><span class="token function">docker</span> inspect 容器id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-安装MySQL"><a href="#4-3-安装MySQL" class="headerlink" title="4.3.安装MySQL"></a>4.3.安装MySQL</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mysql <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /root/mysql/data:/var/lib/mysql <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /root/mysql/conf:/etc/mysql <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">333</span> <span class="token punctuation">\</span>mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-1-MySQL8"><a href="#4-3-1-MySQL8" class="headerlink" title="4.3.1. MySQL8"></a>4.3.1. MySQL8</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token punctuation">\</span>    <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">333</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-v</span> /root/mysql8/data:/var/lib/mysql <span class="token punctuation">\</span>    <span class="token parameter variable">-v</span> /root/mysql8/log:/var/log/mysql <span class="token punctuation">\</span>    <span class="token parameter variable">-v</span> /root/mysql8/config:/etc/mysql <span class="token punctuation">\</span>    <span class="token parameter variable">-v</span> /etc/localtime:/etc/localtime <span class="token punctuation">\</span>    <span class="token parameter variable">-v</span> /root/mysql8/mysql-files:/var/lib/mysql-files <span class="token punctuation">\</span>    <span class="token parameter variable">--name</span> mysql8 <span class="token punctuation">\</span>    <span class="token parameter variable">-d</span> mysql:8.0.26<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-具名挂载和匿名挂载"><a href="#4-4-具名挂载和匿名挂载" class="headerlink" title="4.4.具名挂载和匿名挂载"></a>4.4.具名挂载和匿名挂载</h3><blockquote><p>匿名挂载和具名挂载展示</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、匿名挂载</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token parameter variable">--name</span> nginx01 <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /etc/nginx <span class="token punctuation">\</span>nginx:6.1<span class="token comment"># 查看所有的volume情况</span><span class="token function">docker</span> volume <span class="token function">ls</span><span class="token punctuation">[</span>root@mingyu bin<span class="token punctuation">]</span><span class="token comment"># docker volume ls</span>DRIVER              VOLUME NAME<span class="token builtin class-name">local</span>               6831db4e060f8452a51fc56b52af0605c944bb0ab16c778a96469233794783ea<span class="token comment"># 发现VOLUME NAME这里是一串乱码，这就是匿名挂载，我们在-v时只写了容器内的路径，没有写容器外的路径。</span><span class="token comment"># 2、具名挂载(-v 卷名:容器内路径) 注意这里是卷名而不是容器外路径</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3307</span>:3306 <span class="token parameter variable">--name</span> mysql-test <span class="token punctuation">\</span><span class="token parameter variable">-v</span> mysql-volume:/etc/mysql <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">333</span> <span class="token punctuation">\</span>mysql:5.7<span class="token comment"># 查看具名挂载卷的位置</span><span class="token punctuation">[</span>root@mingyu bin<span class="token punctuation">]</span><span class="token comment"># docker inspect mysql-test</span><span class="token string">"Mounts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"Type"</span><span class="token builtin class-name">:</span> <span class="token string">"volume"</span>,<span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"mysql-volume"</span>,<span class="token string">"Source"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/volumes/mysql-volume/_data"</span>,<span class="token string">"Destination"</span><span class="token builtin class-name">:</span> <span class="token string">"/etc/mysql"</span>,<span class="token string">"Driver"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span>,<span class="token string">"Mode"</span><span class="token builtin class-name">:</span> <span class="token string">"z"</span>,<span class="token string">"RW"</span><span class="token builtin class-name">:</span> true,<span class="token string">"Propagation"</span><span class="token builtin class-name">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的Docker容器的容器卷，没有指定目录的情况下都是在<code>/var/lib/docker/volumes/xxx/_data</code>。</p><p>我们通过具名挂载可以方便的找到我们的一个卷，大多数情况在使用的<code>具名挂载</code>。</p><blockquote><p>如何区分匿名挂载，还是具名挂载，还是指定路径挂载？</p></blockquote><ul><li>匿名挂载：<code>-v 容器内路径</code>。</li><li>具名挂载：<code>-v 卷名:容器内路径</code>。</li><li>指定路径挂载：<code>-v /宿主机路径:容器内路径</code>。</li></ul><blockquote><p>扩展</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 通过 -v 容器内路径:ro rw改变读写权限</span>ro <span class="token builtin class-name">readonly</span><span class="token comment"># 只读</span>rw readwrite<span class="token comment"># 可读可写 </span><span class="token comment"># 只要这个设置了容器权限，容器对我们挂载的数据卷内容就有限定了！</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3307</span>:3306 <span class="token parameter variable">--name</span> mysql-test <span class="token punctuation">\</span><span class="token parameter variable">-v</span> mysql-volume:/etc/mysql:ro <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">333</span> <span class="token punctuation">\</span>mysql:5.7<span class="token comment"># ro 说明这个路径只能通过宿主机来操作，容器内部是无法操作的！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-初识Dockefile"><a href="#4-5-初识Dockefile" class="headerlink" title="4.5.初识Dockefile"></a>4.5.初识Dockefile</h3><p>Dockerfile就是用来构建docker image的文件！就是命令脚本！</p><p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本一个个的命令，每个命令就是一层。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、创建一个dockerfile文件，名字可以随意</span><span class="token comment"># 文件中的内容指令(大写)  参数</span>FROM centosVOLUME <span class="token punctuation">[</span><span class="token string">"volume01"</span>,<span class="token string">"volume02"</span><span class="token punctuation">]</span>CMD <span class="token builtin class-name">echo</span> <span class="token string">"---end---"</span>CMD /bin/bash<span class="token comment"># 这里每个命令就是镜像的一层</span><span class="token comment"># 2、docker build生成镜像 </span><span class="token punctuation">[</span>root@mingyu docker-test-volume<span class="token punctuation">]</span><span class="token comment"># docker build -f /root/docker-test-volume/dockerfile1 -t mingyu/centos:1.0 . # 这里的这个点表示当前路径下！一定要加</span>Sending build context to Docker daemon  <span class="token number">2</span>.048kBStep <span class="token number">1</span>/4 <span class="token builtin class-name">:</span> FROM centoslatest: Pulling from library/centos6910e5a164f7: Pull complete Digest: sha256:4062bbdd1bb0801b0aa38e0f83dece70fb7a5e9bce223423a68de2d8b784b43bStatus: Downloaded newer image <span class="token keyword">for</span> centos:latest ---<span class="token operator">></span> 831691599b88Step <span class="token number">2</span>/4 <span class="token builtin class-name">:</span> VOLUME <span class="token punctuation">[</span><span class="token string">"volume01"</span>,<span class="token string">"volume02"</span><span class="token punctuation">]</span> ---<span class="token operator">></span> Running <span class="token keyword">in</span> 2431f66d812cRemoving intermediate container 2431f66d812c ---<span class="token operator">></span> d7d82437e882Step <span class="token number">3</span>/4 <span class="token builtin class-name">:</span> CMD <span class="token builtin class-name">echo</span> <span class="token string">"---end---"</span> ---<span class="token operator">></span> Running <span class="token keyword">in</span> 61e1c1e347f4Removing intermediate container 61e1c1e347f4 ---<span class="token operator">></span> 9941580f890aStep <span class="token number">4</span>/4 <span class="token builtin class-name">:</span> CMD /bin/bash ---<span class="token operator">></span> Running <span class="token keyword">in</span> c6985be4aaedRemoving intermediate container c6985be4aaed ---<span class="token operator">></span> 8adb23ccb590Successfully built 8adb23ccb590Successfully tagged mingyu/centos:1.0<span class="token comment"># 3、启动自己写的容器</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> mycentos mingyu/centos:1.0 /bin/bash<span class="token comment"># 在容器内部可以看到我们自己定义的容器卷</span><span class="token punctuation">[</span>root@26c568f61497 /<span class="token punctuation">]</span><span class="token comment"># ls</span>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  volume01volume02<span class="token comment"># 4、查看容器的数据卷的挂载位置</span><span class="token punctuation">[</span>root@mingyu ~<span class="token punctuation">]</span><span class="token comment"># docker inspect mycentos</span><span class="token string">"Mounts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"Type"</span><span class="token builtin class-name">:</span> <span class="token string">"volume"</span>,<span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"ec18f8b7f9a2284071501133ec17c5094093200e372dcf6c5b2bd13fbf4c9f06"</span>,<span class="token string">"Source"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/volumes/ec18f8b7f9a2284071501133ec17c5094093200e372dcf6c5b2bd13fbf4c9f06/_data"</span>,<span class="token string">"Destination"</span><span class="token builtin class-name">:</span> <span class="token string">"volume01"</span>,<span class="token string">"Driver"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span>,<span class="token string">"Mode"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,<span class="token string">"RW"</span><span class="token builtin class-name">:</span> true,<span class="token string">"Propagation"</span><span class="token builtin class-name">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span>,<span class="token punctuation">&#123;</span><span class="token string">"Type"</span><span class="token builtin class-name">:</span> <span class="token string">"volume"</span>,<span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"8adb94c9d27174623e188e48652d932889a7d84c33466ab96d2548ee7f9fea72"</span>,<span class="token string">"Source"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/volumes/8adb94c9d27174623e188e48652d932889a7d84c33466ab96d2548ee7f9fea72/_data"</span>,<span class="token string">"Destination"</span><span class="token builtin class-name">:</span> <span class="token string">"volume02"</span>,<span class="token string">"Driver"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span>,<span class="token string">"Mode"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,<span class="token string">"RW"</span><span class="token builtin class-name">:</span> true,<span class="token string">"Propagation"</span><span class="token builtin class-name">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式我们未来使用的十分多，因为我们通常会自己构建自己的镜像！</p><p>建设构建镜像时没有挂载卷，需要手动挂载<code> -v 卷名:容器内路径</code>。</p><h3 id="4-6-数据卷容器"><a href="#4-6-数据卷容器" class="headerlink" title="4.6.数据卷容器"></a>4.6.数据卷容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># mycentos01容器继承mycentos的容器数据卷</span><span class="token comment"># mycentos01容器也有mycentos的数据了！</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> mycentos01 --volumes-from mycentos mingyu/centos:1.0 /bin/bash<span class="token comment"># 测试删除mycentos容器，mycentos01容器仍然可以访问数据卷的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7-结论"><a href="#4-7-结论" class="headerlink" title="4.7.结论"></a>4.7.结论</h3><ul><li>容器之间信息的传递，数据卷的生命周期一直持续到没有容器使用为止。</li><li>但是一旦将数据持久化到本地磁盘，本地文件是不会消失的！</li></ul><h2 id="5-DockerFile"><a href="#5-DockerFile" class="headerlink" title="5.DockerFile"></a>5.DockerFile</h2><h3 id="5-1-Docker镜像的构建步骤"><a href="#5-1-Docker镜像的构建步骤" class="headerlink" title="5.1.Docker镜像的构建步骤"></a>5.1.Docker镜像的构建步骤</h3><ul><li>编写一个dockerfile文件。</li><li><code>docker build</code>构建成为一个镜像。</li><li><code>docker run</code>运行镜像。</li><li><code>docker push</code>发布镜像（Docker Hub、阿里云镜像）。</li></ul><h3 id="5-2-DockerFile构建过程"><a href="#5-2-DockerFile构建过程" class="headerlink" title="5.2.DockerFile构建过程"></a>5.2.DockerFile构建过程</h3><h4 id="5-2-1-基础知识"><a href="#5-2-1-基础知识" class="headerlink" title="5.2.1.基础知识"></a>5.2.1.基础知识</h4><ul><li>每个保留关键字（指令）都是必须大写字母。</li><li>执行从上到下顺序执行。</li><li>#表示注释。</li><li>每一个指令都会创建提交一个新的镜像层，并提交。</li></ul><p><img src="/markdownimages/Docker/7.png" alt="dockerfile指令分层"></p><p>dockerfile是面向开发的，我们以后要发布项目，做镜像，就要编写dockerfile文件，这个文件十分简单！</p><p>Docker镜像主键成为企业交付的标准，必须掌握！</p><h4 id="5-2-2-DockerFile、镜像和容器的关系"><a href="#5-2-2-DockerFile、镜像和容器的关系" class="headerlink" title="5.2.2.DockerFile、镜像和容器的关系"></a>5.2.2.DockerFile、镜像和容器的关系</h4><p>DockerFile：构建文件，定义了一切的步骤，相当于源代码。</p><p>DockerImages：通过DockerFile生成的镜像，最终发布和运行的产品。</p><p>DockerContainer：容器就是镜像运行起来提供服务的。</p><h3 id="5-3-DockerFile指令"><a href="#5-3-DockerFile指令" class="headerlink" title="5.3.DockerFile指令"></a>5.3.DockerFile指令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM                       <span class="token comment"># 基础镜像，一切从这里开始构建</span>MAINTAINER                 <span class="token comment"># 镜像是谁写的，姓名+邮箱</span>RUN                        <span class="token comment"># 镜像构建的时候需要运行的命令</span>ADD                        <span class="token comment"># 添加内容(自动解压)</span>WORKDIR                    <span class="token comment"># 镜像的工作目录</span>VOLUME                     <span class="token comment"># 容器卷的挂载位置</span>EXPOSE                     <span class="token comment"># 暴露端口</span>CMD                        <span class="token comment"># 指定容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span>ENTRYPOINT                 <span class="token comment"># 指定容器启动的时候要运行的命令，可以追加命令</span>ONBUILD                    <span class="token comment"># 当构建一个被继承 DockerFile 这个时候就会运行ONBUILD指令</span>COPY                       <span class="token comment"># 类似ADD，将文件拷贝到镜像中</span>ENV                        <span class="token comment"># 构建的时候设置环境变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-实战：创建一个自己的CentOS"><a href="#5-4-实战：创建一个自己的CentOS" class="headerlink" title="5.4.实战：创建一个自己的CentOS"></a>5.4.实战：创建一个自己的CentOS</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、编写dockerfile文件</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># vim dockerfile-centos</span>FROM centosMAINTAINER mingyu<span class="token operator">&lt;</span><span class="token number">1790210727</span>@qq.com<span class="token operator">></span>ENV MYPATH /usr/localWORKDIR <span class="token variable">$MYPATH</span>RUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">vim</span>RUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> net-toolsEXPOSE <span class="token number">80</span>CMD <span class="token builtin class-name">echo</span> <span class="token variable">$MYPATH</span>CMD <span class="token builtin class-name">echo</span> <span class="token string">"---end---"</span>CMD /bin/bash<span class="token comment"># 2、docker build构建镜像</span><span class="token comment"># 语法：docker build -f dockerfile文件路径 -t 镜像名:版本号 .</span><span class="token function">docker</span> build <span class="token parameter variable">-f</span> dockerfile-centos <span class="token parameter variable">-t</span> mingyu/centos:2.0 <span class="token builtin class-name">.</span><span class="token comment"># 3、查看我们自己构建的镜像</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED              SIZEmingyu/centos       <span class="token number">2.0</span>                 bab722ff73fc        About a minute ago   287MB<span class="token comment"># 4、测试运行</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> mycentos mingyu/centos:2.0<span class="token comment"># 原生的CentOS并没有vim和ifconfig命令，我们自己构建的CentOS是可以用的！</span><span class="token comment"># 5、docker history 可以查看镜像的构建步骤</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># docker history mingyu/centos:2.0</span>IMAGE               CREATED             CREATED BY                                      SIZE               bab722ff73fc        <span class="token number">8</span> minutes ago       /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop)  CMD ["/bin/sh" "-c" "/bin…   0B                 </span>84744206026b        <span class="token number">8</span> minutes ago       /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop)  CMD ["/bin/sh" "-c" "echo…   0B                 </span>1da4606efdce        <span class="token number">8</span> minutes ago       /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop)  CMD ["/bin/sh" "-c" "echo…   0B                 </span>cd5031824201        <span class="token number">8</span> minutes ago       /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop)  EXPOSE 80                    0B                 </span>773c8a4d5a68        <span class="token number">8</span> minutes ago       /bin/sh <span class="token parameter variable">-c</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> net-tools             <span class="token number">14</span>.3MB             023728153f3b        <span class="token number">8</span> minutes ago       /bin/sh <span class="token parameter variable">-c</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">vim</span>                   <span class="token number">57</span>.1MB             72a357865b33        <span class="token number">8</span> minutes ago       /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop) WORKDIR /usr/local            0B                 </span>c248625c78e6        <span class="token number">8</span> minutes ago       /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop)  ENV MYPATH=/usr/local        0B                 </span>6fb94cf1eadc        <span class="token number">8</span> minutes ago       /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop)  MAINTAINER mingyu&lt;1466637…   0B                 </span>831691599b88        <span class="token number">10</span> days ago         /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop)  CMD ["/bin/bash"]            0B                 </span><span class="token operator">&lt;</span>missing<span class="token operator">></span>           <span class="token number">10</span> days ago         /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop)  LABEL org.label-schema.sc…   0B                 </span><span class="token operator">&lt;</span>missing<span class="token operator">></span>           <span class="token number">10</span> days ago         /bin/sh <span class="token parameter variable">-c</span> <span class="token comment">#(nop) ADD file:84700c11fcc969ac0…   215MB    </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5-CMD和ENTRYPOINT"><a href="#5-5-CMD和ENTRYPOINT" class="headerlink" title="5.5.CMD和ENTRYPOINT"></a>5.5.CMD和ENTRYPOINT</h3><blockquote><p>测试CMD</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CMD                        <span class="token comment"># 指定容器启动的时候要运行的命令，只有最后一个CMD会生效，可被替代</span>ENTRYPOINT                 <span class="token comment"># 指定容器启动的时候要运行的命令，可以追加命令</span><span class="token comment"># 1、写dockerfile文件</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># vim dockerfile-cmd-test</span>FROM centosCMD <span class="token punctuation">[</span><span class="token string">"ls"</span>,<span class="token string">"-a"</span><span class="token punctuation">]</span><span class="token comment"># 2、构建测试镜像</span><span class="token function">docker</span> build <span class="token parameter variable">-f</span> dockerfile-cmd-test <span class="token parameter variable">-t</span> test/cmd:1.0 <span class="token builtin class-name">.</span><span class="token comment"># 3、查看构建好的镜像</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEtest/cmd            <span class="token number">1.0</span>                 df29f1d322e7        <span class="token number">4</span> minutes ago       215MB<span class="token comment"># 4、启动测试镜像 发现我们ls -a命令生效</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># docker run -it --name test-cmd test/cmd:1.0</span><span class="token builtin class-name">.</span>   .dockerenvdev  home  lib64       media  opt   root  sbinsys  usr<span class="token punctuation">..</span>  binetc  lib   lost+found  mnt    proc  run   srvtmp  var<span class="token comment"># 5、测试追加命令 结果失败 o(╥﹏╥)o</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># docker run -it --name test-cmd test/cmd:1.0 -l</span>docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused <span class="token string">"exec: <span class="token entity" title="\&quot;">\"</span>-l<span class="token entity" title="\&quot;">\"</span>: executable file not found in <span class="token environment constant">$PATH</span>"</span><span class="token builtin class-name">:</span> unknown.<span class="token comment"># 6、原因：用CMD的情况下 -l 替换了 CMD ["ls","-a"]，-l不是命令所以就报错了！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>测试ENTRYPOINT</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CMD                        <span class="token comment"># 指定容器启动的时候要运行的命令，只有最后一个CMD会生效，可被替代</span>ENTRYPOINT                 <span class="token comment"># 指定容器启动的时候要运行的命令，可以追加命令</span><span class="token comment"># 1、写dockerfile文件</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># vim dockerfile-entrypoint-test</span>FROM centosENTRYPOINT <span class="token punctuation">[</span><span class="token string">"ls"</span>,<span class="token string">"-a"</span><span class="token punctuation">]</span><span class="token comment"># 2、构建测试镜像</span><span class="token function">docker</span> build <span class="token parameter variable">-f</span> dockerfile-entrypoint-test <span class="token parameter variable">-t</span> test/entrypoint:1.0 <span class="token builtin class-name">.</span><span class="token comment"># 3、查看构建好的镜像</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEtest/entrypoint     <span class="token number">1.0</span>                 6ede8cb2383f        <span class="token number">31</span> seconds ago      215MB<span class="token comment"># 4、启动测试镜像 发现我们ls -a命令生效</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># docker run --name test-entrypoint -it test/entrypoint:1.0</span><span class="token builtin class-name">.</span>   .dockerenvdev  home  lib64       media  opt   root  sbinsys  usr<span class="token punctuation">..</span>  binetc  lib   lost+found  mnt    proc  run   srvtmp  var<span class="token comment"># 5、测试追加命令 成功了 (*^▽^*)</span><span class="token punctuation">[</span>root@mingyu dockerfile<span class="token punctuation">]</span><span class="token comment"># docker run --name test-entrypoint1 -it test/entrypoint:1.0 -l</span>total <span class="token number">56</span>drwxr-xr-x  <span class="token number">1</span> root root <span class="token number">4096</span> Jun <span class="token number">27</span> 05:58 <span class="token builtin class-name">.</span>drwxr-xr-x  <span class="token number">1</span> root root <span class="token number">4096</span> Jun <span class="token number">27</span> 05:58 <span class="token punctuation">..</span>-rwxr-xr-x  <span class="token number">1</span> root root    <span class="token number">0</span> Jun <span class="token number">27</span> 05:58 .dockerenvlrwxrwxrwx  <span class="token number">1</span> root root    <span class="token number">7</span> May <span class="token number">11</span>  <span class="token number">2019</span> bin -<span class="token operator">></span> usr/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-6-实战：Tomcat镜像"><a href="#5-6-实战：Tomcat镜像" class="headerlink" title="5.6.实战：Tomcat镜像"></a>5.6.实战：Tomcat镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、准备jdk压缩包和tomcat压缩包</span>jdk-8u251-linux-x64.tar.gzapache-tomcat-9.0.36.tar.gz<span class="token comment"># 2、编写dockerfile文件</span>FROM centosMAINTAINER mingyu<span class="token operator">&lt;</span><span class="token number">1790210727</span>@qq.com<span class="token operator">></span>ADD /opt/java/jdk-8u251-linux-x64.tar.gz /usr/local/ADD /opt/tomcat/apache-tomcat-9.0.36.tar.gz /usr/local/RUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">vim</span>ENV MYPATH /usr/localWORKDIR <span class="token variable">$MYPATH</span>ENV JAVA_HOME /usr/local/jdk1.8.0_251ENV CLASSPATH <span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jarENV CATALINA_HOME /usr/local/apache-tomcat-9.0.36ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.36ENV <span class="token environment constant">PATH</span> <span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$CATALINA_HOME</span>/lib:<span class="token variable">$CATALINA_HOME</span>/binEXPOSE <span class="token number">8080</span>CMD /usr/local/apache-tomcat-9.0.36/bin/startup.sh <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-7-小结"><a href="#5-7-小结" class="headerlink" title="5.7.小结"></a>5.7.小结</h3><p><img src="/markdownimages/Docker/7.png" alt="docker流程"></p><h2 id="6-Docker网络"><a href="#6-Docker网络" class="headerlink" title="6.Docker网络"></a>6.Docker网络</h2><h3 id="6-1-理解Docker网络"><a href="#6-1-理解Docker网络" class="headerlink" title="6.1.理解Docker网络"></a>6.1.理解Docker网络</h3><blockquote><p>查看网络环境</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@mingyu tomcat<span class="token punctuation">]</span><span class="token comment"># ifconfig</span>docker0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet <span class="token number">172.18</span>.0.1  netmask <span class="token number">255.255</span>.0.0  broadcast <span class="token number">172.18</span>.255.255        ether 02:42:f4:c7:a9:d2  txqueuelen <span class="token number">0</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">615374</span>  bytes <span class="token number">214760761</span> <span class="token punctuation">(</span><span class="token number">204.8</span> MiB<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">1059269</span>  bytes <span class="token number">132175026</span> <span class="token punctuation">(</span><span class="token number">126.0</span> MiB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>eth0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet <span class="token number">172.17</span>.95.30  netmask <span class="token number">255.255</span>.240.0  broadcast <span class="token number">172.17</span>.95.255        ether 00:16:3e:34:40:89  txqueuelen <span class="token number">1000</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">1358134</span>  bytes <span class="token number">713636205</span> <span class="token punctuation">(</span><span class="token number">680.5</span> MiB<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">1049543</span>  bytes <span class="token number">319209059</span> <span class="token punctuation">(</span><span class="token number">304.4</span> MiB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>lo: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">7</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,LOOPBACK,RUNNING<span class="token operator">></span>  mtu <span class="token number">65536</span>        inet <span class="token number">127.0</span>.0.1  netmask <span class="token number">255.0</span>.0.0        loop  txqueuelen <span class="token number">1</span>  <span class="token punctuation">(</span>Local Loopback<span class="token punctuation">)</span>        RX packets <span class="token number">1387986</span>  bytes <span class="token number">260874723</span> <span class="token punctuation">(</span><span class="token number">248.7</span> MiB<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">1387986</span>  bytes <span class="token number">260874723</span> <span class="token punctuation">(</span><span class="token number">248.7</span> MiB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>docker0</code>：docker的地址。</li><li><code>lo</code>：本机地址。</li><li><code>eth0</code>：阿里云内网地址。</li></ul><blockquote><p>原理</p></blockquote><ul><li>我们只要安装了docker就会安装一个网卡docker0，每启动一个docker容器，docker就会给docker容器分配一个ip ,桥接模式。</li><li>启动的容器带来的网卡都是一对对的。</li><li><code>veth-pair</code>技术就是一对虚拟设备接口，他们都是成对出现的，一端连着协议，一端彼此相连。</li><li>正因为有<code>veth-pair</code>的特性，<code>veth-pair</code>可以充当桥梁，连接各种虚拟网络设备。</li></ul><p><img src="/markdownimages/Docker/9.png" alt="docker网络"></p><h3 id="6-2-查看Docker网络"><a href="#6-2-查看Docker网络" class="headerlink" title="6.2.查看Docker网络"></a>6.2.查看Docker网络</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、docker network ls 查看所有的docker网络</span><span class="token punctuation">[</span>root@mingyu ~<span class="token punctuation">]</span><span class="token comment"># docker network ls</span>NETWORK ID          NAME                DRIVER              SCOPE8ae116b000e5        bridge              bridge              <span class="token builtin class-name">local</span>18feddce366c        <span class="token function">host</span>                <span class="token function">host</span>                <span class="token builtin class-name">local</span>5cfab10d71d0        none                null                <span class="token builtin class-name">local</span><span class="token comment"># 2、查看具体的docker网络信息</span><span class="token function">docker</span> network inspect <span class="token punctuation">[</span>NETWORK ID<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-自定义网络"><a href="#6-3-自定义网络" class="headerlink" title="6.3.自定义网络"></a>6.3.自定义网络</h3><h4 id="6-3-1-网络模式"><a href="#6-3-1-网络模式" class="headerlink" title="6.3.1.网络模式"></a>6.3.1.网络模式</h4><ul><li><code>bridge</code>：桥接模式（默认，自定义网络也用桥接模式）。</li><li><code>none</code>：不配网络，一般不用。</li><li><code>host</code>：主机模式，和宿主机共享网络。</li><li><code>container</code>：容器间直接连通（用的少）。</li></ul><h4 id="6-3-2-创建网络"><a href="#6-3-2-创建网络" class="headerlink" title="6.3.2.创建网络"></a>6.3.2.创建网络</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、我们直接启动的命令 --net bridge，这个就是我们的docker0</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> p <span class="token parameter variable">--name</span> tomcat01 <span class="token parameter variable">--net</span> bridge tomcat<span class="token comment"># 2、docker0特点：默认，域名不能访问</span><span class="token comment"># 3、自定义网络</span><span class="token comment"># --driver网络模式</span><span class="token comment"># --subnet子网掩码</span><span class="token comment"># --gateway默认网关</span><span class="token function">docker</span> network create <span class="token parameter variable">--driver</span> bridge <span class="token parameter variable">--subnet</span> <span class="token number">192.168</span>.0.0/16 <span class="token parameter variable">--gateway</span> <span class="token number">192.168</span>.0.1 mynetwork<span class="token comment"># 4、查看自己创建的网络</span><span class="token punctuation">[</span>root@mingyu ~<span class="token punctuation">]</span><span class="token comment"># docker network ls</span>NETWORK ID          NAME                DRIVER              SCOPE8ae116b000e5        bridge              bridge              <span class="token builtin class-name">local</span>18feddce366c        <span class="token function">host</span>                <span class="token function">host</span>                <span class="token builtin class-name">local</span>625963e16231        mynetwork           bridge              <span class="token builtin class-name">local</span>5cfab10d71d0        none                null                <span class="token builtin class-name">local</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-3-自定义网络的好处"><a href="#6-3-3-自定义网络的好处" class="headerlink" title="6.3.3.自定义网络的好处"></a>6.3.3.自定义网络的好处</h4><ul><li><p>使用docker0网络，容器和容器之间只能通过IP地址来ping通，不能使用容器名字来ping。</p></li><li><p>我们自定义网络，容器之间不仅可以使用IP地址来通信，而且可以使用容器名字来通信。</p></li><li><p>不同的集群可以使用不同的网络，保证集群式安全和健康的。</p></li></ul><h3 id="6-4-网络联通"><a href="#6-4-网络联通" class="headerlink" title="6.4.网络联通"></a>6.4.网络联通</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker network connect</span><span class="token punctuation">[</span>root@mingyu ~<span class="token punctuation">]</span><span class="token comment"># docker network --help</span>Usage:<span class="token function">docker</span> network COMMANDManage networksCommands:  connect     Connect a container to a network<span class="token comment"># docker network connect 语法</span><span class="token function">docker</span> network connect NETWORK CONTAINER<span class="token comment"># 联通之后就是将CONTAINER放到了NETWORK下</span><span class="token comment"># 一个容器两个IP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-SpringBoot微服务打包成镜像"><a href="#7-SpringBoot微服务打包成镜像" class="headerlink" title="7.SpringBoot微服务打包成镜像"></a>7.SpringBoot微服务打包成镜像</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1、构建SpringBoot项目。</span><span class="token comment"># 2、打包应用。</span><span class="token comment"># 3、编写dockerfile。</span>FROM java:8EXPOSE <span class="token number">8080</span>VOLUME /tmpADD renren-fast.jar  /app.jarRUN <span class="token function">bash</span> <span class="token parameter variable">-c</span> <span class="token string">'touch /app.jar'</span>ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"java"</span>,<span class="token string">"-jar"</span>,<span class="token string">"/app.jar"</span><span class="token punctuation">]</span><span class="token comment"># 4、将Dockerfile和jar上传到服务器上同一层目录下</span><span class="token comment"># 5、构建镜像</span><span class="token function">docker</span> build <span class="token parameter variable">-f</span> Dockerfile <span class="token parameter variable">-t</span> mingyu/renren-fast:1.0 <span class="token builtin class-name">.</span><span class="token comment"># 6、启动镜像</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> renren-fast <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /root/idea/renren-fast/tmp:/tmp <span class="token punctuation">\</span><span class="token parameter variable">-d</span> mingyu/renren-fast:1.0<span class="token comment"># 7、访问服务器地址</span>http://xxx.xxx.xxx.xxx:8080/renren-fast/sys/user/info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-f</span> Dockerfile <span class="token parameter variable">-t</span> vhr-web:1.0 <span class="token builtin class-name">.</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> vhr-web <span class="token parameter variable">-p</span> <span class="token number">8001</span>:8001 <span class="token parameter variable">-d</span> vhr-web:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
